// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";

export interface GetAccountsAccountDetail {
    /**
     * The account id.
     */
    accountId?: string;
    /**
     * External Id of the onboarded account
     */
    externalId?: string;
    /**
     * Onboarding status of the account.
     */
    onboardingStatus?: string;
}

export interface GetAccountsAccountDetailArgs {
    /**
     * The account id.
     */
    accountId?: pulumi.Input<string>;
    /**
     * External Id of the onboarded account
     */
    externalId?: pulumi.Input<string>;
    /**
     * Onboarding status of the account.
     */
    onboardingStatus?: pulumi.Input<string>;
}

export interface NgfwEgressNat {
    /**
     * Enable egress NAT
     */
    enabled: pulumi.Input<boolean>;
    settings?: pulumi.Input<pulumi.Input<inputs.NgfwEgressNatSetting>[]>;
}

export interface NgfwEgressNatSetting {
    /**
     * Set ip pool type from the following options. Valid values are `AWSService` or `BYOIP`.
     */
    ipPoolType?: pulumi.Input<string>;
    /**
     * The IP pool ID
     */
    ipamPoolId?: pulumi.Input<string>;
}

export interface NgfwEndpoint {
    /**
     * The account id.
     */
    accountId?: pulumi.Input<string>;
    /**
     * Enable egress NAT
     */
    egressNatEnabled?: pulumi.Input<boolean>;
    /**
     * Endpoint ID of the security zone
     */
    endpointId?: pulumi.Input<string>;
    /**
     * The endpoint mode. Valid values are `ServiceManaged` or `CustomerManaged`.
     */
    mode: pulumi.Input<string>;
    prefixes?: pulumi.Input<pulumi.Input<inputs.NgfwEndpointPrefix>[]>;
    /**
     * The rejected reason.
     */
    rejectedReason?: pulumi.Input<string>;
    /**
     * The attachment status.
     */
    status?: pulumi.Input<string>;
    /**
     * The subnet id.
     */
    subnetId?: pulumi.Input<string>;
    /**
     * The vpc id.
     */
    vpcId?: pulumi.Input<string>;
    /**
     * The AZ id.
     */
    zoneId?: pulumi.Input<string>;
}

export interface NgfwEndpointPrefix {
    privatePrefixes?: pulumi.Input<pulumi.Input<inputs.NgfwEndpointPrefixPrivatePrefix>[]>;
}

export interface NgfwEndpointPrefixPrivatePrefix {
    cidrs?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface NgfwLogProfileLogConfig {
    /**
     * Type of Role for log configuration
     */
    accountId?: pulumi.Input<string>;
    /**
     * The log destination details.
     */
    logDestination: pulumi.Input<string>;
    /**
     * The log destination type. Valid values are `S3`, `CloudWatchLogs`, or `KinesisDataFirehose`.
     */
    logDestinationType: pulumi.Input<string>;
    /**
     * The list of different log types that are wanted
     */
    logTypes: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Type of Role for log configuration
     */
    roleType?: pulumi.Input<string>;
}

export interface NgfwLogProfileLogDestination {
    /**
     * The log destination details.
     */
    destination?: pulumi.Input<string>;
    /**
     * The log destination type. Valid values are `S3`, `CloudWatchLogs`, or `KinesisDataFirehose`.
     */
    destinationType?: pulumi.Input<string>;
    /**
     * The type of logs. Valid values are `TRAFFIC`, `THREAT`, or `DECRYPTION`.
     */
    logType?: pulumi.Input<string>;
}

export interface NgfwPrivateAccess {
    /**
     * AWS ResourceID
     */
    resourceId: pulumi.Input<string>;
    /**
     * Type of Private Access
     */
    type: pulumi.Input<string>;
}

export interface NgfwStatus {
    /**
     * The device rulestack commit status.
     */
    deviceRulestackCommitStatus?: pulumi.Input<string>;
    /**
     * The firewall failure reason.
     */
    failureReason?: pulumi.Input<string>;
    /**
     * The firewall status.
     */
    firewallStatus?: pulumi.Input<string>;
    /**
     * The rulestack status.
     */
    rulestackStatus?: pulumi.Input<string>;
}

export interface NgfwSubnetMapping {
    /**
     * The availability zone, for when the endpoint mode is customer managed.
     */
    availabilityZone?: pulumi.Input<string>;
    /**
     * The availability zone ID, for when the endpoint mode is customer managed.
     */
    availabilityZoneId?: pulumi.Input<string>;
    /**
     * The subnet id, for when the endpoint mode is service managed.
     */
    subnetId?: pulumi.Input<string>;
}

export interface NgfwUserId {
    /**
     * Agent Name for UserID
     */
    agentName?: pulumi.Input<string>;
    /**
     * The Collector Name
     */
    collectorName?: pulumi.Input<string>;
    /**
     * List of Custom Include Exclude Networks
     */
    customIncludeExcludeNetworks?: pulumi.Input<pulumi.Input<inputs.NgfwUserIdCustomIncludeExcludeNetwork>[]>;
    /**
     * Enable UserID Config
     */
    enabled: pulumi.Input<boolean>;
    /**
     * The Port
     */
    port: pulumi.Input<number>;
    /**
     * AWS Secret Key ARN
     */
    secretKeyArn?: pulumi.Input<string>;
    /**
     * Status and State of UserID Configuration
     */
    userIdStatus?: pulumi.Input<string>;
}

export interface NgfwUserIdCustomIncludeExcludeNetwork {
    /**
     * Include or exclude this subnet from user-id configuration
     */
    discoveryInclude: pulumi.Input<boolean>;
    /**
     * Enable this specific custom include/exclude network
     */
    enabled: pulumi.Input<boolean>;
    /**
     * Name of subnet filter
     */
    name: pulumi.Input<string>;
    /**
     * Network IP address of the subnet filter
     */
    networkAddress: pulumi.Input<string>;
}

export interface RulestackProfileConfig {
    /**
     * Anti-spyware profile setting. Defaults to `BestPractice`.
     */
    antiSpyware?: pulumi.Input<string>;
    /**
     * Anti-virus profile setting. Defaults to `BestPractice`.
     */
    antiVirus?: pulumi.Input<string>;
    /**
     * File blocking profile setting. Defaults to `BestPractice`.
     */
    fileBlocking?: pulumi.Input<string>;
    /**
     * Outbound trust certificate.
     */
    outboundTrustCertificate?: pulumi.Input<string>;
    /**
     * Outbound untrust certificate.
     */
    outboundUntrustCertificate?: pulumi.Input<string>;
    /**
     * URL filtering profile setting. Defaults to `None`.
     */
    urlFiltering?: pulumi.Input<string>;
    /**
     * Vulnerability profile setting. Defaults to `BestPractice`.
     */
    vulnerability?: pulumi.Input<string>;
}

export interface SecurityRuleCategory {
    /**
     * List of feeds.
     */
    feeds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * List of URL category names.
     */
    urlCategoryNames?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface SecurityRuleDestination {
    /**
     * List of CIDRs.
     */
    cidrs?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * List of countries.
     */
    countries?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * List of feeds.
     */
    feeds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * List of FQDN lists.
     */
    fqdnLists?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * List of prefix list.
     */
    prefixLists?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface SecurityRuleSource {
    /**
     * List of CIDRs.
     */
    cidrs?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * List of countries.
     */
    countries?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * List of feeds.
     */
    feeds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * List of prefix list.
     */
    prefixLists?: pulumi.Input<pulumi.Input<string>[]>;
}
