// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

// Export members:
export { AccountArgs, AccountState } from "./account";
export type Account = import("./account").Account;
export const Account: typeof import("./account").Account = null as any;
utilities.lazyLoad(exports, ["Account"], () => require("./account"));

export { AccountOnboardingArgs, AccountOnboardingState } from "./accountOnboarding";
export type AccountOnboarding = import("./accountOnboarding").AccountOnboarding;
export const AccountOnboarding: typeof import("./accountOnboarding").AccountOnboarding = null as any;
utilities.lazyLoad(exports, ["AccountOnboarding"], () => require("./accountOnboarding"));

export { AccountOnboardingStackArgs, AccountOnboardingStackState } from "./accountOnboardingStack";
export type AccountOnboardingStack = import("./accountOnboardingStack").AccountOnboardingStack;
export const AccountOnboardingStack: typeof import("./accountOnboardingStack").AccountOnboardingStack = null as any;
utilities.lazyLoad(exports, ["AccountOnboardingStack"], () => require("./accountOnboardingStack"));

export { CertificateArgs, CertificateState } from "./certificate";
export type Certificate = import("./certificate").Certificate;
export const Certificate: typeof import("./certificate").Certificate = null as any;
utilities.lazyLoad(exports, ["Certificate"], () => require("./certificate"));

export { CommitRulestackArgs, CommitRulestackState } from "./commitRulestack";
export type CommitRulestack = import("./commitRulestack").CommitRulestack;
export const CommitRulestack: typeof import("./commitRulestack").CommitRulestack = null as any;
utilities.lazyLoad(exports, ["CommitRulestack"], () => require("./commitRulestack"));

export { CustomUrlCategoryArgs, CustomUrlCategoryState } from "./customUrlCategory";
export type CustomUrlCategory = import("./customUrlCategory").CustomUrlCategory;
export const CustomUrlCategory: typeof import("./customUrlCategory").CustomUrlCategory = null as any;
utilities.lazyLoad(exports, ["CustomUrlCategory"], () => require("./customUrlCategory"));

export { FqdnListArgs, FqdnListState } from "./fqdnList";
export type FqdnList = import("./fqdnList").FqdnList;
export const FqdnList: typeof import("./fqdnList").FqdnList = null as any;
utilities.lazyLoad(exports, ["FqdnList"], () => require("./fqdnList"));

export { GetAccountArgs, GetAccountResult, GetAccountOutputArgs } from "./getAccount";
export const getAccount: typeof import("./getAccount").getAccount = null as any;
export const getAccountOutput: typeof import("./getAccount").getAccountOutput = null as any;
utilities.lazyLoad(exports, ["getAccount","getAccountOutput"], () => require("./getAccount"));

export { GetAccountsArgs, GetAccountsResult, GetAccountsOutputArgs } from "./getAccounts";
export const getAccounts: typeof import("./getAccounts").getAccounts = null as any;
export const getAccountsOutput: typeof import("./getAccounts").getAccountsOutput = null as any;
utilities.lazyLoad(exports, ["getAccounts","getAccountsOutput"], () => require("./getAccounts"));

export { GetAppIdVersionArgs, GetAppIdVersionResult, GetAppIdVersionOutputArgs } from "./getAppIdVersion";
export const getAppIdVersion: typeof import("./getAppIdVersion").getAppIdVersion = null as any;
export const getAppIdVersionOutput: typeof import("./getAppIdVersion").getAppIdVersionOutput = null as any;
utilities.lazyLoad(exports, ["getAppIdVersion","getAppIdVersionOutput"], () => require("./getAppIdVersion"));

export { GetAppIdVersionsArgs, GetAppIdVersionsResult, GetAppIdVersionsOutputArgs } from "./getAppIdVersions";
export const getAppIdVersions: typeof import("./getAppIdVersions").getAppIdVersions = null as any;
export const getAppIdVersionsOutput: typeof import("./getAppIdVersions").getAppIdVersionsOutput = null as any;
utilities.lazyLoad(exports, ["getAppIdVersions","getAppIdVersionsOutput"], () => require("./getAppIdVersions"));

export { GetCertificateArgs, GetCertificateResult, GetCertificateOutputArgs } from "./getCertificate";
export const getCertificate: typeof import("./getCertificate").getCertificate = null as any;
export const getCertificateOutput: typeof import("./getCertificate").getCertificateOutput = null as any;
utilities.lazyLoad(exports, ["getCertificate","getCertificateOutput"], () => require("./getCertificate"));

export { GetCountryArgs, GetCountryResult, GetCountryOutputArgs } from "./getCountry";
export const getCountry: typeof import("./getCountry").getCountry = null as any;
export const getCountryOutput: typeof import("./getCountry").getCountryOutput = null as any;
utilities.lazyLoad(exports, ["getCountry","getCountryOutput"], () => require("./getCountry"));

export { GetCustomUrlCategoryArgs, GetCustomUrlCategoryResult, GetCustomUrlCategoryOutputArgs } from "./getCustomUrlCategory";
export const getCustomUrlCategory: typeof import("./getCustomUrlCategory").getCustomUrlCategory = null as any;
export const getCustomUrlCategoryOutput: typeof import("./getCustomUrlCategory").getCustomUrlCategoryOutput = null as any;
utilities.lazyLoad(exports, ["getCustomUrlCategory","getCustomUrlCategoryOutput"], () => require("./getCustomUrlCategory"));

export { GetFqdnListArgs, GetFqdnListResult, GetFqdnListOutputArgs } from "./getFqdnList";
export const getFqdnList: typeof import("./getFqdnList").getFqdnList = null as any;
export const getFqdnListOutput: typeof import("./getFqdnList").getFqdnListOutput = null as any;
utilities.lazyLoad(exports, ["getFqdnList","getFqdnListOutput"], () => require("./getFqdnList"));

export { GetIntelligentFeedArgs, GetIntelligentFeedResult, GetIntelligentFeedOutputArgs } from "./getIntelligentFeed";
export const getIntelligentFeed: typeof import("./getIntelligentFeed").getIntelligentFeed = null as any;
export const getIntelligentFeedOutput: typeof import("./getIntelligentFeed").getIntelligentFeedOutput = null as any;
utilities.lazyLoad(exports, ["getIntelligentFeed","getIntelligentFeedOutput"], () => require("./getIntelligentFeed"));

export { GetNgfwArgs, GetNgfwResult, GetNgfwOutputArgs } from "./getNgfw";
export const getNgfw: typeof import("./getNgfw").getNgfw = null as any;
export const getNgfwOutput: typeof import("./getNgfw").getNgfwOutput = null as any;
utilities.lazyLoad(exports, ["getNgfw","getNgfwOutput"], () => require("./getNgfw"));

export { GetNgfwLogProfileArgs, GetNgfwLogProfileResult, GetNgfwLogProfileOutputArgs } from "./getNgfwLogProfile";
export const getNgfwLogProfile: typeof import("./getNgfwLogProfile").getNgfwLogProfile = null as any;
export const getNgfwLogProfileOutput: typeof import("./getNgfwLogProfile").getNgfwLogProfileOutput = null as any;
utilities.lazyLoad(exports, ["getNgfwLogProfile","getNgfwLogProfileOutput"], () => require("./getNgfwLogProfile"));

export { GetNgfwsArgs, GetNgfwsResult, GetNgfwsOutputArgs } from "./getNgfws";
export const getNgfws: typeof import("./getNgfws").getNgfws = null as any;
export const getNgfwsOutput: typeof import("./getNgfws").getNgfwsOutput = null as any;
utilities.lazyLoad(exports, ["getNgfws","getNgfwsOutput"], () => require("./getNgfws"));

export { GetPredefinedUrlCategoriesArgs, GetPredefinedUrlCategoriesResult, GetPredefinedUrlCategoriesOutputArgs } from "./getPredefinedUrlCategories";
export const getPredefinedUrlCategories: typeof import("./getPredefinedUrlCategories").getPredefinedUrlCategories = null as any;
export const getPredefinedUrlCategoriesOutput: typeof import("./getPredefinedUrlCategories").getPredefinedUrlCategoriesOutput = null as any;
utilities.lazyLoad(exports, ["getPredefinedUrlCategories","getPredefinedUrlCategoriesOutput"], () => require("./getPredefinedUrlCategories"));

export { GetPredefinedUrlCategoryOverrideArgs, GetPredefinedUrlCategoryOverrideResult, GetPredefinedUrlCategoryOverrideOutputArgs } from "./getPredefinedUrlCategoryOverride";
export const getPredefinedUrlCategoryOverride: typeof import("./getPredefinedUrlCategoryOverride").getPredefinedUrlCategoryOverride = null as any;
export const getPredefinedUrlCategoryOverrideOutput: typeof import("./getPredefinedUrlCategoryOverride").getPredefinedUrlCategoryOverrideOutput = null as any;
utilities.lazyLoad(exports, ["getPredefinedUrlCategoryOverride","getPredefinedUrlCategoryOverrideOutput"], () => require("./getPredefinedUrlCategoryOverride"));

export { GetPrefixListArgs, GetPrefixListResult, GetPrefixListOutputArgs } from "./getPrefixList";
export const getPrefixList: typeof import("./getPrefixList").getPrefixList = null as any;
export const getPrefixListOutput: typeof import("./getPrefixList").getPrefixListOutput = null as any;
utilities.lazyLoad(exports, ["getPrefixList","getPrefixListOutput"], () => require("./getPrefixList"));

export { GetRulestackArgs, GetRulestackResult, GetRulestackOutputArgs } from "./getRulestack";
export const getRulestack: typeof import("./getRulestack").getRulestack = null as any;
export const getRulestackOutput: typeof import("./getRulestack").getRulestackOutput = null as any;
utilities.lazyLoad(exports, ["getRulestack","getRulestackOutput"], () => require("./getRulestack"));

export { GetSecurityRuleArgs, GetSecurityRuleResult, GetSecurityRuleOutputArgs } from "./getSecurityRule";
export const getSecurityRule: typeof import("./getSecurityRule").getSecurityRule = null as any;
export const getSecurityRuleOutput: typeof import("./getSecurityRule").getSecurityRuleOutput = null as any;
utilities.lazyLoad(exports, ["getSecurityRule","getSecurityRuleOutput"], () => require("./getSecurityRule"));

export { GetValidateRulestackArgs, GetValidateRulestackResult, GetValidateRulestackOutputArgs } from "./getValidateRulestack";
export const getValidateRulestack: typeof import("./getValidateRulestack").getValidateRulestack = null as any;
export const getValidateRulestackOutput: typeof import("./getValidateRulestack").getValidateRulestackOutput = null as any;
utilities.lazyLoad(exports, ["getValidateRulestack","getValidateRulestackOutput"], () => require("./getValidateRulestack"));

export { IntelligentFeedArgs, IntelligentFeedState } from "./intelligentFeed";
export type IntelligentFeed = import("./intelligentFeed").IntelligentFeed;
export const IntelligentFeed: typeof import("./intelligentFeed").IntelligentFeed = null as any;
utilities.lazyLoad(exports, ["IntelligentFeed"], () => require("./intelligentFeed"));

export { NgfwArgs, NgfwState } from "./ngfw";
export type Ngfw = import("./ngfw").Ngfw;
export const Ngfw: typeof import("./ngfw").Ngfw = null as any;
utilities.lazyLoad(exports, ["Ngfw"], () => require("./ngfw"));

export { NgfwLogProfileArgs, NgfwLogProfileState } from "./ngfwLogProfile";
export type NgfwLogProfile = import("./ngfwLogProfile").NgfwLogProfile;
export const NgfwLogProfile: typeof import("./ngfwLogProfile").NgfwLogProfile = null as any;
utilities.lazyLoad(exports, ["NgfwLogProfile"], () => require("./ngfwLogProfile"));

export { PredefinedUrlCategoryOverrideArgs, PredefinedUrlCategoryOverrideState } from "./predefinedUrlCategoryOverride";
export type PredefinedUrlCategoryOverride = import("./predefinedUrlCategoryOverride").PredefinedUrlCategoryOverride;
export const PredefinedUrlCategoryOverride: typeof import("./predefinedUrlCategoryOverride").PredefinedUrlCategoryOverride = null as any;
utilities.lazyLoad(exports, ["PredefinedUrlCategoryOverride"], () => require("./predefinedUrlCategoryOverride"));

export { PrefixListArgs, PrefixListState } from "./prefixList";
export type PrefixList = import("./prefixList").PrefixList;
export const PrefixList: typeof import("./prefixList").PrefixList = null as any;
utilities.lazyLoad(exports, ["PrefixList"], () => require("./prefixList"));

export { ProviderArgs } from "./provider";
export type Provider = import("./provider").Provider;
export const Provider: typeof import("./provider").Provider = null as any;
utilities.lazyLoad(exports, ["Provider"], () => require("./provider"));

export { RulestackArgs, RulestackState } from "./rulestack";
export type Rulestack = import("./rulestack").Rulestack;
export const Rulestack: typeof import("./rulestack").Rulestack = null as any;
utilities.lazyLoad(exports, ["Rulestack"], () => require("./rulestack"));

export { SecurityRuleArgs, SecurityRuleState } from "./securityRule";
export type SecurityRule = import("./securityRule").SecurityRule;
export const SecurityRule: typeof import("./securityRule").SecurityRule = null as any;
utilities.lazyLoad(exports, ["SecurityRule"], () => require("./securityRule"));


// Export sub-modules:
import * as config from "./config";
import * as types from "./types";

export {
    config,
    types,
};

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "cloudngfwaws:index/account:Account":
                return new Account(name, <any>undefined, { urn })
            case "cloudngfwaws:index/accountOnboarding:AccountOnboarding":
                return new AccountOnboarding(name, <any>undefined, { urn })
            case "cloudngfwaws:index/accountOnboardingStack:AccountOnboardingStack":
                return new AccountOnboardingStack(name, <any>undefined, { urn })
            case "cloudngfwaws:index/certificate:Certificate":
                return new Certificate(name, <any>undefined, { urn })
            case "cloudngfwaws:index/commitRulestack:CommitRulestack":
                return new CommitRulestack(name, <any>undefined, { urn })
            case "cloudngfwaws:index/customUrlCategory:CustomUrlCategory":
                return new CustomUrlCategory(name, <any>undefined, { urn })
            case "cloudngfwaws:index/fqdnList:FqdnList":
                return new FqdnList(name, <any>undefined, { urn })
            case "cloudngfwaws:index/intelligentFeed:IntelligentFeed":
                return new IntelligentFeed(name, <any>undefined, { urn })
            case "cloudngfwaws:index/ngfw:Ngfw":
                return new Ngfw(name, <any>undefined, { urn })
            case "cloudngfwaws:index/ngfwLogProfile:NgfwLogProfile":
                return new NgfwLogProfile(name, <any>undefined, { urn })
            case "cloudngfwaws:index/predefinedUrlCategoryOverride:PredefinedUrlCategoryOverride":
                return new PredefinedUrlCategoryOverride(name, <any>undefined, { urn })
            case "cloudngfwaws:index/prefixList:PrefixList":
                return new PrefixList(name, <any>undefined, { urn })
            case "cloudngfwaws:index/rulestack:Rulestack":
                return new Rulestack(name, <any>undefined, { urn })
            case "cloudngfwaws:index/securityRule:SecurityRule":
                return new SecurityRule(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("cloudngfwaws", "index/account", _module)
pulumi.runtime.registerResourceModule("cloudngfwaws", "index/accountOnboarding", _module)
pulumi.runtime.registerResourceModule("cloudngfwaws", "index/accountOnboardingStack", _module)
pulumi.runtime.registerResourceModule("cloudngfwaws", "index/certificate", _module)
pulumi.runtime.registerResourceModule("cloudngfwaws", "index/commitRulestack", _module)
pulumi.runtime.registerResourceModule("cloudngfwaws", "index/customUrlCategory", _module)
pulumi.runtime.registerResourceModule("cloudngfwaws", "index/fqdnList", _module)
pulumi.runtime.registerResourceModule("cloudngfwaws", "index/intelligentFeed", _module)
pulumi.runtime.registerResourceModule("cloudngfwaws", "index/ngfw", _module)
pulumi.runtime.registerResourceModule("cloudngfwaws", "index/ngfwLogProfile", _module)
pulumi.runtime.registerResourceModule("cloudngfwaws", "index/predefinedUrlCategoryOverride", _module)
pulumi.runtime.registerResourceModule("cloudngfwaws", "index/prefixList", _module)
pulumi.runtime.registerResourceModule("cloudngfwaws", "index/rulestack", _module)
pulumi.runtime.registerResourceModule("cloudngfwaws", "index/securityRule", _module)
pulumi.runtime.registerResourcePackage("cloudngfwaws", {
    version: utilities.getVersion(),
    constructProvider: (name: string, type: string, urn: string): pulumi.ProviderResource => {
        if (type !== "pulumi:providers:cloudngfwaws") {
            throw new Error(`unknown provider type ${type}`);
        }
        return new Provider(name, <any>undefined, { urn });
    },
});
