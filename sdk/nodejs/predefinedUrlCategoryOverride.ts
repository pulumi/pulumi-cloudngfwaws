// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * Resource for predefined URL category override management.
 *
 * ## Admin Permission Type
 *
 * * `Rulestack` (for `scope="Local"`)
 * * `Global Rulestack` (for `scope="Global"`)
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as cloudngfwaws from "@pulumi/cloudngfwaws";
 *
 * const r = new cloudngfwaws.Rulestack("r", {
 *     name: "terraform-rulestack",
 *     scope: "Local",
 *     accountId: "123456789",
 *     description: "Made by Pulumi",
 *     profileConfig: {
 *         antiSpyware: "BestPractice",
 *     },
 * });
 * const example = new cloudngfwaws.PredefinedUrlCategoryOverride("example", {
 *     rulestack: r.name,
 *     name: "foobar",
 *     action: "block",
 * });
 * ```
 *
 * ## Import
 *
 * import name is <rulestack>:<predefined_url_category_override_name>
 *
 * ```sh
 * $ pulumi import cloudngfwaws:index/predefinedUrlCategoryOverride:PredefinedUrlCategoryOverride example terraform-rulestack:foobar
 * ```
 */
export class PredefinedUrlCategoryOverride extends pulumi.CustomResource {
    /**
     * Get an existing PredefinedUrlCategoryOverride resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: PredefinedUrlCategoryOverrideState, opts?: pulumi.CustomResourceOptions): PredefinedUrlCategoryOverride {
        return new PredefinedUrlCategoryOverride(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'cloudngfwaws:index/predefinedUrlCategoryOverride:PredefinedUrlCategoryOverride';

    /**
     * Returns true if the given object is an instance of PredefinedUrlCategoryOverride.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is PredefinedUrlCategoryOverride {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === PredefinedUrlCategoryOverride.__pulumiType;
    }

    /**
     * The action to take. Valid values are `none`, `allow`, `alert`, or `block`. Defaults to `none`.
     */
    declare public readonly action: pulumi.Output<string | undefined>;
    /**
     * The audit comment.
     */
    declare public readonly auditComment: pulumi.Output<string | undefined>;
    /**
     * The name.
     */
    declare public readonly name: pulumi.Output<string>;
    /**
     * The rulestack.
     */
    declare public readonly rulestack: pulumi.Output<string>;
    /**
     * Update token.
     */
    declare public /*out*/ readonly updateToken: pulumi.Output<string>;

    /**
     * Create a PredefinedUrlCategoryOverride resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: PredefinedUrlCategoryOverrideArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: PredefinedUrlCategoryOverrideArgs | PredefinedUrlCategoryOverrideState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as PredefinedUrlCategoryOverrideState | undefined;
            resourceInputs["action"] = state?.action;
            resourceInputs["auditComment"] = state?.auditComment;
            resourceInputs["name"] = state?.name;
            resourceInputs["rulestack"] = state?.rulestack;
            resourceInputs["updateToken"] = state?.updateToken;
        } else {
            const args = argsOrState as PredefinedUrlCategoryOverrideArgs | undefined;
            if (args?.rulestack === undefined && !opts.urn) {
                throw new Error("Missing required property 'rulestack'");
            }
            resourceInputs["action"] = args?.action;
            resourceInputs["auditComment"] = args?.auditComment;
            resourceInputs["name"] = args?.name;
            resourceInputs["rulestack"] = args?.rulestack;
            resourceInputs["updateToken"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(PredefinedUrlCategoryOverride.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering PredefinedUrlCategoryOverride resources.
 */
export interface PredefinedUrlCategoryOverrideState {
    /**
     * The action to take. Valid values are `none`, `allow`, `alert`, or `block`. Defaults to `none`.
     */
    action?: pulumi.Input<string>;
    /**
     * The audit comment.
     */
    auditComment?: pulumi.Input<string>;
    /**
     * The name.
     */
    name?: pulumi.Input<string>;
    /**
     * The rulestack.
     */
    rulestack?: pulumi.Input<string>;
    /**
     * Update token.
     */
    updateToken?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a PredefinedUrlCategoryOverride resource.
 */
export interface PredefinedUrlCategoryOverrideArgs {
    /**
     * The action to take. Valid values are `none`, `allow`, `alert`, or `block`. Defaults to `none`.
     */
    action?: pulumi.Input<string>;
    /**
     * The audit comment.
     */
    auditComment?: pulumi.Input<string>;
    /**
     * The name.
     */
    name?: pulumi.Input<string>;
    /**
     * The rulestack.
     */
    rulestack: pulumi.Input<string>;
}
