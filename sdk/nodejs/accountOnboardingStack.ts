// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * Resource for Account Onboarding.
 *
 * ## Admin Permission Type
 *
 * * `Rulestack` (for `scope="Local"`)
 * * `Global Rulestack` (for `scope="Global"`)
 */
export class AccountOnboardingStack extends pulumi.CustomResource {
    /**
     * Get an existing AccountOnboardingStack resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: AccountOnboardingStackState, opts?: pulumi.CustomResourceOptions): AccountOnboardingStack {
        return new AccountOnboardingStack(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'cloudngfwaws:index/accountOnboardingStack:AccountOnboardingStack';

    /**
     * Returns true if the given object is an instance of AccountOnboardingStack.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is AccountOnboardingStack {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === AccountOnboardingStack.__pulumiType;
    }

    /**
     * The account IDs
     */
    public readonly accountId!: pulumi.Output<string>;
    /**
     * Audit Log Group Name
     */
    public readonly auditlogGroup!: pulumi.Output<string | undefined>;
    /**
     * Role name to run the account onboarding CFT in each account to be onboarded.
     */
    public readonly cftRoleName!: pulumi.Output<string>;
    /**
     * Cloudwatch Log Group
     */
    public readonly cloudwatchLogGroup!: pulumi.Output<string | undefined>;
    /**
     * Cloudwatch Namespace
     */
    public readonly cloudwatchNamespace!: pulumi.Output<string | undefined>;
    /**
     * The CloudNGFW can decrypt inbound and outbound traffic by providing a
     * 					  certificate stored in secret Manager.
     * 		 			  The role allows the service to access a certificate configured in the rulestack.
     * 		 			  Only certificated tagged with PaloAltoCloudNGFW can be accessed
     */
    public readonly decryptionCert!: pulumi.Output<string | undefined>;
    /**
     * Controls whether cloud NGFW will create firewall endpoints automatitically in customer subnets
     */
    public readonly endpointMode!: pulumi.Output<string | undefined>;
    /**
     * External Id of the onboarded account
     */
    public readonly externalId!: pulumi.Output<string>;
    /**
     * Kinesis Firehose for logging
     */
    public readonly kinesisFirehose!: pulumi.Output<string | undefined>;
    /**
     * Role name to run the account onboarding CFT in each account to be onboarded.
     */
    public readonly onboardingCft!: pulumi.Output<string>;
    /**
     * S3 Bucket Name for Logging. Logging roles provide access to create log contents in this bucket.
     */
    public readonly s3Bucket!: pulumi.Output<string | undefined>;
    /**
     * SNS topic ARN to publish the role ARNs
     */
    public readonly snsTopicArn!: pulumi.Output<string>;
    /**
     * ID of the account onboarding CFT stack
     */
    public readonly stackId!: pulumi.Output<string>;
    /**
     * Status of the account onboarding CFT stack.
     */
    public readonly stackStatus!: pulumi.Output<string>;
    /**
     * PANW Cloud NGFW trusted account Id
     */
    public readonly trustedAccount!: pulumi.Output<string>;

    /**
     * Create a AccountOnboardingStack resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: AccountOnboardingStackArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: AccountOnboardingStackArgs | AccountOnboardingStackState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as AccountOnboardingStackState | undefined;
            resourceInputs["accountId"] = state ? state.accountId : undefined;
            resourceInputs["auditlogGroup"] = state ? state.auditlogGroup : undefined;
            resourceInputs["cftRoleName"] = state ? state.cftRoleName : undefined;
            resourceInputs["cloudwatchLogGroup"] = state ? state.cloudwatchLogGroup : undefined;
            resourceInputs["cloudwatchNamespace"] = state ? state.cloudwatchNamespace : undefined;
            resourceInputs["decryptionCert"] = state ? state.decryptionCert : undefined;
            resourceInputs["endpointMode"] = state ? state.endpointMode : undefined;
            resourceInputs["externalId"] = state ? state.externalId : undefined;
            resourceInputs["kinesisFirehose"] = state ? state.kinesisFirehose : undefined;
            resourceInputs["onboardingCft"] = state ? state.onboardingCft : undefined;
            resourceInputs["s3Bucket"] = state ? state.s3Bucket : undefined;
            resourceInputs["snsTopicArn"] = state ? state.snsTopicArn : undefined;
            resourceInputs["stackId"] = state ? state.stackId : undefined;
            resourceInputs["stackStatus"] = state ? state.stackStatus : undefined;
            resourceInputs["trustedAccount"] = state ? state.trustedAccount : undefined;
        } else {
            const args = argsOrState as AccountOnboardingStackArgs | undefined;
            if ((!args || args.accountId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'accountId'");
            }
            if ((!args || args.cftRoleName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'cftRoleName'");
            }
            if ((!args || args.externalId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'externalId'");
            }
            if ((!args || args.onboardingCft === undefined) && !opts.urn) {
                throw new Error("Missing required property 'onboardingCft'");
            }
            if ((!args || args.snsTopicArn === undefined) && !opts.urn) {
                throw new Error("Missing required property 'snsTopicArn'");
            }
            if ((!args || args.trustedAccount === undefined) && !opts.urn) {
                throw new Error("Missing required property 'trustedAccount'");
            }
            resourceInputs["accountId"] = args ? args.accountId : undefined;
            resourceInputs["auditlogGroup"] = args ? args.auditlogGroup : undefined;
            resourceInputs["cftRoleName"] = args ? args.cftRoleName : undefined;
            resourceInputs["cloudwatchLogGroup"] = args ? args.cloudwatchLogGroup : undefined;
            resourceInputs["cloudwatchNamespace"] = args ? args.cloudwatchNamespace : undefined;
            resourceInputs["decryptionCert"] = args ? args.decryptionCert : undefined;
            resourceInputs["endpointMode"] = args ? args.endpointMode : undefined;
            resourceInputs["externalId"] = args ? args.externalId : undefined;
            resourceInputs["kinesisFirehose"] = args ? args.kinesisFirehose : undefined;
            resourceInputs["onboardingCft"] = args ? args.onboardingCft : undefined;
            resourceInputs["s3Bucket"] = args ? args.s3Bucket : undefined;
            resourceInputs["snsTopicArn"] = args ? args.snsTopicArn : undefined;
            resourceInputs["stackId"] = args ? args.stackId : undefined;
            resourceInputs["stackStatus"] = args ? args.stackStatus : undefined;
            resourceInputs["trustedAccount"] = args ? args.trustedAccount : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(AccountOnboardingStack.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering AccountOnboardingStack resources.
 */
export interface AccountOnboardingStackState {
    /**
     * The account IDs
     */
    accountId?: pulumi.Input<string>;
    /**
     * Audit Log Group Name
     */
    auditlogGroup?: pulumi.Input<string>;
    /**
     * Role name to run the account onboarding CFT in each account to be onboarded.
     */
    cftRoleName?: pulumi.Input<string>;
    /**
     * Cloudwatch Log Group
     */
    cloudwatchLogGroup?: pulumi.Input<string>;
    /**
     * Cloudwatch Namespace
     */
    cloudwatchNamespace?: pulumi.Input<string>;
    /**
     * The CloudNGFW can decrypt inbound and outbound traffic by providing a
     * 					  certificate stored in secret Manager.
     * 		 			  The role allows the service to access a certificate configured in the rulestack.
     * 		 			  Only certificated tagged with PaloAltoCloudNGFW can be accessed
     */
    decryptionCert?: pulumi.Input<string>;
    /**
     * Controls whether cloud NGFW will create firewall endpoints automatitically in customer subnets
     */
    endpointMode?: pulumi.Input<string>;
    /**
     * External Id of the onboarded account
     */
    externalId?: pulumi.Input<string>;
    /**
     * Kinesis Firehose for logging
     */
    kinesisFirehose?: pulumi.Input<string>;
    /**
     * Role name to run the account onboarding CFT in each account to be onboarded.
     */
    onboardingCft?: pulumi.Input<string>;
    /**
     * S3 Bucket Name for Logging. Logging roles provide access to create log contents in this bucket.
     */
    s3Bucket?: pulumi.Input<string>;
    /**
     * SNS topic ARN to publish the role ARNs
     */
    snsTopicArn?: pulumi.Input<string>;
    /**
     * ID of the account onboarding CFT stack
     */
    stackId?: pulumi.Input<string>;
    /**
     * Status of the account onboarding CFT stack.
     */
    stackStatus?: pulumi.Input<string>;
    /**
     * PANW Cloud NGFW trusted account Id
     */
    trustedAccount?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a AccountOnboardingStack resource.
 */
export interface AccountOnboardingStackArgs {
    /**
     * The account IDs
     */
    accountId: pulumi.Input<string>;
    /**
     * Audit Log Group Name
     */
    auditlogGroup?: pulumi.Input<string>;
    /**
     * Role name to run the account onboarding CFT in each account to be onboarded.
     */
    cftRoleName: pulumi.Input<string>;
    /**
     * Cloudwatch Log Group
     */
    cloudwatchLogGroup?: pulumi.Input<string>;
    /**
     * Cloudwatch Namespace
     */
    cloudwatchNamespace?: pulumi.Input<string>;
    /**
     * The CloudNGFW can decrypt inbound and outbound traffic by providing a
     * 					  certificate stored in secret Manager.
     * 		 			  The role allows the service to access a certificate configured in the rulestack.
     * 		 			  Only certificated tagged with PaloAltoCloudNGFW can be accessed
     */
    decryptionCert?: pulumi.Input<string>;
    /**
     * Controls whether cloud NGFW will create firewall endpoints automatitically in customer subnets
     */
    endpointMode?: pulumi.Input<string>;
    /**
     * External Id of the onboarded account
     */
    externalId: pulumi.Input<string>;
    /**
     * Kinesis Firehose for logging
     */
    kinesisFirehose?: pulumi.Input<string>;
    /**
     * Role name to run the account onboarding CFT in each account to be onboarded.
     */
    onboardingCft: pulumi.Input<string>;
    /**
     * S3 Bucket Name for Logging. Logging roles provide access to create log contents in this bucket.
     */
    s3Bucket?: pulumi.Input<string>;
    /**
     * SNS topic ARN to publish the role ARNs
     */
    snsTopicArn: pulumi.Input<string>;
    /**
     * ID of the account onboarding CFT stack
     */
    stackId?: pulumi.Input<string>;
    /**
     * Status of the account onboarding CFT stack.
     */
    stackStatus?: pulumi.Input<string>;
    /**
     * PANW Cloud NGFW trusted account Id
     */
    trustedAccount: pulumi.Input<string>;
}
