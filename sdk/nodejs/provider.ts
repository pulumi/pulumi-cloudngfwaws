// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * The provider type for the cloudngfwaws package. By default, resources use package-wide configuration
 * settings, however an explicit `Provider` instance may be created and passed during resource
 * construction to achieve fine-grained programmatic control over provider settings. See the
 * [documentation](https://www.pulumi.com/docs/reference/programming-model/#providers) for more information.
 */
export class Provider extends pulumi.ProviderResource {
    /** @internal */
    public static readonly __pulumiType = 'cloudngfwaws';

    /**
     * Returns true if the given object is an instance of Provider.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Provider {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === "pulumi:providers:" + Provider.__pulumiType;
    }

    /**
     * (Used for the initial `sts assume role`) AWS access key. Environment variable: `CLOUDNGFWAWS_ACCESS_KEY`. JSON conf file variable: `access-key`.
     */
    declare public readonly accessKey: pulumi.Output<string | undefined>;
    /**
     * The ARN allowing account admin permissions. Environment variable: `CLOUDNGFWAWS_ACCT_ADMIN_ARN`. JSON conf file variable: `account-admin-arn`.
     */
    declare public readonly accountAdminArn: pulumi.Output<string | undefined>;
    /**
     * The ARN allowing firewall, rulestack, and global rulestack admin permissions. Global rulestack admin permissions can be enabled only if the AWS account is onboarded by AWS Firewall Manager. Use 'lfa_arn' and 'lra_arn' if you want to enable only firewall and rulestack admin permissions. Environment variable: `CLOUDNGFWAWS_ARN`. JSON conf file variable: `arn`.
     */
    declare public readonly arn: pulumi.Output<string | undefined>;
    /**
     * The ARN allowing global rulestack admin permissions. Global rulestack admin permissions can be enabled only if the AWS account is onboarded by AWS Firewall Manager. 'gra_arn' is preferentially used over the `arn` param if both are specified. Environment variable: `CLOUDNGFWAWS_GRA_ARN`. JSON conf file variable: `gra-arn`.
     */
    declare public readonly graArn: pulumi.Output<string | undefined>;
    /**
     * The hostname of the API (default: `api.us-east-1.aws.cloudngfw.paloaltonetworks.com`). Environment variable: `CLOUDNGFWAWS_HOST`. JSON conf file variable: `host`.
     */
    declare public readonly host: pulumi.Output<string | undefined>;
    /**
     * Retrieve provider configuration from this JSON file.
     */
    declare public readonly jsonConfigFile: pulumi.Output<string | undefined>;
    /**
     * The ARN allowing firewall admin permissions. This is preferentially used over the `arn` param if both are specified. Environment variable: `CLOUDNGFWAWS_LFA_ARN`. JSON conf file variable: `lfa-arn`.
     */
    declare public readonly lfaArn: pulumi.Output<string | undefined>;
    /**
     * The ARN allowing rulestack admin permissions. This is preferentially used over the `arn` param if both are specified. Environment variable: `CLOUDNGFWAWS_LRA_ARN`. JSON conf file variable: `lra-arn`.
     */
    declare public readonly lraArn: pulumi.Output<string | undefined>;
    /**
     * AWS management plane region. Environment variable: `CLOUDNGFWAWS_MP_REGION`. JSON conf file variable: `mpRegion`.
     */
    declare public readonly mpRegion: pulumi.Output<string | undefined>;
    /**
     * AWS management plane MP region host Environment variable: `CLOUDNGFWAWS_MP_REGION_HOST`. JSON conf file variable: `mpRegionHost`.
     */
    declare public readonly mpRegionHost: pulumi.Output<string | undefined>;
    /**
     * (Used for the initial `sts assume role`) AWS PROFILE. Environment variable: `CLOUDNGFWAWS_PROFILE`. JSON conf file variable: `profile`.
     */
    declare public readonly profile: pulumi.Output<string | undefined>;
    /**
     * The protocol (defaults to `https`). Environment variable: `CLOUDNGFWAWS_PROTOCOL`. JSON conf file variable: `protocol`. Valid values are `https` or `http`.
     */
    declare public readonly protocol: pulumi.Output<string | undefined>;
    /**
     * AWS region. Environment variable: `CLOUDNGFWAWS_REGION`. JSON conf file variable: `region`.
     */
    declare public readonly region: pulumi.Output<string | undefined>;
    /**
     * (Used for the initial `sts assume role`) AWS secret key. Environment variable: `CLOUDNGFWAWS_SECRET_KEY`. JSON conf file variable: `secret-key`.
     */
    declare public readonly secretKey: pulumi.Output<string | undefined>;
    /**
     * The hostname of the V2 API (default: `api.us-east-1.aws.cloudngfw.paloaltonetworks.com`). Environment variable: `CLOUDNGFWAWS_V2_HOST`. JSON conf file variable: `v2Host`.
     */
    declare public readonly v2Host: pulumi.Output<string | undefined>;

    /**
     * Create a Provider resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: ProviderArgs, opts?: pulumi.ResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        {
            resourceInputs["accessKey"] = args?.accessKey;
            resourceInputs["accountAdminArn"] = args?.accountAdminArn;
            resourceInputs["arn"] = args?.arn;
            resourceInputs["graArn"] = args?.graArn;
            resourceInputs["headers"] = pulumi.output(args?.headers).apply(JSON.stringify);
            resourceInputs["host"] = args?.host;
            resourceInputs["jsonConfigFile"] = args?.jsonConfigFile;
            resourceInputs["lfaArn"] = args?.lfaArn;
            resourceInputs["loggings"] = pulumi.output(args?.loggings).apply(JSON.stringify);
            resourceInputs["lraArn"] = args?.lraArn;
            resourceInputs["mpRegion"] = args?.mpRegion;
            resourceInputs["mpRegionHost"] = args?.mpRegionHost;
            resourceInputs["profile"] = args?.profile;
            resourceInputs["protocol"] = args?.protocol;
            resourceInputs["region"] = args?.region;
            resourceInputs["secretKey"] = args?.secretKey;
            resourceInputs["skipVerifyCertificate"] = pulumi.output(args?.skipVerifyCertificate).apply(JSON.stringify);
            resourceInputs["syncMode"] = pulumi.output(args?.syncMode).apply(JSON.stringify);
            resourceInputs["timeout"] = pulumi.output(args?.timeout).apply(JSON.stringify);
            resourceInputs["v2Host"] = args?.v2Host;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Provider.__pulumiType, name, resourceInputs, opts);
    }

    /**
     * This function returns a Terraform config object with terraform-namecased keys,to be used with the Terraform Module Provider.
     */
    terraformConfig(): pulumi.Output<Provider.TerraformConfigResult> {
        return pulumi.runtime.call("pulumi:providers:cloudngfwaws/terraformConfig", {
            "__self__": this,
        }, this);
    }
}

/**
 * The set of arguments for constructing a Provider resource.
 */
export interface ProviderArgs {
    /**
     * (Used for the initial `sts assume role`) AWS access key. Environment variable: `CLOUDNGFWAWS_ACCESS_KEY`. JSON conf file variable: `access-key`.
     */
    accessKey?: pulumi.Input<string>;
    /**
     * The ARN allowing account admin permissions. Environment variable: `CLOUDNGFWAWS_ACCT_ADMIN_ARN`. JSON conf file variable: `account-admin-arn`.
     */
    accountAdminArn?: pulumi.Input<string>;
    /**
     * The ARN allowing firewall, rulestack, and global rulestack admin permissions. Global rulestack admin permissions can be enabled only if the AWS account is onboarded by AWS Firewall Manager. Use 'lfa_arn' and 'lra_arn' if you want to enable only firewall and rulestack admin permissions. Environment variable: `CLOUDNGFWAWS_ARN`. JSON conf file variable: `arn`.
     */
    arn?: pulumi.Input<string>;
    /**
     * The ARN allowing global rulestack admin permissions. Global rulestack admin permissions can be enabled only if the AWS account is onboarded by AWS Firewall Manager. 'gra_arn' is preferentially used over the `arn` param if both are specified. Environment variable: `CLOUDNGFWAWS_GRA_ARN`. JSON conf file variable: `gra-arn`.
     */
    graArn?: pulumi.Input<string>;
    /**
     * Additional HTTP headers to send with API calls. Environment variable: `CLOUDNGFWAWS_HEADERS`. JSON conf file variable: `headers`.
     */
    headers?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The hostname of the API (default: `api.us-east-1.aws.cloudngfw.paloaltonetworks.com`). Environment variable: `CLOUDNGFWAWS_HOST`. JSON conf file variable: `host`.
     */
    host?: pulumi.Input<string>;
    /**
     * Retrieve provider configuration from this JSON file.
     */
    jsonConfigFile?: pulumi.Input<string>;
    /**
     * The ARN allowing firewall admin permissions. This is preferentially used over the `arn` param if both are specified. Environment variable: `CLOUDNGFWAWS_LFA_ARN`. JSON conf file variable: `lfa-arn`.
     */
    lfaArn?: pulumi.Input<string>;
    /**
     * The logging options for the provider. Environment variable: `CLOUDNGFWAWS_LOGGING`. JSON conf file variable: `logging`.
     */
    loggings?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The ARN allowing rulestack admin permissions. This is preferentially used over the `arn` param if both are specified. Environment variable: `CLOUDNGFWAWS_LRA_ARN`. JSON conf file variable: `lra-arn`.
     */
    lraArn?: pulumi.Input<string>;
    /**
     * AWS management plane region. Environment variable: `CLOUDNGFWAWS_MP_REGION`. JSON conf file variable: `mpRegion`.
     */
    mpRegion?: pulumi.Input<string>;
    /**
     * AWS management plane MP region host Environment variable: `CLOUDNGFWAWS_MP_REGION_HOST`. JSON conf file variable: `mpRegionHost`.
     */
    mpRegionHost?: pulumi.Input<string>;
    /**
     * (Used for the initial `sts assume role`) AWS PROFILE. Environment variable: `CLOUDNGFWAWS_PROFILE`. JSON conf file variable: `profile`.
     */
    profile?: pulumi.Input<string>;
    /**
     * The protocol (defaults to `https`). Environment variable: `CLOUDNGFWAWS_PROTOCOL`. JSON conf file variable: `protocol`. Valid values are `https` or `http`.
     */
    protocol?: pulumi.Input<string>;
    /**
     * AWS region. Environment variable: `CLOUDNGFWAWS_REGION`. JSON conf file variable: `region`.
     */
    region?: pulumi.Input<string>;
    /**
     * (Used for the initial `sts assume role`) AWS secret key. Environment variable: `CLOUDNGFWAWS_SECRET_KEY`. JSON conf file variable: `secret-key`.
     */
    secretKey?: pulumi.Input<string>;
    /**
     * Skip verifying the SSL certificate. Environment variable: `CLOUDNGFWAWS_SKIP_VERIFY_CERTIFICATE`. JSON conf file variable: `skip-verify-certificate`.
     */
    skipVerifyCertificate?: pulumi.Input<boolean>;
    /**
     * Enable synchronous mode while creating resources Environment variable: `CLOUDNGFWAWS_SYNC_MODE`. JSON conf file variable: `syncMode`.
     */
    syncMode?: pulumi.Input<boolean>;
    /**
     * The timeout for any single API call (default: `30`). Environment variable: `CLOUDNGFWAWS_TIMEOUT`. JSON conf file variable: `timeout`.
     */
    timeout?: pulumi.Input<number>;
    /**
     * The hostname of the V2 API (default: `api.us-east-1.aws.cloudngfw.paloaltonetworks.com`). Environment variable: `CLOUDNGFWAWS_V2_HOST`. JSON conf file variable: `v2Host`.
     */
    v2Host?: pulumi.Input<string>;
}

export namespace Provider {
    /**
     * The results of the Provider.terraformConfig method.
     */
    export interface TerraformConfigResult {
        readonly result: {[key: string]: any};
    }

}
