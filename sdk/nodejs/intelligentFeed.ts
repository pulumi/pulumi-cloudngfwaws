// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * Resource for intelligent feed manipulation.
 *
 * ## Admin Permission Type
 *
 * * `Rulestack` (for `scope="Local"`)
 * * `Global Rulestack` (for `scope="Global"`)
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as cloudngfwaws from "@pulumi/cloudngfwaws";
 *
 * const r = new cloudngfwaws.Rulestack("r", {
 *     name: "terraform-rulestack",
 *     scope: "Local",
 *     accountId: "123456789",
 *     description: "Made by Pulumi",
 *     profileConfig: {
 *         antiSpyware: "BestPractice",
 *     },
 * });
 * // Retrieve the feed information every day at midnight.
 * const example = new cloudngfwaws.IntelligentFeed("example", {
 *     rulestack: r.name,
 *     name: "tf-feed",
 *     description: "Also configured by Terraform",
 *     url: "https://foobar.net",
 *     type: "URL_LIST",
 *     frequency: "DAILY",
 *     time: 0,
 * });
 * ```
 *
 * ## Import
 *
 * import name is <scope>:<rulestack>:<intelligent_feed_name>
 *
 * ```sh
 * $ pulumi import cloudngfwaws:index/intelligentFeed:IntelligentFeed example Local:terraform-rulestack:tf-feed
 * ```
 */
export class IntelligentFeed extends pulumi.CustomResource {
    /**
     * Get an existing IntelligentFeed resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: IntelligentFeedState, opts?: pulumi.CustomResourceOptions): IntelligentFeed {
        return new IntelligentFeed(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'cloudngfwaws:index/intelligentFeed:IntelligentFeed';

    /**
     * Returns true if the given object is an instance of IntelligentFeed.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is IntelligentFeed {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === IntelligentFeed.__pulumiType;
    }

    /**
     * The audit comment.
     */
    declare public readonly auditComment: pulumi.Output<string | undefined>;
    /**
     * The certificate profile.
     */
    declare public readonly certificate: pulumi.Output<string | undefined>;
    /**
     * The description.
     */
    declare public readonly description: pulumi.Output<string | undefined>;
    /**
     * Update frequency. Valid values are `HOURLY` or `DAILY`. Defaults to `HOURLY`.
     */
    declare public readonly frequency: pulumi.Output<string | undefined>;
    /**
     * The name.
     */
    declare public readonly name: pulumi.Output<string>;
    /**
     * The rulestack.
     */
    declare public readonly rulestack: pulumi.Output<string>;
    /**
     * The rulestack's scope. A local rulestack will require that you've retrieved a LRA JWT. A global rulestack will require that you've retrieved a GRA JWT. Valid values are `Local` or `Global`. Defaults to `Local`.
     */
    declare public readonly scope: pulumi.Output<string | undefined>;
    /**
     * The time to poll for updates if frequency is daily. The number must be between [0, 23] incluside.
     */
    declare public readonly time: pulumi.Output<number | undefined>;
    /**
     * The intelligent feed type. Valid values are `IP_LIST` or `URL_LIST`. Defaults to `IP_LIST`.
     */
    declare public readonly type: pulumi.Output<string | undefined>;
    /**
     * The update token.
     */
    declare public /*out*/ readonly updateToken: pulumi.Output<string>;
    /**
     * The intelligent feed source.
     */
    declare public readonly url: pulumi.Output<string>;

    /**
     * Create a IntelligentFeed resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: IntelligentFeedArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: IntelligentFeedArgs | IntelligentFeedState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as IntelligentFeedState | undefined;
            resourceInputs["auditComment"] = state?.auditComment;
            resourceInputs["certificate"] = state?.certificate;
            resourceInputs["description"] = state?.description;
            resourceInputs["frequency"] = state?.frequency;
            resourceInputs["name"] = state?.name;
            resourceInputs["rulestack"] = state?.rulestack;
            resourceInputs["scope"] = state?.scope;
            resourceInputs["time"] = state?.time;
            resourceInputs["type"] = state?.type;
            resourceInputs["updateToken"] = state?.updateToken;
            resourceInputs["url"] = state?.url;
        } else {
            const args = argsOrState as IntelligentFeedArgs | undefined;
            if (args?.rulestack === undefined && !opts.urn) {
                throw new Error("Missing required property 'rulestack'");
            }
            if (args?.url === undefined && !opts.urn) {
                throw new Error("Missing required property 'url'");
            }
            resourceInputs["auditComment"] = args?.auditComment;
            resourceInputs["certificate"] = args?.certificate;
            resourceInputs["description"] = args?.description;
            resourceInputs["frequency"] = args?.frequency;
            resourceInputs["name"] = args?.name;
            resourceInputs["rulestack"] = args?.rulestack;
            resourceInputs["scope"] = args?.scope;
            resourceInputs["time"] = args?.time;
            resourceInputs["type"] = args?.type;
            resourceInputs["url"] = args?.url;
            resourceInputs["updateToken"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(IntelligentFeed.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering IntelligentFeed resources.
 */
export interface IntelligentFeedState {
    /**
     * The audit comment.
     */
    auditComment?: pulumi.Input<string>;
    /**
     * The certificate profile.
     */
    certificate?: pulumi.Input<string>;
    /**
     * The description.
     */
    description?: pulumi.Input<string>;
    /**
     * Update frequency. Valid values are `HOURLY` or `DAILY`. Defaults to `HOURLY`.
     */
    frequency?: pulumi.Input<string>;
    /**
     * The name.
     */
    name?: pulumi.Input<string>;
    /**
     * The rulestack.
     */
    rulestack?: pulumi.Input<string>;
    /**
     * The rulestack's scope. A local rulestack will require that you've retrieved a LRA JWT. A global rulestack will require that you've retrieved a GRA JWT. Valid values are `Local` or `Global`. Defaults to `Local`.
     */
    scope?: pulumi.Input<string>;
    /**
     * The time to poll for updates if frequency is daily. The number must be between [0, 23] incluside.
     */
    time?: pulumi.Input<number>;
    /**
     * The intelligent feed type. Valid values are `IP_LIST` or `URL_LIST`. Defaults to `IP_LIST`.
     */
    type?: pulumi.Input<string>;
    /**
     * The update token.
     */
    updateToken?: pulumi.Input<string>;
    /**
     * The intelligent feed source.
     */
    url?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a IntelligentFeed resource.
 */
export interface IntelligentFeedArgs {
    /**
     * The audit comment.
     */
    auditComment?: pulumi.Input<string>;
    /**
     * The certificate profile.
     */
    certificate?: pulumi.Input<string>;
    /**
     * The description.
     */
    description?: pulumi.Input<string>;
    /**
     * Update frequency. Valid values are `HOURLY` or `DAILY`. Defaults to `HOURLY`.
     */
    frequency?: pulumi.Input<string>;
    /**
     * The name.
     */
    name?: pulumi.Input<string>;
    /**
     * The rulestack.
     */
    rulestack: pulumi.Input<string>;
    /**
     * The rulestack's scope. A local rulestack will require that you've retrieved a LRA JWT. A global rulestack will require that you've retrieved a GRA JWT. Valid values are `Local` or `Global`. Defaults to `Local`.
     */
    scope?: pulumi.Input<string>;
    /**
     * The time to poll for updates if frequency is daily. The number must be between [0, 23] incluside.
     */
    time?: pulumi.Input<number>;
    /**
     * The intelligent feed type. Valid values are `IP_LIST` or `URL_LIST`. Defaults to `IP_LIST`.
     */
    type?: pulumi.Input<string>;
    /**
     * The intelligent feed source.
     */
    url: pulumi.Input<string>;
}
