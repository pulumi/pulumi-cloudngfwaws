// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * Resource for security rule manipulation.
 *
 * ## Admin Permission Type
 *
 * * `Rulestack` (for `scope="Local"`)
 * * `Global Rulestack` (for `scope="Global"`)
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as cloudngfwaws from "@pulumi/cloudngfwaws";
 *
 * const r = new cloudngfwaws.Rulestack("r", {
 *     name: "terraform-rulestack",
 *     scope: "Local",
 *     accountId: "123456789",
 *     description: "Made by Pulumi",
 *     profileConfig: {
 *         antiSpyware: "BestPractice",
 *     },
 * });
 * const example = new cloudngfwaws.SecurityRule("example", {
 *     rulestack: r.name,
 *     ruleList: "LocalRule",
 *     priority: 3,
 *     name: "tf-security-rule",
 *     description: "Also configured by Terraform",
 *     source: {
 *         cidrs: ["any"],
 *     },
 *     destination: {
 *         cidrs: ["192.168.0.0/16"],
 *     },
 *     negateDestination: true,
 *     applications: ["any"],
 *     category: {},
 *     action: "Allow",
 *     logging: true,
 *     auditComment: "initial config",
 * });
 * ```
 *
 * ## Import
 *
 * import name is <scope>:<rulestack>:<rule_list>:<priority>
 *
 * ```sh
 * $ pulumi import cloudngfwaws:index/securityRule:SecurityRule example Local:terraform-rulestack:LocalRule:3
 * ```
 */
export class SecurityRule extends pulumi.CustomResource {
    /**
     * Get an existing SecurityRule resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SecurityRuleState, opts?: pulumi.CustomResourceOptions): SecurityRule {
        return new SecurityRule(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'cloudngfwaws:index/securityRule:SecurityRule';

    /**
     * Returns true if the given object is an instance of SecurityRule.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is SecurityRule {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SecurityRule.__pulumiType;
    }

    /**
     * The action to take. Valid values are `Allow`, `DenySilent`, `DenyResetServer`, or `DenyResetBoth`.
     */
    public readonly action!: pulumi.Output<string>;
    /**
     * The list of applications.
     */
    public readonly applications!: pulumi.Output<string[]>;
    /**
     * The audit comment.
     */
    public readonly auditComment!: pulumi.Output<string | undefined>;
    /**
     * The category spec.
     */
    public readonly category!: pulumi.Output<outputs.SecurityRuleCategory>;
    /**
     * Decryption rule type. Valid values are ``or`SSLOutboundInspection`.
     */
    public readonly decryptionRuleType!: pulumi.Output<string | undefined>;
    /**
     * The description.
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * The destination spec.
     */
    public readonly destination!: pulumi.Output<outputs.SecurityRuleDestination>;
    /**
     * Set to false to disable this rule. Defaults to `true`.
     */
    public readonly enabled!: pulumi.Output<boolean | undefined>;
    /**
     * Enable logging at end. Defaults to `true`.
     */
    public readonly logging!: pulumi.Output<boolean | undefined>;
    /**
     * The name.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Negate the destination definition.
     */
    public readonly negateDestination!: pulumi.Output<boolean | undefined>;
    /**
     * Negate the source definition.
     */
    public readonly negateSource!: pulumi.Output<boolean | undefined>;
    /**
     * The rule priority.
     */
    public readonly priority!: pulumi.Output<number>;
    /**
     * Protocol port list.
     */
    public readonly protPortLists!: pulumi.Output<string[] | undefined>;
    /**
     * The protocol.
     */
    public readonly protocol!: pulumi.Output<string | undefined>;
    /**
     * The rulebase. Valid values are `PreRule`, `PostRule`, or `LocalRule`. Defaults to `PreRule`.
     */
    public readonly ruleList!: pulumi.Output<string | undefined>;
    /**
     * The rulestack.
     */
    public readonly rulestack!: pulumi.Output<string>;
    /**
     * The rulestack's scope. A local rulestack will require that you've retrieved a LRA JWT. A global rulestack will require that you've retrieved a GRA JWT. Valid values are `Local` or `Global`. Defaults to `Local`.
     */
    public readonly scope!: pulumi.Output<string | undefined>;
    /**
     * The source spec.
     */
    public readonly source!: pulumi.Output<outputs.SecurityRuleSource>;
    /**
     * The tags.
     */
    public readonly tags!: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * The update token.
     */
    public /*out*/ readonly updateToken!: pulumi.Output<string>;

    /**
     * Create a SecurityRule resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: SecurityRuleArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SecurityRuleArgs | SecurityRuleState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SecurityRuleState | undefined;
            resourceInputs["action"] = state ? state.action : undefined;
            resourceInputs["applications"] = state ? state.applications : undefined;
            resourceInputs["auditComment"] = state ? state.auditComment : undefined;
            resourceInputs["category"] = state ? state.category : undefined;
            resourceInputs["decryptionRuleType"] = state ? state.decryptionRuleType : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["destination"] = state ? state.destination : undefined;
            resourceInputs["enabled"] = state ? state.enabled : undefined;
            resourceInputs["logging"] = state ? state.logging : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["negateDestination"] = state ? state.negateDestination : undefined;
            resourceInputs["negateSource"] = state ? state.negateSource : undefined;
            resourceInputs["priority"] = state ? state.priority : undefined;
            resourceInputs["protPortLists"] = state ? state.protPortLists : undefined;
            resourceInputs["protocol"] = state ? state.protocol : undefined;
            resourceInputs["ruleList"] = state ? state.ruleList : undefined;
            resourceInputs["rulestack"] = state ? state.rulestack : undefined;
            resourceInputs["scope"] = state ? state.scope : undefined;
            resourceInputs["source"] = state ? state.source : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["updateToken"] = state ? state.updateToken : undefined;
        } else {
            const args = argsOrState as SecurityRuleArgs | undefined;
            if ((!args || args.action === undefined) && !opts.urn) {
                throw new Error("Missing required property 'action'");
            }
            if ((!args || args.applications === undefined) && !opts.urn) {
                throw new Error("Missing required property 'applications'");
            }
            if ((!args || args.category === undefined) && !opts.urn) {
                throw new Error("Missing required property 'category'");
            }
            if ((!args || args.destination === undefined) && !opts.urn) {
                throw new Error("Missing required property 'destination'");
            }
            if ((!args || args.priority === undefined) && !opts.urn) {
                throw new Error("Missing required property 'priority'");
            }
            if ((!args || args.rulestack === undefined) && !opts.urn) {
                throw new Error("Missing required property 'rulestack'");
            }
            if ((!args || args.source === undefined) && !opts.urn) {
                throw new Error("Missing required property 'source'");
            }
            resourceInputs["action"] = args ? args.action : undefined;
            resourceInputs["applications"] = args ? args.applications : undefined;
            resourceInputs["auditComment"] = args ? args.auditComment : undefined;
            resourceInputs["category"] = args ? args.category : undefined;
            resourceInputs["decryptionRuleType"] = args ? args.decryptionRuleType : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["destination"] = args ? args.destination : undefined;
            resourceInputs["enabled"] = args ? args.enabled : undefined;
            resourceInputs["logging"] = args ? args.logging : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["negateDestination"] = args ? args.negateDestination : undefined;
            resourceInputs["negateSource"] = args ? args.negateSource : undefined;
            resourceInputs["priority"] = args ? args.priority : undefined;
            resourceInputs["protPortLists"] = args ? args.protPortLists : undefined;
            resourceInputs["protocol"] = args ? args.protocol : undefined;
            resourceInputs["ruleList"] = args ? args.ruleList : undefined;
            resourceInputs["rulestack"] = args ? args.rulestack : undefined;
            resourceInputs["scope"] = args ? args.scope : undefined;
            resourceInputs["source"] = args ? args.source : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["updateToken"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(SecurityRule.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering SecurityRule resources.
 */
export interface SecurityRuleState {
    /**
     * The action to take. Valid values are `Allow`, `DenySilent`, `DenyResetServer`, or `DenyResetBoth`.
     */
    action?: pulumi.Input<string>;
    /**
     * The list of applications.
     */
    applications?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The audit comment.
     */
    auditComment?: pulumi.Input<string>;
    /**
     * The category spec.
     */
    category?: pulumi.Input<inputs.SecurityRuleCategory>;
    /**
     * Decryption rule type. Valid values are ``or`SSLOutboundInspection`.
     */
    decryptionRuleType?: pulumi.Input<string>;
    /**
     * The description.
     */
    description?: pulumi.Input<string>;
    /**
     * The destination spec.
     */
    destination?: pulumi.Input<inputs.SecurityRuleDestination>;
    /**
     * Set to false to disable this rule. Defaults to `true`.
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * Enable logging at end. Defaults to `true`.
     */
    logging?: pulumi.Input<boolean>;
    /**
     * The name.
     */
    name?: pulumi.Input<string>;
    /**
     * Negate the destination definition.
     */
    negateDestination?: pulumi.Input<boolean>;
    /**
     * Negate the source definition.
     */
    negateSource?: pulumi.Input<boolean>;
    /**
     * The rule priority.
     */
    priority?: pulumi.Input<number>;
    /**
     * Protocol port list.
     */
    protPortLists?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The protocol.
     */
    protocol?: pulumi.Input<string>;
    /**
     * The rulebase. Valid values are `PreRule`, `PostRule`, or `LocalRule`. Defaults to `PreRule`.
     */
    ruleList?: pulumi.Input<string>;
    /**
     * The rulestack.
     */
    rulestack?: pulumi.Input<string>;
    /**
     * The rulestack's scope. A local rulestack will require that you've retrieved a LRA JWT. A global rulestack will require that you've retrieved a GRA JWT. Valid values are `Local` or `Global`. Defaults to `Local`.
     */
    scope?: pulumi.Input<string>;
    /**
     * The source spec.
     */
    source?: pulumi.Input<inputs.SecurityRuleSource>;
    /**
     * The tags.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The update token.
     */
    updateToken?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a SecurityRule resource.
 */
export interface SecurityRuleArgs {
    /**
     * The action to take. Valid values are `Allow`, `DenySilent`, `DenyResetServer`, or `DenyResetBoth`.
     */
    action: pulumi.Input<string>;
    /**
     * The list of applications.
     */
    applications: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The audit comment.
     */
    auditComment?: pulumi.Input<string>;
    /**
     * The category spec.
     */
    category: pulumi.Input<inputs.SecurityRuleCategory>;
    /**
     * Decryption rule type. Valid values are ``or`SSLOutboundInspection`.
     */
    decryptionRuleType?: pulumi.Input<string>;
    /**
     * The description.
     */
    description?: pulumi.Input<string>;
    /**
     * The destination spec.
     */
    destination: pulumi.Input<inputs.SecurityRuleDestination>;
    /**
     * Set to false to disable this rule. Defaults to `true`.
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * Enable logging at end. Defaults to `true`.
     */
    logging?: pulumi.Input<boolean>;
    /**
     * The name.
     */
    name?: pulumi.Input<string>;
    /**
     * Negate the destination definition.
     */
    negateDestination?: pulumi.Input<boolean>;
    /**
     * Negate the source definition.
     */
    negateSource?: pulumi.Input<boolean>;
    /**
     * The rule priority.
     */
    priority: pulumi.Input<number>;
    /**
     * Protocol port list.
     */
    protPortLists?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The protocol.
     */
    protocol?: pulumi.Input<string>;
    /**
     * The rulebase. Valid values are `PreRule`, `PostRule`, or `LocalRule`. Defaults to `PreRule`.
     */
    ruleList?: pulumi.Input<string>;
    /**
     * The rulestack.
     */
    rulestack: pulumi.Input<string>;
    /**
     * The rulestack's scope. A local rulestack will require that you've retrieved a LRA JWT. A global rulestack will require that you've retrieved a GRA JWT. Valid values are `Local` or `Global`. Defaults to `Local`.
     */
    scope?: pulumi.Input<string>;
    /**
     * The source spec.
     */
    source: pulumi.Input<inputs.SecurityRuleSource>;
    /**
     * The tags.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}
