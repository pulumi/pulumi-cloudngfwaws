// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.cloudngfwaws.inputs;

import com.pulumi.cloudngfwaws.inputs.NgfwEndpointPrefixArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class NgfwEndpointArgs extends com.pulumi.resources.ResourceArgs {

    public static final NgfwEndpointArgs Empty = new NgfwEndpointArgs();

    /**
     * The account id.
     * 
     */
    @Import(name="accountId")
    private @Nullable Output<String> accountId;

    /**
     * @return The account id.
     * 
     */
    public Optional<Output<String>> accountId() {
        return Optional.ofNullable(this.accountId);
    }

    /**
     * Enable egress NAT
     * 
     */
    @Import(name="egressNatEnabled")
    private @Nullable Output<Boolean> egressNatEnabled;

    /**
     * @return Enable egress NAT
     * 
     */
    public Optional<Output<Boolean>> egressNatEnabled() {
        return Optional.ofNullable(this.egressNatEnabled);
    }

    /**
     * Endpoint ID of the security zone
     * 
     */
    @Import(name="endpointId")
    private @Nullable Output<String> endpointId;

    /**
     * @return Endpoint ID of the security zone
     * 
     */
    public Optional<Output<String>> endpointId() {
        return Optional.ofNullable(this.endpointId);
    }

    /**
     * The endpoint mode. Valid values are `ServiceManaged` or `CustomerManaged`.
     * 
     */
    @Import(name="mode", required=true)
    private Output<String> mode;

    /**
     * @return The endpoint mode. Valid values are `ServiceManaged` or `CustomerManaged`.
     * 
     */
    public Output<String> mode() {
        return this.mode;
    }

    @Import(name="prefixes")
    private @Nullable Output<List<NgfwEndpointPrefixArgs>> prefixes;

    public Optional<Output<List<NgfwEndpointPrefixArgs>>> prefixes() {
        return Optional.ofNullable(this.prefixes);
    }

    /**
     * The rejected reason.
     * 
     */
    @Import(name="rejectedReason")
    private @Nullable Output<String> rejectedReason;

    /**
     * @return The rejected reason.
     * 
     */
    public Optional<Output<String>> rejectedReason() {
        return Optional.ofNullable(this.rejectedReason);
    }

    /**
     * The attachment status.
     * 
     */
    @Import(name="status")
    private @Nullable Output<String> status;

    /**
     * @return The attachment status.
     * 
     */
    public Optional<Output<String>> status() {
        return Optional.ofNullable(this.status);
    }

    /**
     * The subnet id.
     * 
     */
    @Import(name="subnetId")
    private @Nullable Output<String> subnetId;

    /**
     * @return The subnet id.
     * 
     */
    public Optional<Output<String>> subnetId() {
        return Optional.ofNullable(this.subnetId);
    }

    /**
     * The vpc id.
     * 
     */
    @Import(name="vpcId")
    private @Nullable Output<String> vpcId;

    /**
     * @return The vpc id.
     * 
     */
    public Optional<Output<String>> vpcId() {
        return Optional.ofNullable(this.vpcId);
    }

    /**
     * The AZ id.
     * 
     */
    @Import(name="zoneId")
    private @Nullable Output<String> zoneId;

    /**
     * @return The AZ id.
     * 
     */
    public Optional<Output<String>> zoneId() {
        return Optional.ofNullable(this.zoneId);
    }

    private NgfwEndpointArgs() {}

    private NgfwEndpointArgs(NgfwEndpointArgs $) {
        this.accountId = $.accountId;
        this.egressNatEnabled = $.egressNatEnabled;
        this.endpointId = $.endpointId;
        this.mode = $.mode;
        this.prefixes = $.prefixes;
        this.rejectedReason = $.rejectedReason;
        this.status = $.status;
        this.subnetId = $.subnetId;
        this.vpcId = $.vpcId;
        this.zoneId = $.zoneId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(NgfwEndpointArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private NgfwEndpointArgs $;

        public Builder() {
            $ = new NgfwEndpointArgs();
        }

        public Builder(NgfwEndpointArgs defaults) {
            $ = new NgfwEndpointArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param accountId The account id.
         * 
         * @return builder
         * 
         */
        public Builder accountId(@Nullable Output<String> accountId) {
            $.accountId = accountId;
            return this;
        }

        /**
         * @param accountId The account id.
         * 
         * @return builder
         * 
         */
        public Builder accountId(String accountId) {
            return accountId(Output.of(accountId));
        }

        /**
         * @param egressNatEnabled Enable egress NAT
         * 
         * @return builder
         * 
         */
        public Builder egressNatEnabled(@Nullable Output<Boolean> egressNatEnabled) {
            $.egressNatEnabled = egressNatEnabled;
            return this;
        }

        /**
         * @param egressNatEnabled Enable egress NAT
         * 
         * @return builder
         * 
         */
        public Builder egressNatEnabled(Boolean egressNatEnabled) {
            return egressNatEnabled(Output.of(egressNatEnabled));
        }

        /**
         * @param endpointId Endpoint ID of the security zone
         * 
         * @return builder
         * 
         */
        public Builder endpointId(@Nullable Output<String> endpointId) {
            $.endpointId = endpointId;
            return this;
        }

        /**
         * @param endpointId Endpoint ID of the security zone
         * 
         * @return builder
         * 
         */
        public Builder endpointId(String endpointId) {
            return endpointId(Output.of(endpointId));
        }

        /**
         * @param mode The endpoint mode. Valid values are `ServiceManaged` or `CustomerManaged`.
         * 
         * @return builder
         * 
         */
        public Builder mode(Output<String> mode) {
            $.mode = mode;
            return this;
        }

        /**
         * @param mode The endpoint mode. Valid values are `ServiceManaged` or `CustomerManaged`.
         * 
         * @return builder
         * 
         */
        public Builder mode(String mode) {
            return mode(Output.of(mode));
        }

        public Builder prefixes(@Nullable Output<List<NgfwEndpointPrefixArgs>> prefixes) {
            $.prefixes = prefixes;
            return this;
        }

        public Builder prefixes(List<NgfwEndpointPrefixArgs> prefixes) {
            return prefixes(Output.of(prefixes));
        }

        public Builder prefixes(NgfwEndpointPrefixArgs... prefixes) {
            return prefixes(List.of(prefixes));
        }

        /**
         * @param rejectedReason The rejected reason.
         * 
         * @return builder
         * 
         */
        public Builder rejectedReason(@Nullable Output<String> rejectedReason) {
            $.rejectedReason = rejectedReason;
            return this;
        }

        /**
         * @param rejectedReason The rejected reason.
         * 
         * @return builder
         * 
         */
        public Builder rejectedReason(String rejectedReason) {
            return rejectedReason(Output.of(rejectedReason));
        }

        /**
         * @param status The attachment status.
         * 
         * @return builder
         * 
         */
        public Builder status(@Nullable Output<String> status) {
            $.status = status;
            return this;
        }

        /**
         * @param status The attachment status.
         * 
         * @return builder
         * 
         */
        public Builder status(String status) {
            return status(Output.of(status));
        }

        /**
         * @param subnetId The subnet id.
         * 
         * @return builder
         * 
         */
        public Builder subnetId(@Nullable Output<String> subnetId) {
            $.subnetId = subnetId;
            return this;
        }

        /**
         * @param subnetId The subnet id.
         * 
         * @return builder
         * 
         */
        public Builder subnetId(String subnetId) {
            return subnetId(Output.of(subnetId));
        }

        /**
         * @param vpcId The vpc id.
         * 
         * @return builder
         * 
         */
        public Builder vpcId(@Nullable Output<String> vpcId) {
            $.vpcId = vpcId;
            return this;
        }

        /**
         * @param vpcId The vpc id.
         * 
         * @return builder
         * 
         */
        public Builder vpcId(String vpcId) {
            return vpcId(Output.of(vpcId));
        }

        /**
         * @param zoneId The AZ id.
         * 
         * @return builder
         * 
         */
        public Builder zoneId(@Nullable Output<String> zoneId) {
            $.zoneId = zoneId;
            return this;
        }

        /**
         * @param zoneId The AZ id.
         * 
         * @return builder
         * 
         */
        public Builder zoneId(String zoneId) {
            return zoneId(Output.of(zoneId));
        }

        public NgfwEndpointArgs build() {
            if ($.mode == null) {
                throw new MissingRequiredPropertyException("NgfwEndpointArgs", "mode");
            }
            return $;
        }
    }

}
