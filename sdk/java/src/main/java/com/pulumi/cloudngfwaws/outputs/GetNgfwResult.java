// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.cloudngfwaws.outputs;

import com.pulumi.cloudngfwaws.outputs.GetNgfwEgressNat;
import com.pulumi.cloudngfwaws.outputs.GetNgfwEndpoint;
import com.pulumi.cloudngfwaws.outputs.GetNgfwPrivateAccess;
import com.pulumi.cloudngfwaws.outputs.GetNgfwStatus;
import com.pulumi.cloudngfwaws.outputs.GetNgfwSubnetMapping;
import com.pulumi.cloudngfwaws.outputs.GetNgfwUserId;
import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;

@CustomType
public final class GetNgfwResult {
    /**
     * @return The description.
     * 
     */
    private String accountId;
    /**
     * @return The list of allowed accounts for this NGFW.
     * 
     */
    private List<String> allowlistAccounts;
    /**
     * @return App-ID version number.
     * 
     */
    private String appIdVersion;
    /**
     * @return Automatic App-ID upgrade version number.
     * 
     */
    private Boolean automaticUpgradeAppIdVersion;
    /**
     * @return The list of availability zones for this NGFW.
     * 
     */
    private List<String> azLists;
    /**
     * @return Enables or disables change protection for the NGFW.
     * 
     */
    private List<String> changeProtections;
    /**
     * @return The update token.
     * 
     */
    private String deploymentUpdateToken;
    /**
     * @return The NGFW description.
     * 
     */
    private String description;
    private List<GetNgfwEgressNat> egressNats;
    /**
     * @return Set endpoint mode from the following options. Valid values are `ServiceManaged` or `CustomerManaged`.
     * 
     */
    private String endpointMode;
    /**
     * @return The endpoint service name.
     * 
     */
    private String endpointServiceName;
    private List<GetNgfwEndpoint> endpoints;
    /**
     * @return The Firewall ID.
     * 
     */
    private String firewallId;
    /**
     * @return The global rulestack for this NGFW.
     * 
     */
    private String globalRulestack;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    /**
     * @return The link ID.
     * 
     */
    private String linkId;
    /**
     * @return The link status.
     * 
     */
    private String linkStatus;
    /**
     * @return Share NGFW with Multiple VPCs. This feature can be enabled only if the endpointMode is CustomerManaged.
     * 
     */
    private Boolean multiVpc;
    /**
     * @return The NGFW name.
     * 
     */
    private String name;
    private List<GetNgfwPrivateAccess> privateAccesses;
    /**
     * @return The rulestack for this NGFW.
     * 
     */
    private String rulestack;
    private List<GetNgfwStatus> statuses;
    /**
     * @return Subnet mappings.
     * 
     */
    private List<GetNgfwSubnetMapping> subnetMappings;
    /**
     * @return The tags.
     * 
     */
    private Map<String,String> tags;
    /**
     * @return The update token.
     * 
     */
    private String updateToken;
    private List<GetNgfwUserId> userIds;
    /**
     * @return The VPC ID for the NGFW.
     * 
     */
    private String vpcId;

    private GetNgfwResult() {}
    /**
     * @return The description.
     * 
     */
    public String accountId() {
        return this.accountId;
    }
    /**
     * @return The list of allowed accounts for this NGFW.
     * 
     */
    public List<String> allowlistAccounts() {
        return this.allowlistAccounts;
    }
    /**
     * @return App-ID version number.
     * 
     */
    public String appIdVersion() {
        return this.appIdVersion;
    }
    /**
     * @return Automatic App-ID upgrade version number.
     * 
     */
    public Boolean automaticUpgradeAppIdVersion() {
        return this.automaticUpgradeAppIdVersion;
    }
    /**
     * @return The list of availability zones for this NGFW.
     * 
     */
    public List<String> azLists() {
        return this.azLists;
    }
    /**
     * @return Enables or disables change protection for the NGFW.
     * 
     */
    public List<String> changeProtections() {
        return this.changeProtections;
    }
    /**
     * @return The update token.
     * 
     */
    public String deploymentUpdateToken() {
        return this.deploymentUpdateToken;
    }
    /**
     * @return The NGFW description.
     * 
     */
    public String description() {
        return this.description;
    }
    public List<GetNgfwEgressNat> egressNats() {
        return this.egressNats;
    }
    /**
     * @return Set endpoint mode from the following options. Valid values are `ServiceManaged` or `CustomerManaged`.
     * 
     */
    public String endpointMode() {
        return this.endpointMode;
    }
    /**
     * @return The endpoint service name.
     * 
     */
    public String endpointServiceName() {
        return this.endpointServiceName;
    }
    public List<GetNgfwEndpoint> endpoints() {
        return this.endpoints;
    }
    /**
     * @return The Firewall ID.
     * 
     */
    public String firewallId() {
        return this.firewallId;
    }
    /**
     * @return The global rulestack for this NGFW.
     * 
     */
    public String globalRulestack() {
        return this.globalRulestack;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return The link ID.
     * 
     */
    public String linkId() {
        return this.linkId;
    }
    /**
     * @return The link status.
     * 
     */
    public String linkStatus() {
        return this.linkStatus;
    }
    /**
     * @return Share NGFW with Multiple VPCs. This feature can be enabled only if the endpointMode is CustomerManaged.
     * 
     */
    public Boolean multiVpc() {
        return this.multiVpc;
    }
    /**
     * @return The NGFW name.
     * 
     */
    public String name() {
        return this.name;
    }
    public List<GetNgfwPrivateAccess> privateAccesses() {
        return this.privateAccesses;
    }
    /**
     * @return The rulestack for this NGFW.
     * 
     */
    public String rulestack() {
        return this.rulestack;
    }
    public List<GetNgfwStatus> statuses() {
        return this.statuses;
    }
    /**
     * @return Subnet mappings.
     * 
     */
    public List<GetNgfwSubnetMapping> subnetMappings() {
        return this.subnetMappings;
    }
    /**
     * @return The tags.
     * 
     */
    public Map<String,String> tags() {
        return this.tags;
    }
    /**
     * @return The update token.
     * 
     */
    public String updateToken() {
        return this.updateToken;
    }
    public List<GetNgfwUserId> userIds() {
        return this.userIds;
    }
    /**
     * @return The VPC ID for the NGFW.
     * 
     */
    public String vpcId() {
        return this.vpcId;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetNgfwResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String accountId;
        private List<String> allowlistAccounts;
        private String appIdVersion;
        private Boolean automaticUpgradeAppIdVersion;
        private List<String> azLists;
        private List<String> changeProtections;
        private String deploymentUpdateToken;
        private String description;
        private List<GetNgfwEgressNat> egressNats;
        private String endpointMode;
        private String endpointServiceName;
        private List<GetNgfwEndpoint> endpoints;
        private String firewallId;
        private String globalRulestack;
        private String id;
        private String linkId;
        private String linkStatus;
        private Boolean multiVpc;
        private String name;
        private List<GetNgfwPrivateAccess> privateAccesses;
        private String rulestack;
        private List<GetNgfwStatus> statuses;
        private List<GetNgfwSubnetMapping> subnetMappings;
        private Map<String,String> tags;
        private String updateToken;
        private List<GetNgfwUserId> userIds;
        private String vpcId;
        public Builder() {}
        public Builder(GetNgfwResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.accountId = defaults.accountId;
    	      this.allowlistAccounts = defaults.allowlistAccounts;
    	      this.appIdVersion = defaults.appIdVersion;
    	      this.automaticUpgradeAppIdVersion = defaults.automaticUpgradeAppIdVersion;
    	      this.azLists = defaults.azLists;
    	      this.changeProtections = defaults.changeProtections;
    	      this.deploymentUpdateToken = defaults.deploymentUpdateToken;
    	      this.description = defaults.description;
    	      this.egressNats = defaults.egressNats;
    	      this.endpointMode = defaults.endpointMode;
    	      this.endpointServiceName = defaults.endpointServiceName;
    	      this.endpoints = defaults.endpoints;
    	      this.firewallId = defaults.firewallId;
    	      this.globalRulestack = defaults.globalRulestack;
    	      this.id = defaults.id;
    	      this.linkId = defaults.linkId;
    	      this.linkStatus = defaults.linkStatus;
    	      this.multiVpc = defaults.multiVpc;
    	      this.name = defaults.name;
    	      this.privateAccesses = defaults.privateAccesses;
    	      this.rulestack = defaults.rulestack;
    	      this.statuses = defaults.statuses;
    	      this.subnetMappings = defaults.subnetMappings;
    	      this.tags = defaults.tags;
    	      this.updateToken = defaults.updateToken;
    	      this.userIds = defaults.userIds;
    	      this.vpcId = defaults.vpcId;
        }

        @CustomType.Setter
        public Builder accountId(String accountId) {
            if (accountId == null) {
              throw new MissingRequiredPropertyException("GetNgfwResult", "accountId");
            }
            this.accountId = accountId;
            return this;
        }
        @CustomType.Setter
        public Builder allowlistAccounts(List<String> allowlistAccounts) {
            if (allowlistAccounts == null) {
              throw new MissingRequiredPropertyException("GetNgfwResult", "allowlistAccounts");
            }
            this.allowlistAccounts = allowlistAccounts;
            return this;
        }
        public Builder allowlistAccounts(String... allowlistAccounts) {
            return allowlistAccounts(List.of(allowlistAccounts));
        }
        @CustomType.Setter
        public Builder appIdVersion(String appIdVersion) {
            if (appIdVersion == null) {
              throw new MissingRequiredPropertyException("GetNgfwResult", "appIdVersion");
            }
            this.appIdVersion = appIdVersion;
            return this;
        }
        @CustomType.Setter
        public Builder automaticUpgradeAppIdVersion(Boolean automaticUpgradeAppIdVersion) {
            if (automaticUpgradeAppIdVersion == null) {
              throw new MissingRequiredPropertyException("GetNgfwResult", "automaticUpgradeAppIdVersion");
            }
            this.automaticUpgradeAppIdVersion = automaticUpgradeAppIdVersion;
            return this;
        }
        @CustomType.Setter
        public Builder azLists(List<String> azLists) {
            if (azLists == null) {
              throw new MissingRequiredPropertyException("GetNgfwResult", "azLists");
            }
            this.azLists = azLists;
            return this;
        }
        public Builder azLists(String... azLists) {
            return azLists(List.of(azLists));
        }
        @CustomType.Setter
        public Builder changeProtections(List<String> changeProtections) {
            if (changeProtections == null) {
              throw new MissingRequiredPropertyException("GetNgfwResult", "changeProtections");
            }
            this.changeProtections = changeProtections;
            return this;
        }
        public Builder changeProtections(String... changeProtections) {
            return changeProtections(List.of(changeProtections));
        }
        @CustomType.Setter
        public Builder deploymentUpdateToken(String deploymentUpdateToken) {
            if (deploymentUpdateToken == null) {
              throw new MissingRequiredPropertyException("GetNgfwResult", "deploymentUpdateToken");
            }
            this.deploymentUpdateToken = deploymentUpdateToken;
            return this;
        }
        @CustomType.Setter
        public Builder description(String description) {
            if (description == null) {
              throw new MissingRequiredPropertyException("GetNgfwResult", "description");
            }
            this.description = description;
            return this;
        }
        @CustomType.Setter
        public Builder egressNats(List<GetNgfwEgressNat> egressNats) {
            if (egressNats == null) {
              throw new MissingRequiredPropertyException("GetNgfwResult", "egressNats");
            }
            this.egressNats = egressNats;
            return this;
        }
        public Builder egressNats(GetNgfwEgressNat... egressNats) {
            return egressNats(List.of(egressNats));
        }
        @CustomType.Setter
        public Builder endpointMode(String endpointMode) {
            if (endpointMode == null) {
              throw new MissingRequiredPropertyException("GetNgfwResult", "endpointMode");
            }
            this.endpointMode = endpointMode;
            return this;
        }
        @CustomType.Setter
        public Builder endpointServiceName(String endpointServiceName) {
            if (endpointServiceName == null) {
              throw new MissingRequiredPropertyException("GetNgfwResult", "endpointServiceName");
            }
            this.endpointServiceName = endpointServiceName;
            return this;
        }
        @CustomType.Setter
        public Builder endpoints(List<GetNgfwEndpoint> endpoints) {
            if (endpoints == null) {
              throw new MissingRequiredPropertyException("GetNgfwResult", "endpoints");
            }
            this.endpoints = endpoints;
            return this;
        }
        public Builder endpoints(GetNgfwEndpoint... endpoints) {
            return endpoints(List.of(endpoints));
        }
        @CustomType.Setter
        public Builder firewallId(String firewallId) {
            if (firewallId == null) {
              throw new MissingRequiredPropertyException("GetNgfwResult", "firewallId");
            }
            this.firewallId = firewallId;
            return this;
        }
        @CustomType.Setter
        public Builder globalRulestack(String globalRulestack) {
            if (globalRulestack == null) {
              throw new MissingRequiredPropertyException("GetNgfwResult", "globalRulestack");
            }
            this.globalRulestack = globalRulestack;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetNgfwResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder linkId(String linkId) {
            if (linkId == null) {
              throw new MissingRequiredPropertyException("GetNgfwResult", "linkId");
            }
            this.linkId = linkId;
            return this;
        }
        @CustomType.Setter
        public Builder linkStatus(String linkStatus) {
            if (linkStatus == null) {
              throw new MissingRequiredPropertyException("GetNgfwResult", "linkStatus");
            }
            this.linkStatus = linkStatus;
            return this;
        }
        @CustomType.Setter
        public Builder multiVpc(Boolean multiVpc) {
            if (multiVpc == null) {
              throw new MissingRequiredPropertyException("GetNgfwResult", "multiVpc");
            }
            this.multiVpc = multiVpc;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("GetNgfwResult", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder privateAccesses(List<GetNgfwPrivateAccess> privateAccesses) {
            if (privateAccesses == null) {
              throw new MissingRequiredPropertyException("GetNgfwResult", "privateAccesses");
            }
            this.privateAccesses = privateAccesses;
            return this;
        }
        public Builder privateAccesses(GetNgfwPrivateAccess... privateAccesses) {
            return privateAccesses(List.of(privateAccesses));
        }
        @CustomType.Setter
        public Builder rulestack(String rulestack) {
            if (rulestack == null) {
              throw new MissingRequiredPropertyException("GetNgfwResult", "rulestack");
            }
            this.rulestack = rulestack;
            return this;
        }
        @CustomType.Setter
        public Builder statuses(List<GetNgfwStatus> statuses) {
            if (statuses == null) {
              throw new MissingRequiredPropertyException("GetNgfwResult", "statuses");
            }
            this.statuses = statuses;
            return this;
        }
        public Builder statuses(GetNgfwStatus... statuses) {
            return statuses(List.of(statuses));
        }
        @CustomType.Setter
        public Builder subnetMappings(List<GetNgfwSubnetMapping> subnetMappings) {
            if (subnetMappings == null) {
              throw new MissingRequiredPropertyException("GetNgfwResult", "subnetMappings");
            }
            this.subnetMappings = subnetMappings;
            return this;
        }
        public Builder subnetMappings(GetNgfwSubnetMapping... subnetMappings) {
            return subnetMappings(List.of(subnetMappings));
        }
        @CustomType.Setter
        public Builder tags(Map<String,String> tags) {
            if (tags == null) {
              throw new MissingRequiredPropertyException("GetNgfwResult", "tags");
            }
            this.tags = tags;
            return this;
        }
        @CustomType.Setter
        public Builder updateToken(String updateToken) {
            if (updateToken == null) {
              throw new MissingRequiredPropertyException("GetNgfwResult", "updateToken");
            }
            this.updateToken = updateToken;
            return this;
        }
        @CustomType.Setter
        public Builder userIds(List<GetNgfwUserId> userIds) {
            if (userIds == null) {
              throw new MissingRequiredPropertyException("GetNgfwResult", "userIds");
            }
            this.userIds = userIds;
            return this;
        }
        public Builder userIds(GetNgfwUserId... userIds) {
            return userIds(List.of(userIds));
        }
        @CustomType.Setter
        public Builder vpcId(String vpcId) {
            if (vpcId == null) {
              throw new MissingRequiredPropertyException("GetNgfwResult", "vpcId");
            }
            this.vpcId = vpcId;
            return this;
        }
        public GetNgfwResult build() {
            final var _resultValue = new GetNgfwResult();
            _resultValue.accountId = accountId;
            _resultValue.allowlistAccounts = allowlistAccounts;
            _resultValue.appIdVersion = appIdVersion;
            _resultValue.automaticUpgradeAppIdVersion = automaticUpgradeAppIdVersion;
            _resultValue.azLists = azLists;
            _resultValue.changeProtections = changeProtections;
            _resultValue.deploymentUpdateToken = deploymentUpdateToken;
            _resultValue.description = description;
            _resultValue.egressNats = egressNats;
            _resultValue.endpointMode = endpointMode;
            _resultValue.endpointServiceName = endpointServiceName;
            _resultValue.endpoints = endpoints;
            _resultValue.firewallId = firewallId;
            _resultValue.globalRulestack = globalRulestack;
            _resultValue.id = id;
            _resultValue.linkId = linkId;
            _resultValue.linkStatus = linkStatus;
            _resultValue.multiVpc = multiVpc;
            _resultValue.name = name;
            _resultValue.privateAccesses = privateAccesses;
            _resultValue.rulestack = rulestack;
            _resultValue.statuses = statuses;
            _resultValue.subnetMappings = subnetMappings;
            _resultValue.tags = tags;
            _resultValue.updateToken = updateToken;
            _resultValue.userIds = userIds;
            _resultValue.vpcId = vpcId;
            return _resultValue;
        }
    }
}
