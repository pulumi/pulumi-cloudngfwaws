// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.cloudngfwaws;

import com.pulumi.cloudngfwaws.inputs.NgfwLogProfileLogDestinationArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class NgfwLogProfileArgs extends com.pulumi.resources.ResourceArgs {

    public static final NgfwLogProfileArgs Empty = new NgfwLogProfileArgs();

    /**
     * The unique ID of the account.
     * 
     */
    @Import(name="accountId", required=true)
    private Output<String> accountId;

    /**
     * @return The unique ID of the account.
     * 
     */
    public Output<String> accountId() {
        return this.accountId;
    }

    /**
     * Enable advanced threat logging.
     * 
     */
    @Import(name="advancedThreatLog")
    private @Nullable Output<Boolean> advancedThreatLog;

    /**
     * @return Enable advanced threat logging.
     * 
     */
    public Optional<Output<Boolean>> advancedThreatLog() {
        return Optional.ofNullable(this.advancedThreatLog);
    }

    /**
     * The CloudWatch metric namespace.
     * 
     */
    @Import(name="cloudWatchMetricNamespace")
    private @Nullable Output<String> cloudWatchMetricNamespace;

    /**
     * @return The CloudWatch metric namespace.
     * 
     */
    public Optional<Output<String>> cloudWatchMetricNamespace() {
        return Optional.ofNullable(this.cloudWatchMetricNamespace);
    }

    /**
     * Cloudwatch metric fields.
     * 
     */
    @Import(name="cloudwatchMetricFields")
    private @Nullable Output<List<String>> cloudwatchMetricFields;

    /**
     * @return Cloudwatch metric fields.
     * 
     */
    public Optional<Output<List<String>>> cloudwatchMetricFields() {
        return Optional.ofNullable(this.cloudwatchMetricFields);
    }

    /**
     * List of log destinations.
     * 
     */
    @Import(name="logDestinations", required=true)
    private Output<List<NgfwLogProfileLogDestinationArgs>> logDestinations;

    /**
     * @return List of log destinations.
     * 
     */
    public Output<List<NgfwLogProfileLogDestinationArgs>> logDestinations() {
        return this.logDestinations;
    }

    /**
     * The name of the NGFW.
     * 
     */
    @Import(name="ngfw", required=true)
    private Output<String> ngfw;

    /**
     * @return The name of the NGFW.
     * 
     */
    public Output<String> ngfw() {
        return this.ngfw;
    }

    private NgfwLogProfileArgs() {}

    private NgfwLogProfileArgs(NgfwLogProfileArgs $) {
        this.accountId = $.accountId;
        this.advancedThreatLog = $.advancedThreatLog;
        this.cloudWatchMetricNamespace = $.cloudWatchMetricNamespace;
        this.cloudwatchMetricFields = $.cloudwatchMetricFields;
        this.logDestinations = $.logDestinations;
        this.ngfw = $.ngfw;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(NgfwLogProfileArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private NgfwLogProfileArgs $;

        public Builder() {
            $ = new NgfwLogProfileArgs();
        }

        public Builder(NgfwLogProfileArgs defaults) {
            $ = new NgfwLogProfileArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param accountId The unique ID of the account.
         * 
         * @return builder
         * 
         */
        public Builder accountId(Output<String> accountId) {
            $.accountId = accountId;
            return this;
        }

        /**
         * @param accountId The unique ID of the account.
         * 
         * @return builder
         * 
         */
        public Builder accountId(String accountId) {
            return accountId(Output.of(accountId));
        }

        /**
         * @param advancedThreatLog Enable advanced threat logging.
         * 
         * @return builder
         * 
         */
        public Builder advancedThreatLog(@Nullable Output<Boolean> advancedThreatLog) {
            $.advancedThreatLog = advancedThreatLog;
            return this;
        }

        /**
         * @param advancedThreatLog Enable advanced threat logging.
         * 
         * @return builder
         * 
         */
        public Builder advancedThreatLog(Boolean advancedThreatLog) {
            return advancedThreatLog(Output.of(advancedThreatLog));
        }

        /**
         * @param cloudWatchMetricNamespace The CloudWatch metric namespace.
         * 
         * @return builder
         * 
         */
        public Builder cloudWatchMetricNamespace(@Nullable Output<String> cloudWatchMetricNamespace) {
            $.cloudWatchMetricNamespace = cloudWatchMetricNamespace;
            return this;
        }

        /**
         * @param cloudWatchMetricNamespace The CloudWatch metric namespace.
         * 
         * @return builder
         * 
         */
        public Builder cloudWatchMetricNamespace(String cloudWatchMetricNamespace) {
            return cloudWatchMetricNamespace(Output.of(cloudWatchMetricNamespace));
        }

        /**
         * @param cloudwatchMetricFields Cloudwatch metric fields.
         * 
         * @return builder
         * 
         */
        public Builder cloudwatchMetricFields(@Nullable Output<List<String>> cloudwatchMetricFields) {
            $.cloudwatchMetricFields = cloudwatchMetricFields;
            return this;
        }

        /**
         * @param cloudwatchMetricFields Cloudwatch metric fields.
         * 
         * @return builder
         * 
         */
        public Builder cloudwatchMetricFields(List<String> cloudwatchMetricFields) {
            return cloudwatchMetricFields(Output.of(cloudwatchMetricFields));
        }

        /**
         * @param cloudwatchMetricFields Cloudwatch metric fields.
         * 
         * @return builder
         * 
         */
        public Builder cloudwatchMetricFields(String... cloudwatchMetricFields) {
            return cloudwatchMetricFields(List.of(cloudwatchMetricFields));
        }

        /**
         * @param logDestinations List of log destinations.
         * 
         * @return builder
         * 
         */
        public Builder logDestinations(Output<List<NgfwLogProfileLogDestinationArgs>> logDestinations) {
            $.logDestinations = logDestinations;
            return this;
        }

        /**
         * @param logDestinations List of log destinations.
         * 
         * @return builder
         * 
         */
        public Builder logDestinations(List<NgfwLogProfileLogDestinationArgs> logDestinations) {
            return logDestinations(Output.of(logDestinations));
        }

        /**
         * @param logDestinations List of log destinations.
         * 
         * @return builder
         * 
         */
        public Builder logDestinations(NgfwLogProfileLogDestinationArgs... logDestinations) {
            return logDestinations(List.of(logDestinations));
        }

        /**
         * @param ngfw The name of the NGFW.
         * 
         * @return builder
         * 
         */
        public Builder ngfw(Output<String> ngfw) {
            $.ngfw = ngfw;
            return this;
        }

        /**
         * @param ngfw The name of the NGFW.
         * 
         * @return builder
         * 
         */
        public Builder ngfw(String ngfw) {
            return ngfw(Output.of(ngfw));
        }

        public NgfwLogProfileArgs build() {
            if ($.accountId == null) {
                throw new MissingRequiredPropertyException("NgfwLogProfileArgs", "accountId");
            }
            if ($.logDestinations == null) {
                throw new MissingRequiredPropertyException("NgfwLogProfileArgs", "logDestinations");
            }
            if ($.ngfw == null) {
                throw new MissingRequiredPropertyException("NgfwLogProfileArgs", "ngfw");
            }
            return $;
        }
    }

}
