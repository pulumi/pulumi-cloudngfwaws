// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.cloudngfwaws.inputs;

import com.pulumi.cloudngfwaws.inputs.NgfwUserIdCustomIncludeExcludeNetworkArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class NgfwUserIdArgs extends com.pulumi.resources.ResourceArgs {

    public static final NgfwUserIdArgs Empty = new NgfwUserIdArgs();

    /**
     * Agent Name for UserID
     * 
     */
    @Import(name="agentName")
    private @Nullable Output<String> agentName;

    /**
     * @return Agent Name for UserID
     * 
     */
    public Optional<Output<String>> agentName() {
        return Optional.ofNullable(this.agentName);
    }

    /**
     * The Collector Name
     * 
     */
    @Import(name="collectorName")
    private @Nullable Output<String> collectorName;

    /**
     * @return The Collector Name
     * 
     */
    public Optional<Output<String>> collectorName() {
        return Optional.ofNullable(this.collectorName);
    }

    /**
     * List of Custom Include Exclude Networks
     * 
     */
    @Import(name="customIncludeExcludeNetworks")
    private @Nullable Output<List<NgfwUserIdCustomIncludeExcludeNetworkArgs>> customIncludeExcludeNetworks;

    /**
     * @return List of Custom Include Exclude Networks
     * 
     */
    public Optional<Output<List<NgfwUserIdCustomIncludeExcludeNetworkArgs>>> customIncludeExcludeNetworks() {
        return Optional.ofNullable(this.customIncludeExcludeNetworks);
    }

    /**
     * Enable UserID Config
     * 
     */
    @Import(name="enabled", required=true)
    private Output<Boolean> enabled;

    /**
     * @return Enable UserID Config
     * 
     */
    public Output<Boolean> enabled() {
        return this.enabled;
    }

    /**
     * The Port
     * 
     */
    @Import(name="port", required=true)
    private Output<Integer> port;

    /**
     * @return The Port
     * 
     */
    public Output<Integer> port() {
        return this.port;
    }

    /**
     * AWS Secret Key ARN
     * 
     */
    @Import(name="secretKeyArn")
    private @Nullable Output<String> secretKeyArn;

    /**
     * @return AWS Secret Key ARN
     * 
     */
    public Optional<Output<String>> secretKeyArn() {
        return Optional.ofNullable(this.secretKeyArn);
    }

    /**
     * Status and State of UserID Configuration
     * 
     */
    @Import(name="userIdStatus")
    private @Nullable Output<String> userIdStatus;

    /**
     * @return Status and State of UserID Configuration
     * 
     */
    public Optional<Output<String>> userIdStatus() {
        return Optional.ofNullable(this.userIdStatus);
    }

    private NgfwUserIdArgs() {}

    private NgfwUserIdArgs(NgfwUserIdArgs $) {
        this.agentName = $.agentName;
        this.collectorName = $.collectorName;
        this.customIncludeExcludeNetworks = $.customIncludeExcludeNetworks;
        this.enabled = $.enabled;
        this.port = $.port;
        this.secretKeyArn = $.secretKeyArn;
        this.userIdStatus = $.userIdStatus;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(NgfwUserIdArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private NgfwUserIdArgs $;

        public Builder() {
            $ = new NgfwUserIdArgs();
        }

        public Builder(NgfwUserIdArgs defaults) {
            $ = new NgfwUserIdArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param agentName Agent Name for UserID
         * 
         * @return builder
         * 
         */
        public Builder agentName(@Nullable Output<String> agentName) {
            $.agentName = agentName;
            return this;
        }

        /**
         * @param agentName Agent Name for UserID
         * 
         * @return builder
         * 
         */
        public Builder agentName(String agentName) {
            return agentName(Output.of(agentName));
        }

        /**
         * @param collectorName The Collector Name
         * 
         * @return builder
         * 
         */
        public Builder collectorName(@Nullable Output<String> collectorName) {
            $.collectorName = collectorName;
            return this;
        }

        /**
         * @param collectorName The Collector Name
         * 
         * @return builder
         * 
         */
        public Builder collectorName(String collectorName) {
            return collectorName(Output.of(collectorName));
        }

        /**
         * @param customIncludeExcludeNetworks List of Custom Include Exclude Networks
         * 
         * @return builder
         * 
         */
        public Builder customIncludeExcludeNetworks(@Nullable Output<List<NgfwUserIdCustomIncludeExcludeNetworkArgs>> customIncludeExcludeNetworks) {
            $.customIncludeExcludeNetworks = customIncludeExcludeNetworks;
            return this;
        }

        /**
         * @param customIncludeExcludeNetworks List of Custom Include Exclude Networks
         * 
         * @return builder
         * 
         */
        public Builder customIncludeExcludeNetworks(List<NgfwUserIdCustomIncludeExcludeNetworkArgs> customIncludeExcludeNetworks) {
            return customIncludeExcludeNetworks(Output.of(customIncludeExcludeNetworks));
        }

        /**
         * @param customIncludeExcludeNetworks List of Custom Include Exclude Networks
         * 
         * @return builder
         * 
         */
        public Builder customIncludeExcludeNetworks(NgfwUserIdCustomIncludeExcludeNetworkArgs... customIncludeExcludeNetworks) {
            return customIncludeExcludeNetworks(List.of(customIncludeExcludeNetworks));
        }

        /**
         * @param enabled Enable UserID Config
         * 
         * @return builder
         * 
         */
        public Builder enabled(Output<Boolean> enabled) {
            $.enabled = enabled;
            return this;
        }

        /**
         * @param enabled Enable UserID Config
         * 
         * @return builder
         * 
         */
        public Builder enabled(Boolean enabled) {
            return enabled(Output.of(enabled));
        }

        /**
         * @param port The Port
         * 
         * @return builder
         * 
         */
        public Builder port(Output<Integer> port) {
            $.port = port;
            return this;
        }

        /**
         * @param port The Port
         * 
         * @return builder
         * 
         */
        public Builder port(Integer port) {
            return port(Output.of(port));
        }

        /**
         * @param secretKeyArn AWS Secret Key ARN
         * 
         * @return builder
         * 
         */
        public Builder secretKeyArn(@Nullable Output<String> secretKeyArn) {
            $.secretKeyArn = secretKeyArn;
            return this;
        }

        /**
         * @param secretKeyArn AWS Secret Key ARN
         * 
         * @return builder
         * 
         */
        public Builder secretKeyArn(String secretKeyArn) {
            return secretKeyArn(Output.of(secretKeyArn));
        }

        /**
         * @param userIdStatus Status and State of UserID Configuration
         * 
         * @return builder
         * 
         */
        public Builder userIdStatus(@Nullable Output<String> userIdStatus) {
            $.userIdStatus = userIdStatus;
            return this;
        }

        /**
         * @param userIdStatus Status and State of UserID Configuration
         * 
         * @return builder
         * 
         */
        public Builder userIdStatus(String userIdStatus) {
            return userIdStatus(Output.of(userIdStatus));
        }

        public NgfwUserIdArgs build() {
            if ($.enabled == null) {
                throw new MissingRequiredPropertyException("NgfwUserIdArgs", "enabled");
            }
            if ($.port == null) {
                throw new MissingRequiredPropertyException("NgfwUserIdArgs", "port");
            }
            return $;
        }
    }

}
