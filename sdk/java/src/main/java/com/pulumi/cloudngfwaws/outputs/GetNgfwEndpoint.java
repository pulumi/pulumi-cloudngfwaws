// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.cloudngfwaws.outputs;

import com.pulumi.cloudngfwaws.outputs.GetNgfwEndpointPrefix;
import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetNgfwEndpoint {
    /**
     * @return The account id.
     * 
     */
    private String accountId;
    /**
     * @return Enable egress NAT
     * 
     */
    private Boolean egressNatEnabled;
    /**
     * @return Endpoint ID of the security zone
     * 
     */
    private String endpointId;
    /**
     * @return The endpoint mode. Valid values are `ServiceManaged` or `CustomerManaged`.
     * 
     */
    private String mode;
    private List<GetNgfwEndpointPrefix> prefixes;
    /**
     * @return The rejected reason.
     * 
     */
    private String rejectedReason;
    /**
     * @return The attachment status.
     * 
     */
    private String status;
    /**
     * @return The subnet id.
     * 
     */
    private String subnetId;
    /**
     * @return The vpc id.
     * 
     */
    private String vpcId;
    /**
     * @return The AZ id.
     * 
     */
    private String zoneId;

    private GetNgfwEndpoint() {}
    /**
     * @return The account id.
     * 
     */
    public String accountId() {
        return this.accountId;
    }
    /**
     * @return Enable egress NAT
     * 
     */
    public Boolean egressNatEnabled() {
        return this.egressNatEnabled;
    }
    /**
     * @return Endpoint ID of the security zone
     * 
     */
    public String endpointId() {
        return this.endpointId;
    }
    /**
     * @return The endpoint mode. Valid values are `ServiceManaged` or `CustomerManaged`.
     * 
     */
    public String mode() {
        return this.mode;
    }
    public List<GetNgfwEndpointPrefix> prefixes() {
        return this.prefixes;
    }
    /**
     * @return The rejected reason.
     * 
     */
    public String rejectedReason() {
        return this.rejectedReason;
    }
    /**
     * @return The attachment status.
     * 
     */
    public String status() {
        return this.status;
    }
    /**
     * @return The subnet id.
     * 
     */
    public String subnetId() {
        return this.subnetId;
    }
    /**
     * @return The vpc id.
     * 
     */
    public String vpcId() {
        return this.vpcId;
    }
    /**
     * @return The AZ id.
     * 
     */
    public String zoneId() {
        return this.zoneId;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetNgfwEndpoint defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String accountId;
        private Boolean egressNatEnabled;
        private String endpointId;
        private String mode;
        private List<GetNgfwEndpointPrefix> prefixes;
        private String rejectedReason;
        private String status;
        private String subnetId;
        private String vpcId;
        private String zoneId;
        public Builder() {}
        public Builder(GetNgfwEndpoint defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.accountId = defaults.accountId;
    	      this.egressNatEnabled = defaults.egressNatEnabled;
    	      this.endpointId = defaults.endpointId;
    	      this.mode = defaults.mode;
    	      this.prefixes = defaults.prefixes;
    	      this.rejectedReason = defaults.rejectedReason;
    	      this.status = defaults.status;
    	      this.subnetId = defaults.subnetId;
    	      this.vpcId = defaults.vpcId;
    	      this.zoneId = defaults.zoneId;
        }

        @CustomType.Setter
        public Builder accountId(String accountId) {
            if (accountId == null) {
              throw new MissingRequiredPropertyException("GetNgfwEndpoint", "accountId");
            }
            this.accountId = accountId;
            return this;
        }
        @CustomType.Setter
        public Builder egressNatEnabled(Boolean egressNatEnabled) {
            if (egressNatEnabled == null) {
              throw new MissingRequiredPropertyException("GetNgfwEndpoint", "egressNatEnabled");
            }
            this.egressNatEnabled = egressNatEnabled;
            return this;
        }
        @CustomType.Setter
        public Builder endpointId(String endpointId) {
            if (endpointId == null) {
              throw new MissingRequiredPropertyException("GetNgfwEndpoint", "endpointId");
            }
            this.endpointId = endpointId;
            return this;
        }
        @CustomType.Setter
        public Builder mode(String mode) {
            if (mode == null) {
              throw new MissingRequiredPropertyException("GetNgfwEndpoint", "mode");
            }
            this.mode = mode;
            return this;
        }
        @CustomType.Setter
        public Builder prefixes(List<GetNgfwEndpointPrefix> prefixes) {
            if (prefixes == null) {
              throw new MissingRequiredPropertyException("GetNgfwEndpoint", "prefixes");
            }
            this.prefixes = prefixes;
            return this;
        }
        public Builder prefixes(GetNgfwEndpointPrefix... prefixes) {
            return prefixes(List.of(prefixes));
        }
        @CustomType.Setter
        public Builder rejectedReason(String rejectedReason) {
            if (rejectedReason == null) {
              throw new MissingRequiredPropertyException("GetNgfwEndpoint", "rejectedReason");
            }
            this.rejectedReason = rejectedReason;
            return this;
        }
        @CustomType.Setter
        public Builder status(String status) {
            if (status == null) {
              throw new MissingRequiredPropertyException("GetNgfwEndpoint", "status");
            }
            this.status = status;
            return this;
        }
        @CustomType.Setter
        public Builder subnetId(String subnetId) {
            if (subnetId == null) {
              throw new MissingRequiredPropertyException("GetNgfwEndpoint", "subnetId");
            }
            this.subnetId = subnetId;
            return this;
        }
        @CustomType.Setter
        public Builder vpcId(String vpcId) {
            if (vpcId == null) {
              throw new MissingRequiredPropertyException("GetNgfwEndpoint", "vpcId");
            }
            this.vpcId = vpcId;
            return this;
        }
        @CustomType.Setter
        public Builder zoneId(String zoneId) {
            if (zoneId == null) {
              throw new MissingRequiredPropertyException("GetNgfwEndpoint", "zoneId");
            }
            this.zoneId = zoneId;
            return this;
        }
        public GetNgfwEndpoint build() {
            final var _resultValue = new GetNgfwEndpoint();
            _resultValue.accountId = accountId;
            _resultValue.egressNatEnabled = egressNatEnabled;
            _resultValue.endpointId = endpointId;
            _resultValue.mode = mode;
            _resultValue.prefixes = prefixes;
            _resultValue.rejectedReason = rejectedReason;
            _resultValue.status = status;
            _resultValue.subnetId = subnetId;
            _resultValue.vpcId = vpcId;
            _resultValue.zoneId = zoneId;
            return _resultValue;
        }
    }
}
