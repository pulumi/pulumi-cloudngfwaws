// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.cloudngfwaws;

import com.pulumi.cloudngfwaws.CommitRulestackArgs;
import com.pulumi.cloudngfwaws.Utilities;
import com.pulumi.cloudngfwaws.inputs.CommitRulestackState;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import java.lang.String;
import java.util.List;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * Resource for committing the rulestack config.
 * 
 * !&gt; **NOTE:** This resource should be placed in a separate plan as the plan that configures the rulestack and its contents.  If you do not, you will have perpetual configuration drift and will need to run your plan twice so the commit is performed.  Placing instances of this resource with instances of NGFW resources (such as `cloudngfwaws.Ngfw`) is fine.
 * 
 * ## Admin Permission Type
 * 
 * * `Rulestack` (for `scope=&#34;Local&#34;`)
 * * `Global Rulestack` (for `scope=&#34;Global&#34;`)
 * 
 * ## Example Usage
 * 
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.cloudngfwaws.CommitRulestack;
 * import com.pulumi.cloudngfwaws.CommitRulestackArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var example = new CommitRulestack("example", CommitRulestackArgs.builder()
 *             .rulestack("my-rulestack")
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * 
 */
@ResourceType(type="cloudngfwaws:index/commitRulestack:CommitRulestack")
public class CommitRulestack extends com.pulumi.resources.CustomResource {
    /**
     * Commit error messages.
     * 
     */
    @Export(name="commitErrors", refs={List.class,String.class}, tree="[0,1]")
    private Output<List<String>> commitErrors;

    /**
     * @return Commit error messages.
     * 
     */
    public Output<List<String>> commitErrors() {
        return this.commitErrors;
    }
    /**
     * The commit status.
     * 
     */
    @Export(name="commitStatus", refs={String.class}, tree="[0]")
    private Output<String> commitStatus;

    /**
     * @return The commit status.
     * 
     */
    public Output<String> commitStatus() {
        return this.commitStatus;
    }
    /**
     * The rulestack.
     * 
     */
    @Export(name="rulestack", refs={String.class}, tree="[0]")
    private Output<String> rulestack;

    /**
     * @return The rulestack.
     * 
     */
    public Output<String> rulestack() {
        return this.rulestack;
    }
    /**
     * The rulestack&#39;s scope. A local rulestack will require that you&#39;ve retrieved a LRA JWT. A global rulestack will require that you&#39;ve retrieved a GRA JWT. Valid values are `Local` or `Global`. Defaults to `Local`.
     * 
     */
    @Export(name="scope", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> scope;

    /**
     * @return The rulestack&#39;s scope. A local rulestack will require that you&#39;ve retrieved a LRA JWT. A global rulestack will require that you&#39;ve retrieved a GRA JWT. Valid values are `Local` or `Global`. Defaults to `Local`.
     * 
     */
    public Output<Optional<String>> scope() {
        return Codegen.optional(this.scope);
    }
    /**
     * The rulestack state. This can only be the default value. Defaults to `Running`.
     * 
     */
    @Export(name="state", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> state;

    /**
     * @return The rulestack state. This can only be the default value. Defaults to `Running`.
     * 
     */
    public Output<Optional<String>> state() {
        return Codegen.optional(this.state);
    }
    /**
     * Validation error messages.
     * 
     */
    @Export(name="validationErrors", refs={List.class,String.class}, tree="[0,1]")
    private Output<List<String>> validationErrors;

    /**
     * @return Validation error messages.
     * 
     */
    public Output<List<String>> validationErrors() {
        return this.validationErrors;
    }
    /**
     * The validation status.
     * 
     */
    @Export(name="validationStatus", refs={String.class}, tree="[0]")
    private Output<String> validationStatus;

    /**
     * @return The validation status.
     * 
     */
    public Output<String> validationStatus() {
        return this.validationStatus;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public CommitRulestack(java.lang.String name) {
        this(name, CommitRulestackArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public CommitRulestack(java.lang.String name, CommitRulestackArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public CommitRulestack(java.lang.String name, CommitRulestackArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("cloudngfwaws:index/commitRulestack:CommitRulestack", name, makeArgs(args, options), makeResourceOptions(options, Codegen.empty()), false);
    }

    private CommitRulestack(java.lang.String name, Output<java.lang.String> id, @Nullable CommitRulestackState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("cloudngfwaws:index/commitRulestack:CommitRulestack", name, state, makeResourceOptions(options, id), false);
    }

    private static CommitRulestackArgs makeArgs(CommitRulestackArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        if (options != null && options.getUrn().isPresent()) {
            return null;
        }
        return args == null ? CommitRulestackArgs.Empty : args;
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<java.lang.String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .pluginDownloadURL("github://api.github.com/pulumi/pulumi-cloudngfwaws")
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static CommitRulestack get(java.lang.String name, Output<java.lang.String> id, @Nullable CommitRulestackState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new CommitRulestack(name, id, state, options);
    }
}
