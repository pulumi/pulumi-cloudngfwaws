// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.cloudngfwaws.inputs;

import com.pulumi.cloudngfwaws.inputs.NgfwEgressNatSettingArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class NgfwEgressNatArgs extends com.pulumi.resources.ResourceArgs {

    public static final NgfwEgressNatArgs Empty = new NgfwEgressNatArgs();

    /**
     * Enable egress NAT
     * 
     */
    @Import(name="enabled", required=true)
    private Output<Boolean> enabled;

    /**
     * @return Enable egress NAT
     * 
     */
    public Output<Boolean> enabled() {
        return this.enabled;
    }

    @Import(name="settings")
    private @Nullable Output<List<NgfwEgressNatSettingArgs>> settings;

    public Optional<Output<List<NgfwEgressNatSettingArgs>>> settings() {
        return Optional.ofNullable(this.settings);
    }

    private NgfwEgressNatArgs() {}

    private NgfwEgressNatArgs(NgfwEgressNatArgs $) {
        this.enabled = $.enabled;
        this.settings = $.settings;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(NgfwEgressNatArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private NgfwEgressNatArgs $;

        public Builder() {
            $ = new NgfwEgressNatArgs();
        }

        public Builder(NgfwEgressNatArgs defaults) {
            $ = new NgfwEgressNatArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param enabled Enable egress NAT
         * 
         * @return builder
         * 
         */
        public Builder enabled(Output<Boolean> enabled) {
            $.enabled = enabled;
            return this;
        }

        /**
         * @param enabled Enable egress NAT
         * 
         * @return builder
         * 
         */
        public Builder enabled(Boolean enabled) {
            return enabled(Output.of(enabled));
        }

        public Builder settings(@Nullable Output<List<NgfwEgressNatSettingArgs>> settings) {
            $.settings = settings;
            return this;
        }

        public Builder settings(List<NgfwEgressNatSettingArgs> settings) {
            return settings(Output.of(settings));
        }

        public Builder settings(NgfwEgressNatSettingArgs... settings) {
            return settings(List.of(settings));
        }

        public NgfwEgressNatArgs build() {
            if ($.enabled == null) {
                throw new MissingRequiredPropertyException("NgfwEgressNatArgs", "enabled");
            }
            return $;
        }
    }

}
