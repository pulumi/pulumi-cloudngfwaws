// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.cloudngfwaws.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetSecurityRuleArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetSecurityRuleArgs Empty = new GetSecurityRuleArgs();

    /**
     * Retrieve either the candidate or running config. Valid values are `candidate` or `running`. Defaults to `candidate`.
     * 
     */
    @Import(name="configType")
    private @Nullable Output<String> configType;

    /**
     * @return Retrieve either the candidate or running config. Valid values are `candidate` or `running`. Defaults to `candidate`.
     * 
     */
    public Optional<Output<String>> configType() {
        return Optional.ofNullable(this.configType);
    }

    /**
     * The rule priority.
     * 
     */
    @Import(name="priority", required=true)
    private Output<Integer> priority;

    /**
     * @return The rule priority.
     * 
     */
    public Output<Integer> priority() {
        return this.priority;
    }

    /**
     * The rulebase. Valid values are `PreRule`, `PostRule`, or `LocalRule`. Defaults to `PreRule`.
     * 
     */
    @Import(name="ruleList")
    private @Nullable Output<String> ruleList;

    /**
     * @return The rulebase. Valid values are `PreRule`, `PostRule`, or `LocalRule`. Defaults to `PreRule`.
     * 
     */
    public Optional<Output<String>> ruleList() {
        return Optional.ofNullable(this.ruleList);
    }

    /**
     * The rulestack.
     * 
     */
    @Import(name="rulestack", required=true)
    private Output<String> rulestack;

    /**
     * @return The rulestack.
     * 
     */
    public Output<String> rulestack() {
        return this.rulestack;
    }

    /**
     * The rulestack&#39;s scope. A local rulestack will require that you&#39;ve retrieved a LRA JWT. A global rulestack will require that you&#39;ve retrieved a GRA JWT. Valid values are `Local` or `Global`. Defaults to `Local`.
     * 
     */
    @Import(name="scope")
    private @Nullable Output<String> scope;

    /**
     * @return The rulestack&#39;s scope. A local rulestack will require that you&#39;ve retrieved a LRA JWT. A global rulestack will require that you&#39;ve retrieved a GRA JWT. Valid values are `Local` or `Global`. Defaults to `Local`.
     * 
     */
    public Optional<Output<String>> scope() {
        return Optional.ofNullable(this.scope);
    }

    private GetSecurityRuleArgs() {}

    private GetSecurityRuleArgs(GetSecurityRuleArgs $) {
        this.configType = $.configType;
        this.priority = $.priority;
        this.ruleList = $.ruleList;
        this.rulestack = $.rulestack;
        this.scope = $.scope;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetSecurityRuleArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetSecurityRuleArgs $;

        public Builder() {
            $ = new GetSecurityRuleArgs();
        }

        public Builder(GetSecurityRuleArgs defaults) {
            $ = new GetSecurityRuleArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param configType Retrieve either the candidate or running config. Valid values are `candidate` or `running`. Defaults to `candidate`.
         * 
         * @return builder
         * 
         */
        public Builder configType(@Nullable Output<String> configType) {
            $.configType = configType;
            return this;
        }

        /**
         * @param configType Retrieve either the candidate or running config. Valid values are `candidate` or `running`. Defaults to `candidate`.
         * 
         * @return builder
         * 
         */
        public Builder configType(String configType) {
            return configType(Output.of(configType));
        }

        /**
         * @param priority The rule priority.
         * 
         * @return builder
         * 
         */
        public Builder priority(Output<Integer> priority) {
            $.priority = priority;
            return this;
        }

        /**
         * @param priority The rule priority.
         * 
         * @return builder
         * 
         */
        public Builder priority(Integer priority) {
            return priority(Output.of(priority));
        }

        /**
         * @param ruleList The rulebase. Valid values are `PreRule`, `PostRule`, or `LocalRule`. Defaults to `PreRule`.
         * 
         * @return builder
         * 
         */
        public Builder ruleList(@Nullable Output<String> ruleList) {
            $.ruleList = ruleList;
            return this;
        }

        /**
         * @param ruleList The rulebase. Valid values are `PreRule`, `PostRule`, or `LocalRule`. Defaults to `PreRule`.
         * 
         * @return builder
         * 
         */
        public Builder ruleList(String ruleList) {
            return ruleList(Output.of(ruleList));
        }

        /**
         * @param rulestack The rulestack.
         * 
         * @return builder
         * 
         */
        public Builder rulestack(Output<String> rulestack) {
            $.rulestack = rulestack;
            return this;
        }

        /**
         * @param rulestack The rulestack.
         * 
         * @return builder
         * 
         */
        public Builder rulestack(String rulestack) {
            return rulestack(Output.of(rulestack));
        }

        /**
         * @param scope The rulestack&#39;s scope. A local rulestack will require that you&#39;ve retrieved a LRA JWT. A global rulestack will require that you&#39;ve retrieved a GRA JWT. Valid values are `Local` or `Global`. Defaults to `Local`.
         * 
         * @return builder
         * 
         */
        public Builder scope(@Nullable Output<String> scope) {
            $.scope = scope;
            return this;
        }

        /**
         * @param scope The rulestack&#39;s scope. A local rulestack will require that you&#39;ve retrieved a LRA JWT. A global rulestack will require that you&#39;ve retrieved a GRA JWT. Valid values are `Local` or `Global`. Defaults to `Local`.
         * 
         * @return builder
         * 
         */
        public Builder scope(String scope) {
            return scope(Output.of(scope));
        }

        public GetSecurityRuleArgs build() {
            if ($.priority == null) {
                throw new MissingRequiredPropertyException("GetSecurityRuleArgs", "priority");
            }
            if ($.rulestack == null) {
                throw new MissingRequiredPropertyException("GetSecurityRuleArgs", "rulestack");
            }
            return $;
        }
    }

}
