// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.cloudngfwaws;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ProviderArgs extends com.pulumi.resources.ResourceArgs {

    public static final ProviderArgs Empty = new ProviderArgs();

    /**
     * (Used for the initial `sts assume role`) AWS access key. Environment variable: `CLOUDNGFWAWS_ACCESS_KEY`. JSON conf file variable: `access-key`.
     * 
     */
    @Import(name="accessKey")
    private @Nullable Output<String> accessKey;

    /**
     * @return (Used for the initial `sts assume role`) AWS access key. Environment variable: `CLOUDNGFWAWS_ACCESS_KEY`. JSON conf file variable: `access-key`.
     * 
     */
    public Optional<Output<String>> accessKey() {
        return Optional.ofNullable(this.accessKey);
    }

    /**
     * The ARN allowing account admin permissions. Environment variable: `CLOUDNGFWAWS_ACCT_ADMIN_ARN`. JSON conf file variable: `account-admin-arn`.
     * 
     */
    @Import(name="accountAdminArn")
    private @Nullable Output<String> accountAdminArn;

    /**
     * @return The ARN allowing account admin permissions. Environment variable: `CLOUDNGFWAWS_ACCT_ADMIN_ARN`. JSON conf file variable: `account-admin-arn`.
     * 
     */
    public Optional<Output<String>> accountAdminArn() {
        return Optional.ofNullable(this.accountAdminArn);
    }

    /**
     * The ARN allowing firewall, rulestack, and global rulestack admin permissions. Global rulestack admin permissions can be enabled only if the AWS account is onboarded by AWS Firewall Manager. Use &#39;lfa_arn&#39; and &#39;lra_arn&#39; if you want to enable only firewall and rulestack admin permissions. Environment variable: `CLOUDNGFWAWS_ARN`. JSON conf file variable: `arn`.
     * 
     */
    @Import(name="arn")
    private @Nullable Output<String> arn;

    /**
     * @return The ARN allowing firewall, rulestack, and global rulestack admin permissions. Global rulestack admin permissions can be enabled only if the AWS account is onboarded by AWS Firewall Manager. Use &#39;lfa_arn&#39; and &#39;lra_arn&#39; if you want to enable only firewall and rulestack admin permissions. Environment variable: `CLOUDNGFWAWS_ARN`. JSON conf file variable: `arn`.
     * 
     */
    public Optional<Output<String>> arn() {
        return Optional.ofNullable(this.arn);
    }

    /**
     * The ARN allowing global rulestack admin permissions. Global rulestack admin permissions can be enabled only if the AWS account is onboarded by AWS Firewall Manager. &#39;gra_arn&#39; is preferentially used over the `arn` param if both are specified. Environment variable: `CLOUDNGFWAWS_GRA_ARN`. JSON conf file variable: `gra-arn`.
     * 
     */
    @Import(name="graArn")
    private @Nullable Output<String> graArn;

    /**
     * @return The ARN allowing global rulestack admin permissions. Global rulestack admin permissions can be enabled only if the AWS account is onboarded by AWS Firewall Manager. &#39;gra_arn&#39; is preferentially used over the `arn` param if both are specified. Environment variable: `CLOUDNGFWAWS_GRA_ARN`. JSON conf file variable: `gra-arn`.
     * 
     */
    public Optional<Output<String>> graArn() {
        return Optional.ofNullable(this.graArn);
    }

    /**
     * Additional HTTP headers to send with API calls. Environment variable: `CLOUDNGFWAWS_HEADERS`. JSON conf file variable: `headers`.
     * 
     */
    @Import(name="headers", json=true)
    private @Nullable Output<Map<String,String>> headers;

    /**
     * @return Additional HTTP headers to send with API calls. Environment variable: `CLOUDNGFWAWS_HEADERS`. JSON conf file variable: `headers`.
     * 
     */
    public Optional<Output<Map<String,String>>> headers() {
        return Optional.ofNullable(this.headers);
    }

    /**
     * The hostname of the API (default: `api.us-east-1.aws.cloudngfw.paloaltonetworks.com`). Environment variable: `CLOUDNGFWAWS_HOST`. JSON conf file variable: `host`.
     * 
     */
    @Import(name="host")
    private @Nullable Output<String> host;

    /**
     * @return The hostname of the API (default: `api.us-east-1.aws.cloudngfw.paloaltonetworks.com`). Environment variable: `CLOUDNGFWAWS_HOST`. JSON conf file variable: `host`.
     * 
     */
    public Optional<Output<String>> host() {
        return Optional.ofNullable(this.host);
    }

    /**
     * Retrieve provider configuration from this JSON file.
     * 
     */
    @Import(name="jsonConfigFile")
    private @Nullable Output<String> jsonConfigFile;

    /**
     * @return Retrieve provider configuration from this JSON file.
     * 
     */
    public Optional<Output<String>> jsonConfigFile() {
        return Optional.ofNullable(this.jsonConfigFile);
    }

    /**
     * The ARN allowing firewall admin permissions. This is preferentially used over the `arn` param if both are specified. Environment variable: `CLOUDNGFWAWS_LFA_ARN`. JSON conf file variable: `lfa-arn`.
     * 
     */
    @Import(name="lfaArn")
    private @Nullable Output<String> lfaArn;

    /**
     * @return The ARN allowing firewall admin permissions. This is preferentially used over the `arn` param if both are specified. Environment variable: `CLOUDNGFWAWS_LFA_ARN`. JSON conf file variable: `lfa-arn`.
     * 
     */
    public Optional<Output<String>> lfaArn() {
        return Optional.ofNullable(this.lfaArn);
    }

    /**
     * The logging options for the provider. Environment variable: `CLOUDNGFWAWS_LOGGING`. JSON conf file variable: `logging`.
     * 
     */
    @Import(name="loggings", json=true)
    private @Nullable Output<List<String>> loggings;

    /**
     * @return The logging options for the provider. Environment variable: `CLOUDNGFWAWS_LOGGING`. JSON conf file variable: `logging`.
     * 
     */
    public Optional<Output<List<String>>> loggings() {
        return Optional.ofNullable(this.loggings);
    }

    /**
     * The ARN allowing rulestack admin permissions. This is preferentially used over the `arn` param if both are specified. Environment variable: `CLOUDNGFWAWS_LRA_ARN`. JSON conf file variable: `lra-arn`.
     * 
     */
    @Import(name="lraArn")
    private @Nullable Output<String> lraArn;

    /**
     * @return The ARN allowing rulestack admin permissions. This is preferentially used over the `arn` param if both are specified. Environment variable: `CLOUDNGFWAWS_LRA_ARN`. JSON conf file variable: `lra-arn`.
     * 
     */
    public Optional<Output<String>> lraArn() {
        return Optional.ofNullable(this.lraArn);
    }

    /**
     * AWS management plane region. Environment variable: `CLOUDNGFWAWS_MP_REGION`. JSON conf file variable: `mpRegion`.
     * 
     */
    @Import(name="mpRegion")
    private @Nullable Output<String> mpRegion;

    /**
     * @return AWS management plane region. Environment variable: `CLOUDNGFWAWS_MP_REGION`. JSON conf file variable: `mpRegion`.
     * 
     */
    public Optional<Output<String>> mpRegion() {
        return Optional.ofNullable(this.mpRegion);
    }

    /**
     * AWS management plane MP region host Environment variable: `CLOUDNGFWAWS_MP_REGION_HOST`. JSON conf file variable: `mpRegionHost`.
     * 
     */
    @Import(name="mpRegionHost")
    private @Nullable Output<String> mpRegionHost;

    /**
     * @return AWS management plane MP region host Environment variable: `CLOUDNGFWAWS_MP_REGION_HOST`. JSON conf file variable: `mpRegionHost`.
     * 
     */
    public Optional<Output<String>> mpRegionHost() {
        return Optional.ofNullable(this.mpRegionHost);
    }

    /**
     * (Used for the initial `sts assume role`) AWS PROFILE. Environment variable: `CLOUDNGFWAWS_PROFILE`. JSON conf file variable: `profile`.
     * 
     */
    @Import(name="profile")
    private @Nullable Output<String> profile;

    /**
     * @return (Used for the initial `sts assume role`) AWS PROFILE. Environment variable: `CLOUDNGFWAWS_PROFILE`. JSON conf file variable: `profile`.
     * 
     */
    public Optional<Output<String>> profile() {
        return Optional.ofNullable(this.profile);
    }

    /**
     * The protocol (defaults to `https`). Environment variable: `CLOUDNGFWAWS_PROTOCOL`. JSON conf file variable: `protocol`. Valid values are `https` or `http`.
     * 
     */
    @Import(name="protocol")
    private @Nullable Output<String> protocol;

    /**
     * @return The protocol (defaults to `https`). Environment variable: `CLOUDNGFWAWS_PROTOCOL`. JSON conf file variable: `protocol`. Valid values are `https` or `http`.
     * 
     */
    public Optional<Output<String>> protocol() {
        return Optional.ofNullable(this.protocol);
    }

    /**
     * AWS region. Environment variable: `CLOUDNGFWAWS_REGION`. JSON conf file variable: `region`.
     * 
     */
    @Import(name="region")
    private @Nullable Output<String> region;

    /**
     * @return AWS region. Environment variable: `CLOUDNGFWAWS_REGION`. JSON conf file variable: `region`.
     * 
     */
    public Optional<Output<String>> region() {
        return Optional.ofNullable(this.region);
    }

    @Import(name="resourceTimeout", json=true)
    private @Nullable Output<Integer> resourceTimeout;

    public Optional<Output<Integer>> resourceTimeout() {
        return Optional.ofNullable(this.resourceTimeout);
    }

    /**
     * (Used for the initial `sts assume role`) AWS secret key. Environment variable: `CLOUDNGFWAWS_SECRET_KEY`. JSON conf file variable: `secret-key`.
     * 
     */
    @Import(name="secretKey")
    private @Nullable Output<String> secretKey;

    /**
     * @return (Used for the initial `sts assume role`) AWS secret key. Environment variable: `CLOUDNGFWAWS_SECRET_KEY`. JSON conf file variable: `secret-key`.
     * 
     */
    public Optional<Output<String>> secretKey() {
        return Optional.ofNullable(this.secretKey);
    }

    /**
     * Skip verifying the SSL certificate. Environment variable: `CLOUDNGFWAWS_SKIP_VERIFY_CERTIFICATE`. JSON conf file variable: `skip-verify-certificate`.
     * 
     */
    @Import(name="skipVerifyCertificate", json=true)
    private @Nullable Output<Boolean> skipVerifyCertificate;

    /**
     * @return Skip verifying the SSL certificate. Environment variable: `CLOUDNGFWAWS_SKIP_VERIFY_CERTIFICATE`. JSON conf file variable: `skip-verify-certificate`.
     * 
     */
    public Optional<Output<Boolean>> skipVerifyCertificate() {
        return Optional.ofNullable(this.skipVerifyCertificate);
    }

    /**
     * Enable synchronous mode while creating resources Environment variable: `CLOUDNGFWAWS_SYNC_MODE`. JSON conf file variable: `syncMode`.
     * 
     */
    @Import(name="syncMode", json=true)
    private @Nullable Output<Boolean> syncMode;

    /**
     * @return Enable synchronous mode while creating resources Environment variable: `CLOUDNGFWAWS_SYNC_MODE`. JSON conf file variable: `syncMode`.
     * 
     */
    public Optional<Output<Boolean>> syncMode() {
        return Optional.ofNullable(this.syncMode);
    }

    /**
     * The timeout for any single API call (default: `30`). Environment variable: `CLOUDNGFWAWS_TIMEOUT`. JSON conf file variable: `timeout`.
     * 
     */
    @Import(name="timeout", json=true)
    private @Nullable Output<Integer> timeout;

    /**
     * @return The timeout for any single API call (default: `30`). Environment variable: `CLOUDNGFWAWS_TIMEOUT`. JSON conf file variable: `timeout`.
     * 
     */
    public Optional<Output<Integer>> timeout() {
        return Optional.ofNullable(this.timeout);
    }

    private ProviderArgs() {}

    private ProviderArgs(ProviderArgs $) {
        this.accessKey = $.accessKey;
        this.accountAdminArn = $.accountAdminArn;
        this.arn = $.arn;
        this.graArn = $.graArn;
        this.headers = $.headers;
        this.host = $.host;
        this.jsonConfigFile = $.jsonConfigFile;
        this.lfaArn = $.lfaArn;
        this.loggings = $.loggings;
        this.lraArn = $.lraArn;
        this.mpRegion = $.mpRegion;
        this.mpRegionHost = $.mpRegionHost;
        this.profile = $.profile;
        this.protocol = $.protocol;
        this.region = $.region;
        this.resourceTimeout = $.resourceTimeout;
        this.secretKey = $.secretKey;
        this.skipVerifyCertificate = $.skipVerifyCertificate;
        this.syncMode = $.syncMode;
        this.timeout = $.timeout;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ProviderArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ProviderArgs $;

        public Builder() {
            $ = new ProviderArgs();
        }

        public Builder(ProviderArgs defaults) {
            $ = new ProviderArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param accessKey (Used for the initial `sts assume role`) AWS access key. Environment variable: `CLOUDNGFWAWS_ACCESS_KEY`. JSON conf file variable: `access-key`.
         * 
         * @return builder
         * 
         */
        public Builder accessKey(@Nullable Output<String> accessKey) {
            $.accessKey = accessKey;
            return this;
        }

        /**
         * @param accessKey (Used for the initial `sts assume role`) AWS access key. Environment variable: `CLOUDNGFWAWS_ACCESS_KEY`. JSON conf file variable: `access-key`.
         * 
         * @return builder
         * 
         */
        public Builder accessKey(String accessKey) {
            return accessKey(Output.of(accessKey));
        }

        /**
         * @param accountAdminArn The ARN allowing account admin permissions. Environment variable: `CLOUDNGFWAWS_ACCT_ADMIN_ARN`. JSON conf file variable: `account-admin-arn`.
         * 
         * @return builder
         * 
         */
        public Builder accountAdminArn(@Nullable Output<String> accountAdminArn) {
            $.accountAdminArn = accountAdminArn;
            return this;
        }

        /**
         * @param accountAdminArn The ARN allowing account admin permissions. Environment variable: `CLOUDNGFWAWS_ACCT_ADMIN_ARN`. JSON conf file variable: `account-admin-arn`.
         * 
         * @return builder
         * 
         */
        public Builder accountAdminArn(String accountAdminArn) {
            return accountAdminArn(Output.of(accountAdminArn));
        }

        /**
         * @param arn The ARN allowing firewall, rulestack, and global rulestack admin permissions. Global rulestack admin permissions can be enabled only if the AWS account is onboarded by AWS Firewall Manager. Use &#39;lfa_arn&#39; and &#39;lra_arn&#39; if you want to enable only firewall and rulestack admin permissions. Environment variable: `CLOUDNGFWAWS_ARN`. JSON conf file variable: `arn`.
         * 
         * @return builder
         * 
         */
        public Builder arn(@Nullable Output<String> arn) {
            $.arn = arn;
            return this;
        }

        /**
         * @param arn The ARN allowing firewall, rulestack, and global rulestack admin permissions. Global rulestack admin permissions can be enabled only if the AWS account is onboarded by AWS Firewall Manager. Use &#39;lfa_arn&#39; and &#39;lra_arn&#39; if you want to enable only firewall and rulestack admin permissions. Environment variable: `CLOUDNGFWAWS_ARN`. JSON conf file variable: `arn`.
         * 
         * @return builder
         * 
         */
        public Builder arn(String arn) {
            return arn(Output.of(arn));
        }

        /**
         * @param graArn The ARN allowing global rulestack admin permissions. Global rulestack admin permissions can be enabled only if the AWS account is onboarded by AWS Firewall Manager. &#39;gra_arn&#39; is preferentially used over the `arn` param if both are specified. Environment variable: `CLOUDNGFWAWS_GRA_ARN`. JSON conf file variable: `gra-arn`.
         * 
         * @return builder
         * 
         */
        public Builder graArn(@Nullable Output<String> graArn) {
            $.graArn = graArn;
            return this;
        }

        /**
         * @param graArn The ARN allowing global rulestack admin permissions. Global rulestack admin permissions can be enabled only if the AWS account is onboarded by AWS Firewall Manager. &#39;gra_arn&#39; is preferentially used over the `arn` param if both are specified. Environment variable: `CLOUDNGFWAWS_GRA_ARN`. JSON conf file variable: `gra-arn`.
         * 
         * @return builder
         * 
         */
        public Builder graArn(String graArn) {
            return graArn(Output.of(graArn));
        }

        /**
         * @param headers Additional HTTP headers to send with API calls. Environment variable: `CLOUDNGFWAWS_HEADERS`. JSON conf file variable: `headers`.
         * 
         * @return builder
         * 
         */
        public Builder headers(@Nullable Output<Map<String,String>> headers) {
            $.headers = headers;
            return this;
        }

        /**
         * @param headers Additional HTTP headers to send with API calls. Environment variable: `CLOUDNGFWAWS_HEADERS`. JSON conf file variable: `headers`.
         * 
         * @return builder
         * 
         */
        public Builder headers(Map<String,String> headers) {
            return headers(Output.of(headers));
        }

        /**
         * @param host The hostname of the API (default: `api.us-east-1.aws.cloudngfw.paloaltonetworks.com`). Environment variable: `CLOUDNGFWAWS_HOST`. JSON conf file variable: `host`.
         * 
         * @return builder
         * 
         */
        public Builder host(@Nullable Output<String> host) {
            $.host = host;
            return this;
        }

        /**
         * @param host The hostname of the API (default: `api.us-east-1.aws.cloudngfw.paloaltonetworks.com`). Environment variable: `CLOUDNGFWAWS_HOST`. JSON conf file variable: `host`.
         * 
         * @return builder
         * 
         */
        public Builder host(String host) {
            return host(Output.of(host));
        }

        /**
         * @param jsonConfigFile Retrieve provider configuration from this JSON file.
         * 
         * @return builder
         * 
         */
        public Builder jsonConfigFile(@Nullable Output<String> jsonConfigFile) {
            $.jsonConfigFile = jsonConfigFile;
            return this;
        }

        /**
         * @param jsonConfigFile Retrieve provider configuration from this JSON file.
         * 
         * @return builder
         * 
         */
        public Builder jsonConfigFile(String jsonConfigFile) {
            return jsonConfigFile(Output.of(jsonConfigFile));
        }

        /**
         * @param lfaArn The ARN allowing firewall admin permissions. This is preferentially used over the `arn` param if both are specified. Environment variable: `CLOUDNGFWAWS_LFA_ARN`. JSON conf file variable: `lfa-arn`.
         * 
         * @return builder
         * 
         */
        public Builder lfaArn(@Nullable Output<String> lfaArn) {
            $.lfaArn = lfaArn;
            return this;
        }

        /**
         * @param lfaArn The ARN allowing firewall admin permissions. This is preferentially used over the `arn` param if both are specified. Environment variable: `CLOUDNGFWAWS_LFA_ARN`. JSON conf file variable: `lfa-arn`.
         * 
         * @return builder
         * 
         */
        public Builder lfaArn(String lfaArn) {
            return lfaArn(Output.of(lfaArn));
        }

        /**
         * @param loggings The logging options for the provider. Environment variable: `CLOUDNGFWAWS_LOGGING`. JSON conf file variable: `logging`.
         * 
         * @return builder
         * 
         */
        public Builder loggings(@Nullable Output<List<String>> loggings) {
            $.loggings = loggings;
            return this;
        }

        /**
         * @param loggings The logging options for the provider. Environment variable: `CLOUDNGFWAWS_LOGGING`. JSON conf file variable: `logging`.
         * 
         * @return builder
         * 
         */
        public Builder loggings(List<String> loggings) {
            return loggings(Output.of(loggings));
        }

        /**
         * @param loggings The logging options for the provider. Environment variable: `CLOUDNGFWAWS_LOGGING`. JSON conf file variable: `logging`.
         * 
         * @return builder
         * 
         */
        public Builder loggings(String... loggings) {
            return loggings(List.of(loggings));
        }

        /**
         * @param lraArn The ARN allowing rulestack admin permissions. This is preferentially used over the `arn` param if both are specified. Environment variable: `CLOUDNGFWAWS_LRA_ARN`. JSON conf file variable: `lra-arn`.
         * 
         * @return builder
         * 
         */
        public Builder lraArn(@Nullable Output<String> lraArn) {
            $.lraArn = lraArn;
            return this;
        }

        /**
         * @param lraArn The ARN allowing rulestack admin permissions. This is preferentially used over the `arn` param if both are specified. Environment variable: `CLOUDNGFWAWS_LRA_ARN`. JSON conf file variable: `lra-arn`.
         * 
         * @return builder
         * 
         */
        public Builder lraArn(String lraArn) {
            return lraArn(Output.of(lraArn));
        }

        /**
         * @param mpRegion AWS management plane region. Environment variable: `CLOUDNGFWAWS_MP_REGION`. JSON conf file variable: `mpRegion`.
         * 
         * @return builder
         * 
         */
        public Builder mpRegion(@Nullable Output<String> mpRegion) {
            $.mpRegion = mpRegion;
            return this;
        }

        /**
         * @param mpRegion AWS management plane region. Environment variable: `CLOUDNGFWAWS_MP_REGION`. JSON conf file variable: `mpRegion`.
         * 
         * @return builder
         * 
         */
        public Builder mpRegion(String mpRegion) {
            return mpRegion(Output.of(mpRegion));
        }

        /**
         * @param mpRegionHost AWS management plane MP region host Environment variable: `CLOUDNGFWAWS_MP_REGION_HOST`. JSON conf file variable: `mpRegionHost`.
         * 
         * @return builder
         * 
         */
        public Builder mpRegionHost(@Nullable Output<String> mpRegionHost) {
            $.mpRegionHost = mpRegionHost;
            return this;
        }

        /**
         * @param mpRegionHost AWS management plane MP region host Environment variable: `CLOUDNGFWAWS_MP_REGION_HOST`. JSON conf file variable: `mpRegionHost`.
         * 
         * @return builder
         * 
         */
        public Builder mpRegionHost(String mpRegionHost) {
            return mpRegionHost(Output.of(mpRegionHost));
        }

        /**
         * @param profile (Used for the initial `sts assume role`) AWS PROFILE. Environment variable: `CLOUDNGFWAWS_PROFILE`. JSON conf file variable: `profile`.
         * 
         * @return builder
         * 
         */
        public Builder profile(@Nullable Output<String> profile) {
            $.profile = profile;
            return this;
        }

        /**
         * @param profile (Used for the initial `sts assume role`) AWS PROFILE. Environment variable: `CLOUDNGFWAWS_PROFILE`. JSON conf file variable: `profile`.
         * 
         * @return builder
         * 
         */
        public Builder profile(String profile) {
            return profile(Output.of(profile));
        }

        /**
         * @param protocol The protocol (defaults to `https`). Environment variable: `CLOUDNGFWAWS_PROTOCOL`. JSON conf file variable: `protocol`. Valid values are `https` or `http`.
         * 
         * @return builder
         * 
         */
        public Builder protocol(@Nullable Output<String> protocol) {
            $.protocol = protocol;
            return this;
        }

        /**
         * @param protocol The protocol (defaults to `https`). Environment variable: `CLOUDNGFWAWS_PROTOCOL`. JSON conf file variable: `protocol`. Valid values are `https` or `http`.
         * 
         * @return builder
         * 
         */
        public Builder protocol(String protocol) {
            return protocol(Output.of(protocol));
        }

        /**
         * @param region AWS region. Environment variable: `CLOUDNGFWAWS_REGION`. JSON conf file variable: `region`.
         * 
         * @return builder
         * 
         */
        public Builder region(@Nullable Output<String> region) {
            $.region = region;
            return this;
        }

        /**
         * @param region AWS region. Environment variable: `CLOUDNGFWAWS_REGION`. JSON conf file variable: `region`.
         * 
         * @return builder
         * 
         */
        public Builder region(String region) {
            return region(Output.of(region));
        }

        public Builder resourceTimeout(@Nullable Output<Integer> resourceTimeout) {
            $.resourceTimeout = resourceTimeout;
            return this;
        }

        public Builder resourceTimeout(Integer resourceTimeout) {
            return resourceTimeout(Output.of(resourceTimeout));
        }

        /**
         * @param secretKey (Used for the initial `sts assume role`) AWS secret key. Environment variable: `CLOUDNGFWAWS_SECRET_KEY`. JSON conf file variable: `secret-key`.
         * 
         * @return builder
         * 
         */
        public Builder secretKey(@Nullable Output<String> secretKey) {
            $.secretKey = secretKey;
            return this;
        }

        /**
         * @param secretKey (Used for the initial `sts assume role`) AWS secret key. Environment variable: `CLOUDNGFWAWS_SECRET_KEY`. JSON conf file variable: `secret-key`.
         * 
         * @return builder
         * 
         */
        public Builder secretKey(String secretKey) {
            return secretKey(Output.of(secretKey));
        }

        /**
         * @param skipVerifyCertificate Skip verifying the SSL certificate. Environment variable: `CLOUDNGFWAWS_SKIP_VERIFY_CERTIFICATE`. JSON conf file variable: `skip-verify-certificate`.
         * 
         * @return builder
         * 
         */
        public Builder skipVerifyCertificate(@Nullable Output<Boolean> skipVerifyCertificate) {
            $.skipVerifyCertificate = skipVerifyCertificate;
            return this;
        }

        /**
         * @param skipVerifyCertificate Skip verifying the SSL certificate. Environment variable: `CLOUDNGFWAWS_SKIP_VERIFY_CERTIFICATE`. JSON conf file variable: `skip-verify-certificate`.
         * 
         * @return builder
         * 
         */
        public Builder skipVerifyCertificate(Boolean skipVerifyCertificate) {
            return skipVerifyCertificate(Output.of(skipVerifyCertificate));
        }

        /**
         * @param syncMode Enable synchronous mode while creating resources Environment variable: `CLOUDNGFWAWS_SYNC_MODE`. JSON conf file variable: `syncMode`.
         * 
         * @return builder
         * 
         */
        public Builder syncMode(@Nullable Output<Boolean> syncMode) {
            $.syncMode = syncMode;
            return this;
        }

        /**
         * @param syncMode Enable synchronous mode while creating resources Environment variable: `CLOUDNGFWAWS_SYNC_MODE`. JSON conf file variable: `syncMode`.
         * 
         * @return builder
         * 
         */
        public Builder syncMode(Boolean syncMode) {
            return syncMode(Output.of(syncMode));
        }

        /**
         * @param timeout The timeout for any single API call (default: `30`). Environment variable: `CLOUDNGFWAWS_TIMEOUT`. JSON conf file variable: `timeout`.
         * 
         * @return builder
         * 
         */
        public Builder timeout(@Nullable Output<Integer> timeout) {
            $.timeout = timeout;
            return this;
        }

        /**
         * @param timeout The timeout for any single API call (default: `30`). Environment variable: `CLOUDNGFWAWS_TIMEOUT`. JSON conf file variable: `timeout`.
         * 
         * @return builder
         * 
         */
        public Builder timeout(Integer timeout) {
            return timeout(Output.of(timeout));
        }

        public ProviderArgs build() {
            return $;
        }
    }

}
