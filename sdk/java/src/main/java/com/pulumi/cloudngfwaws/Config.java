// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.cloudngfwaws;

import com.pulumi.core.TypeShape;
import com.pulumi.core.internal.Codegen;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Optional;

public final class Config {

    private static final com.pulumi.Config config = com.pulumi.Config.of("cloudngfwaws");
/**
 * (Used for the initial `sts assume role`) AWS access key. Environment variable: `CLOUDNGFWAWS_ACCESS_KEY`. JSON conf file variable: `access-key`.
 * 
 */
    public Optional<String> accessKey() {
        return Codegen.stringProp("accessKey").config(config).get();
    }
/**
 * The ARN allowing account admin permissions. Environment variable: `CLOUDNGFWAWS_ACCT_ADMIN_ARN`. JSON conf file variable: `account-admin-arn`.
 * 
 */
    public Optional<String> accountAdminArn() {
        return Codegen.stringProp("accountAdminArn").config(config).get();
    }
/**
 * The ARN allowing firewall, rulestack, and global rulestack admin permissions. Global rulestack admin permissions can be enabled only if the AWS account is onboarded by AWS Firewall Manager. Use &#39;lfa_arn&#39; and &#39;lra_arn&#39; if you want to enable only firewall and rulestack admin permissions. Environment variable: `CLOUDNGFWAWS_ARN`. JSON conf file variable: `arn`.
 * 
 */
    public Optional<String> arn() {
        return Codegen.stringProp("arn").config(config).get();
    }
/**
 * The ARN allowing global rulestack admin permissions. Global rulestack admin permissions can be enabled only if the AWS account is onboarded by AWS Firewall Manager. &#39;gra_arn&#39; is preferentially used over the `arn` param if both are specified. Environment variable: `CLOUDNGFWAWS_GRA_ARN`. JSON conf file variable: `gra-arn`.
 * 
 */
    public Optional<String> graArn() {
        return Codegen.stringProp("graArn").config(config).get();
    }
/**
 * Additional HTTP headers to send with API calls. Environment variable: `CLOUDNGFWAWS_HEADERS`. JSON conf file variable: `headers`.
 * 
 */
    public Optional<Map<String,String>> headers() {
        return Codegen.objectProp("headers", TypeShape.<Map<String,String>>builder(Map.class).addParameter(String.class).addParameter(String.class).build()).config(config).get();
    }
/**
 * The hostname of the API (default: `api.us-east-1.aws.cloudngfw.paloaltonetworks.com`). Environment variable: `CLOUDNGFWAWS_HOST`. JSON conf file variable: `host`.
 * 
 */
    public Optional<String> host() {
        return Codegen.stringProp("host").config(config).get();
    }
/**
 * Retrieve provider configuration from this JSON file.
 * 
 */
    public Optional<String> jsonConfigFile() {
        return Codegen.stringProp("jsonConfigFile").config(config).get();
    }
/**
 * The ARN allowing firewall admin permissions. This is preferentially used over the `arn` param if both are specified. Environment variable: `CLOUDNGFWAWS_LFA_ARN`. JSON conf file variable: `lfa-arn`.
 * 
 */
    public Optional<String> lfaArn() {
        return Codegen.stringProp("lfaArn").config(config).get();
    }
/**
 * The logging options for the provider. Environment variable: `CLOUDNGFWAWS_LOGGING`. JSON conf file variable: `logging`.
 * 
 */
    public Optional<List<String>> loggings() {
        return Codegen.objectProp("loggings", TypeShape.<List<String>>builder(List.class).addParameter(String.class).build()).config(config).get();
    }
/**
 * The ARN allowing rulestack admin permissions. This is preferentially used over the `arn` param if both are specified. Environment variable: `CLOUDNGFWAWS_LRA_ARN`. JSON conf file variable: `lra-arn`.
 * 
 */
    public Optional<String> lraArn() {
        return Codegen.stringProp("lraArn").config(config).get();
    }
/**
 * AWS management plane region. Environment variable: `CLOUDNGFWAWS_MP_REGION`. JSON conf file variable: `mp_region`.
 * 
 */
    public Optional<String> mpRegion() {
        return Codegen.stringProp("mpRegion").config(config).get();
    }
/**
 * AWS management plane MP region host Environment variable: `CLOUDNGFWAWS_MP_REGION_HOST`. JSON conf file variable: `mp_region_host`.
 * 
 */
    public Optional<String> mpRegionHost() {
        return Codegen.stringProp("mpRegionHost").config(config).get();
    }
/**
 * (Used for the initial `sts assume role`) AWS PROFILE. Environment variable: `CLOUDNGFWAWS_PROFILE`. JSON conf file variable: `profile`.
 * 
 */
    public Optional<String> profile() {
        return Codegen.stringProp("profile").config(config).get();
    }
/**
 * The protocol (defaults to `https`). Environment variable: `CLOUDNGFWAWS_PROTOCOL`. JSON conf file variable: `protocol`. Valid values are `https` or `http`.
 * 
 */
    public Optional<String> protocol() {
        return Codegen.stringProp("protocol").config(config).get();
    }
/**
 * AWS region. Environment variable: `CLOUDNGFWAWS_REGION`. JSON conf file variable: `region`.
 * 
 */
    public Optional<String> region() {
        return Codegen.stringProp("region").config(config).get();
    }
    public Optional<Integer> resourceTimeout() {
        return Codegen.integerProp("resourceTimeout").config(config).get();
    }
/**
 * (Used for the initial `sts assume role`) AWS secret key. Environment variable: `CLOUDNGFWAWS_SECRET_KEY`. JSON conf file variable: `secret-key`.
 * 
 */
    public Optional<String> secretKey() {
        return Codegen.stringProp("secretKey").config(config).get();
    }
/**
 * Skip verifying the SSL certificate. Environment variable: `CLOUDNGFWAWS_SKIP_VERIFY_CERTIFICATE`. JSON conf file variable: `skip-verify-certificate`.
 * 
 */
    public Optional<Boolean> skipVerifyCertificate() {
        return Codegen.booleanProp("skipVerifyCertificate").config(config).get();
    }
/**
 * Enable synchronous mode while creating resources Environment variable: `CLOUDNGFWAWS_SYNC_MODE`. JSON conf file variable: `sync_mode`.
 * 
 */
    public Optional<Boolean> syncMode() {
        return Codegen.booleanProp("syncMode").config(config).get();
    }
/**
 * The timeout for any single API call (default: `30`). Environment variable: `CLOUDNGFWAWS_TIMEOUT`. JSON conf file variable: `timeout`.
 * 
 */
    public Optional<Integer> timeout() {
        return Codegen.integerProp("timeout").config(config).get();
    }
}
