// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.cloudngfwaws.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetValidateRulestackResult {
    /**
     * @return Commit error messages.
     * 
     */
    private List<String> commitErrors;
    /**
     * @return The commit status.
     * 
     */
    private String commitStatus;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    /**
     * @return The rulestack.
     * 
     */
    private String rulestack;
    /**
     * @return The rulestack&#39;s scope. A local rulestack will require that you&#39;ve retrieved a LRA JWT. A global rulestack will require that you&#39;ve retrieved a GRA JWT. Valid values are `Local` or `Global`. Defaults to `Local`.
     * 
     */
    private @Nullable String scope;
    /**
     * @return The rulestack state.
     * 
     */
    private String state;
    /**
     * @return Validation error messages.
     * 
     */
    private List<String> validationErrors;
    /**
     * @return The validation status.
     * 
     */
    private String validationStatus;

    private GetValidateRulestackResult() {}
    /**
     * @return Commit error messages.
     * 
     */
    public List<String> commitErrors() {
        return this.commitErrors;
    }
    /**
     * @return The commit status.
     * 
     */
    public String commitStatus() {
        return this.commitStatus;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return The rulestack.
     * 
     */
    public String rulestack() {
        return this.rulestack;
    }
    /**
     * @return The rulestack&#39;s scope. A local rulestack will require that you&#39;ve retrieved a LRA JWT. A global rulestack will require that you&#39;ve retrieved a GRA JWT. Valid values are `Local` or `Global`. Defaults to `Local`.
     * 
     */
    public Optional<String> scope() {
        return Optional.ofNullable(this.scope);
    }
    /**
     * @return The rulestack state.
     * 
     */
    public String state() {
        return this.state;
    }
    /**
     * @return Validation error messages.
     * 
     */
    public List<String> validationErrors() {
        return this.validationErrors;
    }
    /**
     * @return The validation status.
     * 
     */
    public String validationStatus() {
        return this.validationStatus;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetValidateRulestackResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private List<String> commitErrors;
        private String commitStatus;
        private String id;
        private String rulestack;
        private @Nullable String scope;
        private String state;
        private List<String> validationErrors;
        private String validationStatus;
        public Builder() {}
        public Builder(GetValidateRulestackResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.commitErrors = defaults.commitErrors;
    	      this.commitStatus = defaults.commitStatus;
    	      this.id = defaults.id;
    	      this.rulestack = defaults.rulestack;
    	      this.scope = defaults.scope;
    	      this.state = defaults.state;
    	      this.validationErrors = defaults.validationErrors;
    	      this.validationStatus = defaults.validationStatus;
        }

        @CustomType.Setter
        public Builder commitErrors(List<String> commitErrors) {
            if (commitErrors == null) {
              throw new MissingRequiredPropertyException("GetValidateRulestackResult", "commitErrors");
            }
            this.commitErrors = commitErrors;
            return this;
        }
        public Builder commitErrors(String... commitErrors) {
            return commitErrors(List.of(commitErrors));
        }
        @CustomType.Setter
        public Builder commitStatus(String commitStatus) {
            if (commitStatus == null) {
              throw new MissingRequiredPropertyException("GetValidateRulestackResult", "commitStatus");
            }
            this.commitStatus = commitStatus;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetValidateRulestackResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder rulestack(String rulestack) {
            if (rulestack == null) {
              throw new MissingRequiredPropertyException("GetValidateRulestackResult", "rulestack");
            }
            this.rulestack = rulestack;
            return this;
        }
        @CustomType.Setter
        public Builder scope(@Nullable String scope) {

            this.scope = scope;
            return this;
        }
        @CustomType.Setter
        public Builder state(String state) {
            if (state == null) {
              throw new MissingRequiredPropertyException("GetValidateRulestackResult", "state");
            }
            this.state = state;
            return this;
        }
        @CustomType.Setter
        public Builder validationErrors(List<String> validationErrors) {
            if (validationErrors == null) {
              throw new MissingRequiredPropertyException("GetValidateRulestackResult", "validationErrors");
            }
            this.validationErrors = validationErrors;
            return this;
        }
        public Builder validationErrors(String... validationErrors) {
            return validationErrors(List.of(validationErrors));
        }
        @CustomType.Setter
        public Builder validationStatus(String validationStatus) {
            if (validationStatus == null) {
              throw new MissingRequiredPropertyException("GetValidateRulestackResult", "validationStatus");
            }
            this.validationStatus = validationStatus;
            return this;
        }
        public GetValidateRulestackResult build() {
            final var _resultValue = new GetValidateRulestackResult();
            _resultValue.commitErrors = commitErrors;
            _resultValue.commitStatus = commitStatus;
            _resultValue.id = id;
            _resultValue.rulestack = rulestack;
            _resultValue.scope = scope;
            _resultValue.state = state;
            _resultValue.validationErrors = validationErrors;
            _resultValue.validationStatus = validationStatus;
            return _resultValue;
        }
    }
}
