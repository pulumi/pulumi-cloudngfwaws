// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.cloudngfwaws.outputs;

import com.pulumi.cloudngfwaws.outputs.GetSecurityRuleCategory;
import com.pulumi.cloudngfwaws.outputs.GetSecurityRuleDestination;
import com.pulumi.cloudngfwaws.outputs.GetSecurityRuleSource;
import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetSecurityRuleResult {
    /**
     * @return The action to take. Valid values are `Allow`, `DenySilent`, `DenyResetServer`, or `DenyResetBoth`.
     * 
     */
    private String action;
    /**
     * @return The list of applications.
     * 
     */
    private List<String> applications;
    /**
     * @return The audit comment.
     * 
     */
    private String auditComment;
    /**
     * @return The category spec.
     * 
     */
    private List<GetSecurityRuleCategory> categories;
    /**
     * @return Retrieve either the candidate or running config. Valid values are `candidate` or `running`. Defaults to `candidate`.
     * 
     */
    private @Nullable String configType;
    /**
     * @return Decryption rule type. Valid values are ``or`SSLOutboundInspection`.
     * 
     */
    private String decryptionRuleType;
    /**
     * @return The description.
     * 
     */
    private String description;
    /**
     * @return The destination spec.
     * 
     */
    private List<GetSecurityRuleDestination> destinations;
    /**
     * @return Set to false to disable this rule.
     * 
     */
    private Boolean enabled;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    /**
     * @return Enable logging at end.
     * 
     */
    private Boolean logging;
    /**
     * @return The name.
     * 
     */
    private String name;
    /**
     * @return Negate the destination definition.
     * 
     */
    private Boolean negateDestination;
    /**
     * @return Negate the source definition.
     * 
     */
    private Boolean negateSource;
    /**
     * @return The rule priority.
     * 
     */
    private Integer priority;
    /**
     * @return Protocol port list.
     * 
     */
    private List<String> protPortLists;
    /**
     * @return The protocol.
     * 
     */
    private String protocol;
    /**
     * @return The rulebase. Valid values are `PreRule`, `PostRule`, or `LocalRule`. Defaults to `PreRule`.
     * 
     */
    private @Nullable String ruleList;
    /**
     * @return The rulestack.
     * 
     */
    private String rulestack;
    /**
     * @return The rulestack&#39;s scope. A local rulestack will require that you&#39;ve retrieved a LRA JWT. A global rulestack will require that you&#39;ve retrieved a GRA JWT. Valid values are `Local` or `Global`. Defaults to `Local`.
     * 
     */
    private @Nullable String scope;
    /**
     * @return The source spec.
     * 
     */
    private List<GetSecurityRuleSource> sources;
    /**
     * @return The tags.
     * 
     */
    private Map<String,String> tags;
    /**
     * @return The update token.
     * 
     */
    private String updateToken;

    private GetSecurityRuleResult() {}
    /**
     * @return The action to take. Valid values are `Allow`, `DenySilent`, `DenyResetServer`, or `DenyResetBoth`.
     * 
     */
    public String action() {
        return this.action;
    }
    /**
     * @return The list of applications.
     * 
     */
    public List<String> applications() {
        return this.applications;
    }
    /**
     * @return The audit comment.
     * 
     */
    public String auditComment() {
        return this.auditComment;
    }
    /**
     * @return The category spec.
     * 
     */
    public List<GetSecurityRuleCategory> categories() {
        return this.categories;
    }
    /**
     * @return Retrieve either the candidate or running config. Valid values are `candidate` or `running`. Defaults to `candidate`.
     * 
     */
    public Optional<String> configType() {
        return Optional.ofNullable(this.configType);
    }
    /**
     * @return Decryption rule type. Valid values are ``or`SSLOutboundInspection`.
     * 
     */
    public String decryptionRuleType() {
        return this.decryptionRuleType;
    }
    /**
     * @return The description.
     * 
     */
    public String description() {
        return this.description;
    }
    /**
     * @return The destination spec.
     * 
     */
    public List<GetSecurityRuleDestination> destinations() {
        return this.destinations;
    }
    /**
     * @return Set to false to disable this rule.
     * 
     */
    public Boolean enabled() {
        return this.enabled;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return Enable logging at end.
     * 
     */
    public Boolean logging() {
        return this.logging;
    }
    /**
     * @return The name.
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return Negate the destination definition.
     * 
     */
    public Boolean negateDestination() {
        return this.negateDestination;
    }
    /**
     * @return Negate the source definition.
     * 
     */
    public Boolean negateSource() {
        return this.negateSource;
    }
    /**
     * @return The rule priority.
     * 
     */
    public Integer priority() {
        return this.priority;
    }
    /**
     * @return Protocol port list.
     * 
     */
    public List<String> protPortLists() {
        return this.protPortLists;
    }
    /**
     * @return The protocol.
     * 
     */
    public String protocol() {
        return this.protocol;
    }
    /**
     * @return The rulebase. Valid values are `PreRule`, `PostRule`, or `LocalRule`. Defaults to `PreRule`.
     * 
     */
    public Optional<String> ruleList() {
        return Optional.ofNullable(this.ruleList);
    }
    /**
     * @return The rulestack.
     * 
     */
    public String rulestack() {
        return this.rulestack;
    }
    /**
     * @return The rulestack&#39;s scope. A local rulestack will require that you&#39;ve retrieved a LRA JWT. A global rulestack will require that you&#39;ve retrieved a GRA JWT. Valid values are `Local` or `Global`. Defaults to `Local`.
     * 
     */
    public Optional<String> scope() {
        return Optional.ofNullable(this.scope);
    }
    /**
     * @return The source spec.
     * 
     */
    public List<GetSecurityRuleSource> sources() {
        return this.sources;
    }
    /**
     * @return The tags.
     * 
     */
    public Map<String,String> tags() {
        return this.tags;
    }
    /**
     * @return The update token.
     * 
     */
    public String updateToken() {
        return this.updateToken;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetSecurityRuleResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String action;
        private List<String> applications;
        private String auditComment;
        private List<GetSecurityRuleCategory> categories;
        private @Nullable String configType;
        private String decryptionRuleType;
        private String description;
        private List<GetSecurityRuleDestination> destinations;
        private Boolean enabled;
        private String id;
        private Boolean logging;
        private String name;
        private Boolean negateDestination;
        private Boolean negateSource;
        private Integer priority;
        private List<String> protPortLists;
        private String protocol;
        private @Nullable String ruleList;
        private String rulestack;
        private @Nullable String scope;
        private List<GetSecurityRuleSource> sources;
        private Map<String,String> tags;
        private String updateToken;
        public Builder() {}
        public Builder(GetSecurityRuleResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.action = defaults.action;
    	      this.applications = defaults.applications;
    	      this.auditComment = defaults.auditComment;
    	      this.categories = defaults.categories;
    	      this.configType = defaults.configType;
    	      this.decryptionRuleType = defaults.decryptionRuleType;
    	      this.description = defaults.description;
    	      this.destinations = defaults.destinations;
    	      this.enabled = defaults.enabled;
    	      this.id = defaults.id;
    	      this.logging = defaults.logging;
    	      this.name = defaults.name;
    	      this.negateDestination = defaults.negateDestination;
    	      this.negateSource = defaults.negateSource;
    	      this.priority = defaults.priority;
    	      this.protPortLists = defaults.protPortLists;
    	      this.protocol = defaults.protocol;
    	      this.ruleList = defaults.ruleList;
    	      this.rulestack = defaults.rulestack;
    	      this.scope = defaults.scope;
    	      this.sources = defaults.sources;
    	      this.tags = defaults.tags;
    	      this.updateToken = defaults.updateToken;
        }

        @CustomType.Setter
        public Builder action(String action) {
            if (action == null) {
              throw new MissingRequiredPropertyException("GetSecurityRuleResult", "action");
            }
            this.action = action;
            return this;
        }
        @CustomType.Setter
        public Builder applications(List<String> applications) {
            if (applications == null) {
              throw new MissingRequiredPropertyException("GetSecurityRuleResult", "applications");
            }
            this.applications = applications;
            return this;
        }
        public Builder applications(String... applications) {
            return applications(List.of(applications));
        }
        @CustomType.Setter
        public Builder auditComment(String auditComment) {
            if (auditComment == null) {
              throw new MissingRequiredPropertyException("GetSecurityRuleResult", "auditComment");
            }
            this.auditComment = auditComment;
            return this;
        }
        @CustomType.Setter
        public Builder categories(List<GetSecurityRuleCategory> categories) {
            if (categories == null) {
              throw new MissingRequiredPropertyException("GetSecurityRuleResult", "categories");
            }
            this.categories = categories;
            return this;
        }
        public Builder categories(GetSecurityRuleCategory... categories) {
            return categories(List.of(categories));
        }
        @CustomType.Setter
        public Builder configType(@Nullable String configType) {

            this.configType = configType;
            return this;
        }
        @CustomType.Setter
        public Builder decryptionRuleType(String decryptionRuleType) {
            if (decryptionRuleType == null) {
              throw new MissingRequiredPropertyException("GetSecurityRuleResult", "decryptionRuleType");
            }
            this.decryptionRuleType = decryptionRuleType;
            return this;
        }
        @CustomType.Setter
        public Builder description(String description) {
            if (description == null) {
              throw new MissingRequiredPropertyException("GetSecurityRuleResult", "description");
            }
            this.description = description;
            return this;
        }
        @CustomType.Setter
        public Builder destinations(List<GetSecurityRuleDestination> destinations) {
            if (destinations == null) {
              throw new MissingRequiredPropertyException("GetSecurityRuleResult", "destinations");
            }
            this.destinations = destinations;
            return this;
        }
        public Builder destinations(GetSecurityRuleDestination... destinations) {
            return destinations(List.of(destinations));
        }
        @CustomType.Setter
        public Builder enabled(Boolean enabled) {
            if (enabled == null) {
              throw new MissingRequiredPropertyException("GetSecurityRuleResult", "enabled");
            }
            this.enabled = enabled;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetSecurityRuleResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder logging(Boolean logging) {
            if (logging == null) {
              throw new MissingRequiredPropertyException("GetSecurityRuleResult", "logging");
            }
            this.logging = logging;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("GetSecurityRuleResult", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder negateDestination(Boolean negateDestination) {
            if (negateDestination == null) {
              throw new MissingRequiredPropertyException("GetSecurityRuleResult", "negateDestination");
            }
            this.negateDestination = negateDestination;
            return this;
        }
        @CustomType.Setter
        public Builder negateSource(Boolean negateSource) {
            if (negateSource == null) {
              throw new MissingRequiredPropertyException("GetSecurityRuleResult", "negateSource");
            }
            this.negateSource = negateSource;
            return this;
        }
        @CustomType.Setter
        public Builder priority(Integer priority) {
            if (priority == null) {
              throw new MissingRequiredPropertyException("GetSecurityRuleResult", "priority");
            }
            this.priority = priority;
            return this;
        }
        @CustomType.Setter
        public Builder protPortLists(List<String> protPortLists) {
            if (protPortLists == null) {
              throw new MissingRequiredPropertyException("GetSecurityRuleResult", "protPortLists");
            }
            this.protPortLists = protPortLists;
            return this;
        }
        public Builder protPortLists(String... protPortLists) {
            return protPortLists(List.of(protPortLists));
        }
        @CustomType.Setter
        public Builder protocol(String protocol) {
            if (protocol == null) {
              throw new MissingRequiredPropertyException("GetSecurityRuleResult", "protocol");
            }
            this.protocol = protocol;
            return this;
        }
        @CustomType.Setter
        public Builder ruleList(@Nullable String ruleList) {

            this.ruleList = ruleList;
            return this;
        }
        @CustomType.Setter
        public Builder rulestack(String rulestack) {
            if (rulestack == null) {
              throw new MissingRequiredPropertyException("GetSecurityRuleResult", "rulestack");
            }
            this.rulestack = rulestack;
            return this;
        }
        @CustomType.Setter
        public Builder scope(@Nullable String scope) {

            this.scope = scope;
            return this;
        }
        @CustomType.Setter
        public Builder sources(List<GetSecurityRuleSource> sources) {
            if (sources == null) {
              throw new MissingRequiredPropertyException("GetSecurityRuleResult", "sources");
            }
            this.sources = sources;
            return this;
        }
        public Builder sources(GetSecurityRuleSource... sources) {
            return sources(List.of(sources));
        }
        @CustomType.Setter
        public Builder tags(Map<String,String> tags) {
            if (tags == null) {
              throw new MissingRequiredPropertyException("GetSecurityRuleResult", "tags");
            }
            this.tags = tags;
            return this;
        }
        @CustomType.Setter
        public Builder updateToken(String updateToken) {
            if (updateToken == null) {
              throw new MissingRequiredPropertyException("GetSecurityRuleResult", "updateToken");
            }
            this.updateToken = updateToken;
            return this;
        }
        public GetSecurityRuleResult build() {
            final var _resultValue = new GetSecurityRuleResult();
            _resultValue.action = action;
            _resultValue.applications = applications;
            _resultValue.auditComment = auditComment;
            _resultValue.categories = categories;
            _resultValue.configType = configType;
            _resultValue.decryptionRuleType = decryptionRuleType;
            _resultValue.description = description;
            _resultValue.destinations = destinations;
            _resultValue.enabled = enabled;
            _resultValue.id = id;
            _resultValue.logging = logging;
            _resultValue.name = name;
            _resultValue.negateDestination = negateDestination;
            _resultValue.negateSource = negateSource;
            _resultValue.priority = priority;
            _resultValue.protPortLists = protPortLists;
            _resultValue.protocol = protocol;
            _resultValue.ruleList = ruleList;
            _resultValue.rulestack = rulestack;
            _resultValue.scope = scope;
            _resultValue.sources = sources;
            _resultValue.tags = tags;
            _resultValue.updateToken = updateToken;
            return _resultValue;
        }
    }
}
