// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.cloudngfwaws.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class NgfwLogProfileLogConfigArgs extends com.pulumi.resources.ResourceArgs {

    public static final NgfwLogProfileLogConfigArgs Empty = new NgfwLogProfileLogConfigArgs();

    /**
     * Type of Role for log configuration
     * 
     */
    @Import(name="accountId")
    private @Nullable Output<String> accountId;

    /**
     * @return Type of Role for log configuration
     * 
     */
    public Optional<Output<String>> accountId() {
        return Optional.ofNullable(this.accountId);
    }

    /**
     * The log destination details.
     * 
     */
    @Import(name="logDestination", required=true)
    private Output<String> logDestination;

    /**
     * @return The log destination details.
     * 
     */
    public Output<String> logDestination() {
        return this.logDestination;
    }

    /**
     * The log destination type. Valid values are `S3`, `CloudWatchLogs`, or `KinesisDataFirehose`.
     * 
     */
    @Import(name="logDestinationType", required=true)
    private Output<String> logDestinationType;

    /**
     * @return The log destination type. Valid values are `S3`, `CloudWatchLogs`, or `KinesisDataFirehose`.
     * 
     */
    public Output<String> logDestinationType() {
        return this.logDestinationType;
    }

    /**
     * The list of different log types that are wanted
     * 
     */
    @Import(name="logTypes", required=true)
    private Output<List<String>> logTypes;

    /**
     * @return The list of different log types that are wanted
     * 
     */
    public Output<List<String>> logTypes() {
        return this.logTypes;
    }

    /**
     * Type of Role for log configuration
     * 
     */
    @Import(name="roleType")
    private @Nullable Output<String> roleType;

    /**
     * @return Type of Role for log configuration
     * 
     */
    public Optional<Output<String>> roleType() {
        return Optional.ofNullable(this.roleType);
    }

    private NgfwLogProfileLogConfigArgs() {}

    private NgfwLogProfileLogConfigArgs(NgfwLogProfileLogConfigArgs $) {
        this.accountId = $.accountId;
        this.logDestination = $.logDestination;
        this.logDestinationType = $.logDestinationType;
        this.logTypes = $.logTypes;
        this.roleType = $.roleType;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(NgfwLogProfileLogConfigArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private NgfwLogProfileLogConfigArgs $;

        public Builder() {
            $ = new NgfwLogProfileLogConfigArgs();
        }

        public Builder(NgfwLogProfileLogConfigArgs defaults) {
            $ = new NgfwLogProfileLogConfigArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param accountId Type of Role for log configuration
         * 
         * @return builder
         * 
         */
        public Builder accountId(@Nullable Output<String> accountId) {
            $.accountId = accountId;
            return this;
        }

        /**
         * @param accountId Type of Role for log configuration
         * 
         * @return builder
         * 
         */
        public Builder accountId(String accountId) {
            return accountId(Output.of(accountId));
        }

        /**
         * @param logDestination The log destination details.
         * 
         * @return builder
         * 
         */
        public Builder logDestination(Output<String> logDestination) {
            $.logDestination = logDestination;
            return this;
        }

        /**
         * @param logDestination The log destination details.
         * 
         * @return builder
         * 
         */
        public Builder logDestination(String logDestination) {
            return logDestination(Output.of(logDestination));
        }

        /**
         * @param logDestinationType The log destination type. Valid values are `S3`, `CloudWatchLogs`, or `KinesisDataFirehose`.
         * 
         * @return builder
         * 
         */
        public Builder logDestinationType(Output<String> logDestinationType) {
            $.logDestinationType = logDestinationType;
            return this;
        }

        /**
         * @param logDestinationType The log destination type. Valid values are `S3`, `CloudWatchLogs`, or `KinesisDataFirehose`.
         * 
         * @return builder
         * 
         */
        public Builder logDestinationType(String logDestinationType) {
            return logDestinationType(Output.of(logDestinationType));
        }

        /**
         * @param logTypes The list of different log types that are wanted
         * 
         * @return builder
         * 
         */
        public Builder logTypes(Output<List<String>> logTypes) {
            $.logTypes = logTypes;
            return this;
        }

        /**
         * @param logTypes The list of different log types that are wanted
         * 
         * @return builder
         * 
         */
        public Builder logTypes(List<String> logTypes) {
            return logTypes(Output.of(logTypes));
        }

        /**
         * @param logTypes The list of different log types that are wanted
         * 
         * @return builder
         * 
         */
        public Builder logTypes(String... logTypes) {
            return logTypes(List.of(logTypes));
        }

        /**
         * @param roleType Type of Role for log configuration
         * 
         * @return builder
         * 
         */
        public Builder roleType(@Nullable Output<String> roleType) {
            $.roleType = roleType;
            return this;
        }

        /**
         * @param roleType Type of Role for log configuration
         * 
         * @return builder
         * 
         */
        public Builder roleType(String roleType) {
            return roleType(Output.of(roleType));
        }

        public NgfwLogProfileLogConfigArgs build() {
            if ($.logDestination == null) {
                throw new MissingRequiredPropertyException("NgfwLogProfileLogConfigArgs", "logDestination");
            }
            if ($.logDestinationType == null) {
                throw new MissingRequiredPropertyException("NgfwLogProfileLogConfigArgs", "logDestinationType");
            }
            if ($.logTypes == null) {
                throw new MissingRequiredPropertyException("NgfwLogProfileLogConfigArgs", "logTypes");
            }
            return $;
        }
    }

}
