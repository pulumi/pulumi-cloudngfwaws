// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.cloudngfwaws.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetNgfwLogProfileLogConfig {
    /**
     * @return Type of Role for log configuration
     * 
     */
    private String accountId;
    /**
     * @return The log destination details.
     * 
     */
    private String logDestination;
    /**
     * @return The log destination type. Valid values are `S3`, `CloudWatchLogs`, or `KinesisDataFirehose`.
     * 
     */
    private String logDestinationType;
    /**
     * @return The list of different log types that are wanted
     * 
     */
    private List<String> logTypes;
    /**
     * @return Type of Role for log configuration
     * 
     */
    private String roleType;

    private GetNgfwLogProfileLogConfig() {}
    /**
     * @return Type of Role for log configuration
     * 
     */
    public String accountId() {
        return this.accountId;
    }
    /**
     * @return The log destination details.
     * 
     */
    public String logDestination() {
        return this.logDestination;
    }
    /**
     * @return The log destination type. Valid values are `S3`, `CloudWatchLogs`, or `KinesisDataFirehose`.
     * 
     */
    public String logDestinationType() {
        return this.logDestinationType;
    }
    /**
     * @return The list of different log types that are wanted
     * 
     */
    public List<String> logTypes() {
        return this.logTypes;
    }
    /**
     * @return Type of Role for log configuration
     * 
     */
    public String roleType() {
        return this.roleType;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetNgfwLogProfileLogConfig defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String accountId;
        private String logDestination;
        private String logDestinationType;
        private List<String> logTypes;
        private String roleType;
        public Builder() {}
        public Builder(GetNgfwLogProfileLogConfig defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.accountId = defaults.accountId;
    	      this.logDestination = defaults.logDestination;
    	      this.logDestinationType = defaults.logDestinationType;
    	      this.logTypes = defaults.logTypes;
    	      this.roleType = defaults.roleType;
        }

        @CustomType.Setter
        public Builder accountId(String accountId) {
            if (accountId == null) {
              throw new MissingRequiredPropertyException("GetNgfwLogProfileLogConfig", "accountId");
            }
            this.accountId = accountId;
            return this;
        }
        @CustomType.Setter
        public Builder logDestination(String logDestination) {
            if (logDestination == null) {
              throw new MissingRequiredPropertyException("GetNgfwLogProfileLogConfig", "logDestination");
            }
            this.logDestination = logDestination;
            return this;
        }
        @CustomType.Setter
        public Builder logDestinationType(String logDestinationType) {
            if (logDestinationType == null) {
              throw new MissingRequiredPropertyException("GetNgfwLogProfileLogConfig", "logDestinationType");
            }
            this.logDestinationType = logDestinationType;
            return this;
        }
        @CustomType.Setter
        public Builder logTypes(List<String> logTypes) {
            if (logTypes == null) {
              throw new MissingRequiredPropertyException("GetNgfwLogProfileLogConfig", "logTypes");
            }
            this.logTypes = logTypes;
            return this;
        }
        public Builder logTypes(String... logTypes) {
            return logTypes(List.of(logTypes));
        }
        @CustomType.Setter
        public Builder roleType(String roleType) {
            if (roleType == null) {
              throw new MissingRequiredPropertyException("GetNgfwLogProfileLogConfig", "roleType");
            }
            this.roleType = roleType;
            return this;
        }
        public GetNgfwLogProfileLogConfig build() {
            final var _resultValue = new GetNgfwLogProfileLogConfig();
            _resultValue.accountId = accountId;
            _resultValue.logDestination = logDestination;
            _resultValue.logDestinationType = logDestinationType;
            _resultValue.logTypes = logTypes;
            _resultValue.roleType = roleType;
            return _resultValue;
        }
    }
}
