// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.cloudngfwaws.inputs;

import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetPredefinedUrlCategoryOverridePlainArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetPredefinedUrlCategoryOverridePlainArgs Empty = new GetPredefinedUrlCategoryOverridePlainArgs();

    /**
     * Retrieve either the candidate or running config. Valid values are `candidate` or `running`. Defaults to `candidate`.
     * 
     */
    @Import(name="configType")
    private @Nullable String configType;

    /**
     * @return Retrieve either the candidate or running config. Valid values are `candidate` or `running`. Defaults to `candidate`.
     * 
     */
    public Optional<String> configType() {
        return Optional.ofNullable(this.configType);
    }

    /**
     * The name.
     * 
     */
    @Import(name="name", required=true)
    private String name;

    /**
     * @return The name.
     * 
     */
    public String name() {
        return this.name;
    }

    /**
     * The rulestack.
     * 
     */
    @Import(name="rulestack", required=true)
    private String rulestack;

    /**
     * @return The rulestack.
     * 
     */
    public String rulestack() {
        return this.rulestack;
    }

    private GetPredefinedUrlCategoryOverridePlainArgs() {}

    private GetPredefinedUrlCategoryOverridePlainArgs(GetPredefinedUrlCategoryOverridePlainArgs $) {
        this.configType = $.configType;
        this.name = $.name;
        this.rulestack = $.rulestack;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetPredefinedUrlCategoryOverridePlainArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetPredefinedUrlCategoryOverridePlainArgs $;

        public Builder() {
            $ = new GetPredefinedUrlCategoryOverridePlainArgs();
        }

        public Builder(GetPredefinedUrlCategoryOverridePlainArgs defaults) {
            $ = new GetPredefinedUrlCategoryOverridePlainArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param configType Retrieve either the candidate or running config. Valid values are `candidate` or `running`. Defaults to `candidate`.
         * 
         * @return builder
         * 
         */
        public Builder configType(@Nullable String configType) {
            $.configType = configType;
            return this;
        }

        /**
         * @param name The name.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            $.name = name;
            return this;
        }

        /**
         * @param rulestack The rulestack.
         * 
         * @return builder
         * 
         */
        public Builder rulestack(String rulestack) {
            $.rulestack = rulestack;
            return this;
        }

        public GetPredefinedUrlCategoryOverridePlainArgs build() {
            if ($.name == null) {
                throw new MissingRequiredPropertyException("GetPredefinedUrlCategoryOverridePlainArgs", "name");
            }
            if ($.rulestack == null) {
                throw new MissingRequiredPropertyException("GetPredefinedUrlCategoryOverridePlainArgs", "rulestack");
            }
            return $;
        }
    }

}
