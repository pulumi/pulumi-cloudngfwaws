// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.cloudngfwaws.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class AccountOnboardingStackState extends com.pulumi.resources.ResourceArgs {

    public static final AccountOnboardingStackState Empty = new AccountOnboardingStackState();

    /**
     * The account IDs
     * 
     */
    @Import(name="accountId")
    private @Nullable Output<String> accountId;

    /**
     * @return The account IDs
     * 
     */
    public Optional<Output<String>> accountId() {
        return Optional.ofNullable(this.accountId);
    }

    /**
     * Audit Log Group Name
     * 
     */
    @Import(name="auditlogGroup")
    private @Nullable Output<String> auditlogGroup;

    /**
     * @return Audit Log Group Name
     * 
     */
    public Optional<Output<String>> auditlogGroup() {
        return Optional.ofNullable(this.auditlogGroup);
    }

    /**
     * Role name to run the account onboarding CFT in each account to be onboarded.
     * 
     */
    @Import(name="cftRoleName")
    private @Nullable Output<String> cftRoleName;

    /**
     * @return Role name to run the account onboarding CFT in each account to be onboarded.
     * 
     */
    public Optional<Output<String>> cftRoleName() {
        return Optional.ofNullable(this.cftRoleName);
    }

    /**
     * Cloudwatch Log Group
     * 
     */
    @Import(name="cloudwatchLogGroup")
    private @Nullable Output<String> cloudwatchLogGroup;

    /**
     * @return Cloudwatch Log Group
     * 
     */
    public Optional<Output<String>> cloudwatchLogGroup() {
        return Optional.ofNullable(this.cloudwatchLogGroup);
    }

    /**
     * Cloudwatch Namespace
     * 
     */
    @Import(name="cloudwatchNamespace")
    private @Nullable Output<String> cloudwatchNamespace;

    /**
     * @return Cloudwatch Namespace
     * 
     */
    public Optional<Output<String>> cloudwatchNamespace() {
        return Optional.ofNullable(this.cloudwatchNamespace);
    }

    /**
     * The CloudNGFW can decrypt inbound and outbound traffic by providing a
     * 					  certificate stored in secret Manager.
     * 		 			  The role allows the service to access a certificate configured in the rulestack.
     * 		 			  Only certificated tagged with PaloAltoCloudNGFW can be accessed
     * 
     */
    @Import(name="decryptionCert")
    private @Nullable Output<String> decryptionCert;

    /**
     * @return The CloudNGFW can decrypt inbound and outbound traffic by providing a
     * 					  certificate stored in secret Manager.
     * 		 			  The role allows the service to access a certificate configured in the rulestack.
     * 		 			  Only certificated tagged with PaloAltoCloudNGFW can be accessed
     * 
     */
    public Optional<Output<String>> decryptionCert() {
        return Optional.ofNullable(this.decryptionCert);
    }

    /**
     * Controls whether cloud NGFW will create firewall endpoints automatitically in customer subnets
     * 
     */
    @Import(name="endpointMode")
    private @Nullable Output<String> endpointMode;

    /**
     * @return Controls whether cloud NGFW will create firewall endpoints automatitically in customer subnets
     * 
     */
    public Optional<Output<String>> endpointMode() {
        return Optional.ofNullable(this.endpointMode);
    }

    /**
     * External Id of the onboarded account
     * 
     */
    @Import(name="externalId")
    private @Nullable Output<String> externalId;

    /**
     * @return External Id of the onboarded account
     * 
     */
    public Optional<Output<String>> externalId() {
        return Optional.ofNullable(this.externalId);
    }

    /**
     * Kinesis Firehose for logging
     * 
     */
    @Import(name="kinesisFirehose")
    private @Nullable Output<String> kinesisFirehose;

    /**
     * @return Kinesis Firehose for logging
     * 
     */
    public Optional<Output<String>> kinesisFirehose() {
        return Optional.ofNullable(this.kinesisFirehose);
    }

    /**
     * Role name to run the account onboarding CFT in each account to be onboarded.
     * 
     */
    @Import(name="onboardingCft")
    private @Nullable Output<String> onboardingCft;

    /**
     * @return Role name to run the account onboarding CFT in each account to be onboarded.
     * 
     */
    public Optional<Output<String>> onboardingCft() {
        return Optional.ofNullable(this.onboardingCft);
    }

    /**
     * S3 Bucket Name for Logging. Logging roles provide access to create log contents in this bucket.
     * 
     */
    @Import(name="s3Bucket")
    private @Nullable Output<String> s3Bucket;

    /**
     * @return S3 Bucket Name for Logging. Logging roles provide access to create log contents in this bucket.
     * 
     */
    public Optional<Output<String>> s3Bucket() {
        return Optional.ofNullable(this.s3Bucket);
    }

    /**
     * SNS topic ARN to publish the role ARNs
     * 
     */
    @Import(name="snsTopicArn")
    private @Nullable Output<String> snsTopicArn;

    /**
     * @return SNS topic ARN to publish the role ARNs
     * 
     */
    public Optional<Output<String>> snsTopicArn() {
        return Optional.ofNullable(this.snsTopicArn);
    }

    /**
     * ID of the account onboarding CFT stack
     * 
     */
    @Import(name="stackId")
    private @Nullable Output<String> stackId;

    /**
     * @return ID of the account onboarding CFT stack
     * 
     */
    public Optional<Output<String>> stackId() {
        return Optional.ofNullable(this.stackId);
    }

    /**
     * Status of the account onboarding CFT stack.
     * 
     */
    @Import(name="stackStatus")
    private @Nullable Output<String> stackStatus;

    /**
     * @return Status of the account onboarding CFT stack.
     * 
     */
    public Optional<Output<String>> stackStatus() {
        return Optional.ofNullable(this.stackStatus);
    }

    /**
     * PANW Cloud NGFW trusted account Id
     * 
     */
    @Import(name="trustedAccount")
    private @Nullable Output<String> trustedAccount;

    /**
     * @return PANW Cloud NGFW trusted account Id
     * 
     */
    public Optional<Output<String>> trustedAccount() {
        return Optional.ofNullable(this.trustedAccount);
    }

    private AccountOnboardingStackState() {}

    private AccountOnboardingStackState(AccountOnboardingStackState $) {
        this.accountId = $.accountId;
        this.auditlogGroup = $.auditlogGroup;
        this.cftRoleName = $.cftRoleName;
        this.cloudwatchLogGroup = $.cloudwatchLogGroup;
        this.cloudwatchNamespace = $.cloudwatchNamespace;
        this.decryptionCert = $.decryptionCert;
        this.endpointMode = $.endpointMode;
        this.externalId = $.externalId;
        this.kinesisFirehose = $.kinesisFirehose;
        this.onboardingCft = $.onboardingCft;
        this.s3Bucket = $.s3Bucket;
        this.snsTopicArn = $.snsTopicArn;
        this.stackId = $.stackId;
        this.stackStatus = $.stackStatus;
        this.trustedAccount = $.trustedAccount;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(AccountOnboardingStackState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private AccountOnboardingStackState $;

        public Builder() {
            $ = new AccountOnboardingStackState();
        }

        public Builder(AccountOnboardingStackState defaults) {
            $ = new AccountOnboardingStackState(Objects.requireNonNull(defaults));
        }

        /**
         * @param accountId The account IDs
         * 
         * @return builder
         * 
         */
        public Builder accountId(@Nullable Output<String> accountId) {
            $.accountId = accountId;
            return this;
        }

        /**
         * @param accountId The account IDs
         * 
         * @return builder
         * 
         */
        public Builder accountId(String accountId) {
            return accountId(Output.of(accountId));
        }

        /**
         * @param auditlogGroup Audit Log Group Name
         * 
         * @return builder
         * 
         */
        public Builder auditlogGroup(@Nullable Output<String> auditlogGroup) {
            $.auditlogGroup = auditlogGroup;
            return this;
        }

        /**
         * @param auditlogGroup Audit Log Group Name
         * 
         * @return builder
         * 
         */
        public Builder auditlogGroup(String auditlogGroup) {
            return auditlogGroup(Output.of(auditlogGroup));
        }

        /**
         * @param cftRoleName Role name to run the account onboarding CFT in each account to be onboarded.
         * 
         * @return builder
         * 
         */
        public Builder cftRoleName(@Nullable Output<String> cftRoleName) {
            $.cftRoleName = cftRoleName;
            return this;
        }

        /**
         * @param cftRoleName Role name to run the account onboarding CFT in each account to be onboarded.
         * 
         * @return builder
         * 
         */
        public Builder cftRoleName(String cftRoleName) {
            return cftRoleName(Output.of(cftRoleName));
        }

        /**
         * @param cloudwatchLogGroup Cloudwatch Log Group
         * 
         * @return builder
         * 
         */
        public Builder cloudwatchLogGroup(@Nullable Output<String> cloudwatchLogGroup) {
            $.cloudwatchLogGroup = cloudwatchLogGroup;
            return this;
        }

        /**
         * @param cloudwatchLogGroup Cloudwatch Log Group
         * 
         * @return builder
         * 
         */
        public Builder cloudwatchLogGroup(String cloudwatchLogGroup) {
            return cloudwatchLogGroup(Output.of(cloudwatchLogGroup));
        }

        /**
         * @param cloudwatchNamespace Cloudwatch Namespace
         * 
         * @return builder
         * 
         */
        public Builder cloudwatchNamespace(@Nullable Output<String> cloudwatchNamespace) {
            $.cloudwatchNamespace = cloudwatchNamespace;
            return this;
        }

        /**
         * @param cloudwatchNamespace Cloudwatch Namespace
         * 
         * @return builder
         * 
         */
        public Builder cloudwatchNamespace(String cloudwatchNamespace) {
            return cloudwatchNamespace(Output.of(cloudwatchNamespace));
        }

        /**
         * @param decryptionCert The CloudNGFW can decrypt inbound and outbound traffic by providing a
         * 					  certificate stored in secret Manager.
         * 		 			  The role allows the service to access a certificate configured in the rulestack.
         * 		 			  Only certificated tagged with PaloAltoCloudNGFW can be accessed
         * 
         * @return builder
         * 
         */
        public Builder decryptionCert(@Nullable Output<String> decryptionCert) {
            $.decryptionCert = decryptionCert;
            return this;
        }

        /**
         * @param decryptionCert The CloudNGFW can decrypt inbound and outbound traffic by providing a
         * 					  certificate stored in secret Manager.
         * 		 			  The role allows the service to access a certificate configured in the rulestack.
         * 		 			  Only certificated tagged with PaloAltoCloudNGFW can be accessed
         * 
         * @return builder
         * 
         */
        public Builder decryptionCert(String decryptionCert) {
            return decryptionCert(Output.of(decryptionCert));
        }

        /**
         * @param endpointMode Controls whether cloud NGFW will create firewall endpoints automatitically in customer subnets
         * 
         * @return builder
         * 
         */
        public Builder endpointMode(@Nullable Output<String> endpointMode) {
            $.endpointMode = endpointMode;
            return this;
        }

        /**
         * @param endpointMode Controls whether cloud NGFW will create firewall endpoints automatitically in customer subnets
         * 
         * @return builder
         * 
         */
        public Builder endpointMode(String endpointMode) {
            return endpointMode(Output.of(endpointMode));
        }

        /**
         * @param externalId External Id of the onboarded account
         * 
         * @return builder
         * 
         */
        public Builder externalId(@Nullable Output<String> externalId) {
            $.externalId = externalId;
            return this;
        }

        /**
         * @param externalId External Id of the onboarded account
         * 
         * @return builder
         * 
         */
        public Builder externalId(String externalId) {
            return externalId(Output.of(externalId));
        }

        /**
         * @param kinesisFirehose Kinesis Firehose for logging
         * 
         * @return builder
         * 
         */
        public Builder kinesisFirehose(@Nullable Output<String> kinesisFirehose) {
            $.kinesisFirehose = kinesisFirehose;
            return this;
        }

        /**
         * @param kinesisFirehose Kinesis Firehose for logging
         * 
         * @return builder
         * 
         */
        public Builder kinesisFirehose(String kinesisFirehose) {
            return kinesisFirehose(Output.of(kinesisFirehose));
        }

        /**
         * @param onboardingCft Role name to run the account onboarding CFT in each account to be onboarded.
         * 
         * @return builder
         * 
         */
        public Builder onboardingCft(@Nullable Output<String> onboardingCft) {
            $.onboardingCft = onboardingCft;
            return this;
        }

        /**
         * @param onboardingCft Role name to run the account onboarding CFT in each account to be onboarded.
         * 
         * @return builder
         * 
         */
        public Builder onboardingCft(String onboardingCft) {
            return onboardingCft(Output.of(onboardingCft));
        }

        /**
         * @param s3Bucket S3 Bucket Name for Logging. Logging roles provide access to create log contents in this bucket.
         * 
         * @return builder
         * 
         */
        public Builder s3Bucket(@Nullable Output<String> s3Bucket) {
            $.s3Bucket = s3Bucket;
            return this;
        }

        /**
         * @param s3Bucket S3 Bucket Name for Logging. Logging roles provide access to create log contents in this bucket.
         * 
         * @return builder
         * 
         */
        public Builder s3Bucket(String s3Bucket) {
            return s3Bucket(Output.of(s3Bucket));
        }

        /**
         * @param snsTopicArn SNS topic ARN to publish the role ARNs
         * 
         * @return builder
         * 
         */
        public Builder snsTopicArn(@Nullable Output<String> snsTopicArn) {
            $.snsTopicArn = snsTopicArn;
            return this;
        }

        /**
         * @param snsTopicArn SNS topic ARN to publish the role ARNs
         * 
         * @return builder
         * 
         */
        public Builder snsTopicArn(String snsTopicArn) {
            return snsTopicArn(Output.of(snsTopicArn));
        }

        /**
         * @param stackId ID of the account onboarding CFT stack
         * 
         * @return builder
         * 
         */
        public Builder stackId(@Nullable Output<String> stackId) {
            $.stackId = stackId;
            return this;
        }

        /**
         * @param stackId ID of the account onboarding CFT stack
         * 
         * @return builder
         * 
         */
        public Builder stackId(String stackId) {
            return stackId(Output.of(stackId));
        }

        /**
         * @param stackStatus Status of the account onboarding CFT stack.
         * 
         * @return builder
         * 
         */
        public Builder stackStatus(@Nullable Output<String> stackStatus) {
            $.stackStatus = stackStatus;
            return this;
        }

        /**
         * @param stackStatus Status of the account onboarding CFT stack.
         * 
         * @return builder
         * 
         */
        public Builder stackStatus(String stackStatus) {
            return stackStatus(Output.of(stackStatus));
        }

        /**
         * @param trustedAccount PANW Cloud NGFW trusted account Id
         * 
         * @return builder
         * 
         */
        public Builder trustedAccount(@Nullable Output<String> trustedAccount) {
            $.trustedAccount = trustedAccount;
            return this;
        }

        /**
         * @param trustedAccount PANW Cloud NGFW trusted account Id
         * 
         * @return builder
         * 
         */
        public Builder trustedAccount(String trustedAccount) {
            return trustedAccount(Output.of(trustedAccount));
        }

        public AccountOnboardingStackState build() {
            return $;
        }
    }

}
