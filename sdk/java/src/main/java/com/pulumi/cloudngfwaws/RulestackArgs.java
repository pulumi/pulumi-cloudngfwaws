// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.cloudngfwaws;

import com.pulumi.cloudngfwaws.inputs.RulestackProfileConfigArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class RulestackArgs extends com.pulumi.resources.ResourceArgs {

    public static final RulestackArgs Empty = new RulestackArgs();

    /**
     * Account group.
     * 
     */
    @Import(name="accountGroup")
    private @Nullable Output<String> accountGroup;

    /**
     * @return Account group.
     * 
     */
    public Optional<Output<String>> accountGroup() {
        return Optional.ofNullable(this.accountGroup);
    }

    /**
     * The account ID.
     * 
     */
    @Import(name="accountId")
    private @Nullable Output<String> accountId;

    /**
     * @return The account ID.
     * 
     */
    public Optional<Output<String>> accountId() {
        return Optional.ofNullable(this.accountId);
    }

    /**
     * The description.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return The description.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * Lookup x forwarded for.
     * 
     */
    @Import(name="lookupXForwardedFor")
    private @Nullable Output<String> lookupXForwardedFor;

    /**
     * @return Lookup x forwarded for.
     * 
     */
    public Optional<Output<String>> lookupXForwardedFor() {
        return Optional.ofNullable(this.lookupXForwardedFor);
    }

    /**
     * Minimum App-ID version number.
     * 
     */
    @Import(name="minimumAppIdVersion")
    private @Nullable Output<String> minimumAppIdVersion;

    /**
     * @return Minimum App-ID version number.
     * 
     */
    public Optional<Output<String>> minimumAppIdVersion() {
        return Optional.ofNullable(this.minimumAppIdVersion);
    }

    /**
     * The name.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The name.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    @Import(name="profileConfig", required=true)
    private Output<RulestackProfileConfigArgs> profileConfig;

    public Output<RulestackProfileConfigArgs> profileConfig() {
        return this.profileConfig;
    }

    /**
     * The rulestack&#39;s scope. A local rulestack will require that you&#39;ve retrieved a LRA JWT. A global rulestack will require that you&#39;ve retrieved a GRA JWT. Valid values are `Local` or `Global`. Defaults to `Local`.
     * 
     */
    @Import(name="scope")
    private @Nullable Output<String> scope;

    /**
     * @return The rulestack&#39;s scope. A local rulestack will require that you&#39;ve retrieved a LRA JWT. A global rulestack will require that you&#39;ve retrieved a GRA JWT. Valid values are `Local` or `Global`. Defaults to `Local`.
     * 
     */
    public Optional<Output<String>> scope() {
        return Optional.ofNullable(this.scope);
    }

    /**
     * The tags.
     * 
     */
    @Import(name="tags")
    private @Nullable Output<Map<String,String>> tags;

    /**
     * @return The tags.
     * 
     */
    public Optional<Output<Map<String,String>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    private RulestackArgs() {}

    private RulestackArgs(RulestackArgs $) {
        this.accountGroup = $.accountGroup;
        this.accountId = $.accountId;
        this.description = $.description;
        this.lookupXForwardedFor = $.lookupXForwardedFor;
        this.minimumAppIdVersion = $.minimumAppIdVersion;
        this.name = $.name;
        this.profileConfig = $.profileConfig;
        this.scope = $.scope;
        this.tags = $.tags;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(RulestackArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private RulestackArgs $;

        public Builder() {
            $ = new RulestackArgs();
        }

        public Builder(RulestackArgs defaults) {
            $ = new RulestackArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param accountGroup Account group.
         * 
         * @return builder
         * 
         */
        public Builder accountGroup(@Nullable Output<String> accountGroup) {
            $.accountGroup = accountGroup;
            return this;
        }

        /**
         * @param accountGroup Account group.
         * 
         * @return builder
         * 
         */
        public Builder accountGroup(String accountGroup) {
            return accountGroup(Output.of(accountGroup));
        }

        /**
         * @param accountId The account ID.
         * 
         * @return builder
         * 
         */
        public Builder accountId(@Nullable Output<String> accountId) {
            $.accountId = accountId;
            return this;
        }

        /**
         * @param accountId The account ID.
         * 
         * @return builder
         * 
         */
        public Builder accountId(String accountId) {
            return accountId(Output.of(accountId));
        }

        /**
         * @param description The description.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description The description.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param lookupXForwardedFor Lookup x forwarded for.
         * 
         * @return builder
         * 
         */
        public Builder lookupXForwardedFor(@Nullable Output<String> lookupXForwardedFor) {
            $.lookupXForwardedFor = lookupXForwardedFor;
            return this;
        }

        /**
         * @param lookupXForwardedFor Lookup x forwarded for.
         * 
         * @return builder
         * 
         */
        public Builder lookupXForwardedFor(String lookupXForwardedFor) {
            return lookupXForwardedFor(Output.of(lookupXForwardedFor));
        }

        /**
         * @param minimumAppIdVersion Minimum App-ID version number.
         * 
         * @return builder
         * 
         */
        public Builder minimumAppIdVersion(@Nullable Output<String> minimumAppIdVersion) {
            $.minimumAppIdVersion = minimumAppIdVersion;
            return this;
        }

        /**
         * @param minimumAppIdVersion Minimum App-ID version number.
         * 
         * @return builder
         * 
         */
        public Builder minimumAppIdVersion(String minimumAppIdVersion) {
            return minimumAppIdVersion(Output.of(minimumAppIdVersion));
        }

        /**
         * @param name The name.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        public Builder profileConfig(Output<RulestackProfileConfigArgs> profileConfig) {
            $.profileConfig = profileConfig;
            return this;
        }

        public Builder profileConfig(RulestackProfileConfigArgs profileConfig) {
            return profileConfig(Output.of(profileConfig));
        }

        /**
         * @param scope The rulestack&#39;s scope. A local rulestack will require that you&#39;ve retrieved a LRA JWT. A global rulestack will require that you&#39;ve retrieved a GRA JWT. Valid values are `Local` or `Global`. Defaults to `Local`.
         * 
         * @return builder
         * 
         */
        public Builder scope(@Nullable Output<String> scope) {
            $.scope = scope;
            return this;
        }

        /**
         * @param scope The rulestack&#39;s scope. A local rulestack will require that you&#39;ve retrieved a LRA JWT. A global rulestack will require that you&#39;ve retrieved a GRA JWT. Valid values are `Local` or `Global`. Defaults to `Local`.
         * 
         * @return builder
         * 
         */
        public Builder scope(String scope) {
            return scope(Output.of(scope));
        }

        /**
         * @param tags The tags.
         * 
         * @return builder
         * 
         */
        public Builder tags(@Nullable Output<Map<String,String>> tags) {
            $.tags = tags;
            return this;
        }

        /**
         * @param tags The tags.
         * 
         * @return builder
         * 
         */
        public Builder tags(Map<String,String> tags) {
            return tags(Output.of(tags));
        }

        public RulestackArgs build() {
            if ($.profileConfig == null) {
                throw new MissingRequiredPropertyException("RulestackArgs", "profileConfig");
            }
            return $;
        }
    }

}
