// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.CloudNgfwAws
{
    public static class GetSecurityRule
    {
        /// <summary>
        /// Data source for retrieving security rule information.
        /// 
        /// 
        /// ## Admin Permission Type
        /// 
        /// * `Rulestack` (for `scope="Local"`)
        /// * `Global Rulestack` (for `scope="Global"`)
        /// </summary>
        public static Task<GetSecurityRuleResult> InvokeAsync(GetSecurityRuleArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetSecurityRuleResult>("cloudngfwaws:index/getSecurityRule:getSecurityRule", args ?? new GetSecurityRuleArgs(), options.WithDefaults());

        /// <summary>
        /// Data source for retrieving security rule information.
        /// 
        /// 
        /// ## Admin Permission Type
        /// 
        /// * `Rulestack` (for `scope="Local"`)
        /// * `Global Rulestack` (for `scope="Global"`)
        /// </summary>
        public static Output<GetSecurityRuleResult> Invoke(GetSecurityRuleInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetSecurityRuleResult>("cloudngfwaws:index/getSecurityRule:getSecurityRule", args ?? new GetSecurityRuleInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetSecurityRuleArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Retrieve either the candidate or running config. Valid values are `candidate` or `running`. Defaults to `candidate`.
        /// </summary>
        [Input("configType")]
        public string? ConfigType { get; set; }

        /// <summary>
        /// The rule priority.
        /// </summary>
        [Input("priority", required: true)]
        public int Priority { get; set; }

        /// <summary>
        /// The rulebase. Valid values are `PreRule`, `PostRule`, or `LocalRule`. Defaults to `PreRule`.
        /// </summary>
        [Input("ruleList")]
        public string? RuleList { get; set; }

        /// <summary>
        /// The rulestack.
        /// </summary>
        [Input("rulestack", required: true)]
        public string Rulestack { get; set; } = null!;

        /// <summary>
        /// The rulestack's scope. A local rulestack will require that you've retrieved a LRA JWT. A global rulestack will require that you've retrieved a GRA JWT. Valid values are `Local` or `Global`. Defaults to `Local`.
        /// </summary>
        [Input("scope")]
        public string? Scope { get; set; }

        public GetSecurityRuleArgs()
        {
        }
        public static new GetSecurityRuleArgs Empty => new GetSecurityRuleArgs();
    }

    public sealed class GetSecurityRuleInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Retrieve either the candidate or running config. Valid values are `candidate` or `running`. Defaults to `candidate`.
        /// </summary>
        [Input("configType")]
        public Input<string>? ConfigType { get; set; }

        /// <summary>
        /// The rule priority.
        /// </summary>
        [Input("priority", required: true)]
        public Input<int> Priority { get; set; } = null!;

        /// <summary>
        /// The rulebase. Valid values are `PreRule`, `PostRule`, or `LocalRule`. Defaults to `PreRule`.
        /// </summary>
        [Input("ruleList")]
        public Input<string>? RuleList { get; set; }

        /// <summary>
        /// The rulestack.
        /// </summary>
        [Input("rulestack", required: true)]
        public Input<string> Rulestack { get; set; } = null!;

        /// <summary>
        /// The rulestack's scope. A local rulestack will require that you've retrieved a LRA JWT. A global rulestack will require that you've retrieved a GRA JWT. Valid values are `Local` or `Global`. Defaults to `Local`.
        /// </summary>
        [Input("scope")]
        public Input<string>? Scope { get; set; }

        public GetSecurityRuleInvokeArgs()
        {
        }
        public static new GetSecurityRuleInvokeArgs Empty => new GetSecurityRuleInvokeArgs();
    }


    [OutputType]
    public sealed class GetSecurityRuleResult
    {
        /// <summary>
        /// The action to take. Valid values are `Allow`, `DenySilent`, `DenyResetServer`, or `DenyResetBoth`.
        /// </summary>
        public readonly string Action;
        /// <summary>
        /// The list of applications.
        /// </summary>
        public readonly ImmutableArray<string> Applications;
        /// <summary>
        /// The audit comment.
        /// </summary>
        public readonly string AuditComment;
        /// <summary>
        /// The category spec.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetSecurityRuleCategoryResult> Categories;
        /// <summary>
        /// Retrieve either the candidate or running config. Valid values are `candidate` or `running`. Defaults to `candidate`.
        /// </summary>
        public readonly string? ConfigType;
        /// <summary>
        /// Decryption rule type. Valid values are ``or`SSLOutboundInspection`.
        /// </summary>
        public readonly string DecryptionRuleType;
        /// <summary>
        /// The description.
        /// </summary>
        public readonly string Description;
        /// <summary>
        /// The destination spec.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetSecurityRuleDestinationResult> Destinations;
        /// <summary>
        /// Set to false to disable this rule.
        /// </summary>
        public readonly bool Enabled;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// Enable logging at end.
        /// </summary>
        public readonly bool Logging;
        /// <summary>
        /// The name.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// Negate the destination definition.
        /// </summary>
        public readonly bool NegateDestination;
        /// <summary>
        /// Negate the source definition.
        /// </summary>
        public readonly bool NegateSource;
        /// <summary>
        /// The rule priority.
        /// </summary>
        public readonly int Priority;
        /// <summary>
        /// Protocol port list.
        /// </summary>
        public readonly ImmutableArray<string> ProtPortLists;
        /// <summary>
        /// The protocol.
        /// </summary>
        public readonly string Protocol;
        /// <summary>
        /// The rulebase. Valid values are `PreRule`, `PostRule`, or `LocalRule`. Defaults to `PreRule`.
        /// </summary>
        public readonly string? RuleList;
        /// <summary>
        /// The rulestack.
        /// </summary>
        public readonly string Rulestack;
        /// <summary>
        /// The rulestack's scope. A local rulestack will require that you've retrieved a LRA JWT. A global rulestack will require that you've retrieved a GRA JWT. Valid values are `Local` or `Global`. Defaults to `Local`.
        /// </summary>
        public readonly string? Scope;
        /// <summary>
        /// The source spec.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetSecurityRuleSourceResult> Sources;
        /// <summary>
        /// The tags.
        /// </summary>
        public readonly ImmutableDictionary<string, string> Tags;
        /// <summary>
        /// The update token.
        /// </summary>
        public readonly string UpdateToken;

        [OutputConstructor]
        private GetSecurityRuleResult(
            string action,

            ImmutableArray<string> applications,

            string auditComment,

            ImmutableArray<Outputs.GetSecurityRuleCategoryResult> categories,

            string? configType,

            string decryptionRuleType,

            string description,

            ImmutableArray<Outputs.GetSecurityRuleDestinationResult> destinations,

            bool enabled,

            string id,

            bool logging,

            string name,

            bool negateDestination,

            bool negateSource,

            int priority,

            ImmutableArray<string> protPortLists,

            string protocol,

            string? ruleList,

            string rulestack,

            string? scope,

            ImmutableArray<Outputs.GetSecurityRuleSourceResult> sources,

            ImmutableDictionary<string, string> tags,

            string updateToken)
        {
            Action = action;
            Applications = applications;
            AuditComment = auditComment;
            Categories = categories;
            ConfigType = configType;
            DecryptionRuleType = decryptionRuleType;
            Description = description;
            Destinations = destinations;
            Enabled = enabled;
            Id = id;
            Logging = logging;
            Name = name;
            NegateDestination = negateDestination;
            NegateSource = negateSource;
            Priority = priority;
            ProtPortLists = protPortLists;
            Protocol = protocol;
            RuleList = ruleList;
            Rulestack = rulestack;
            Scope = scope;
            Sources = sources;
            Tags = tags;
            UpdateToken = updateToken;
        }
    }
}
