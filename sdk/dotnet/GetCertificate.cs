// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.CloudNgfwAws
{
    public static class GetCertificate
    {
        /// <summary>
        /// Data source for retrieving certificate information.
        /// 
        /// 
        /// ## Admin Permission Type
        /// 
        /// * `Rulestack` (for `scope="Local"`)
        /// * `Global Rulestack` (for `scope="Global"`)
        /// 
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using CloudNgfwAws = Pulumi.CloudNgfwAws;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var r = new CloudNgfwAws.Rulestack("r", new()
        ///     {
        ///         Name = "my-rulestack",
        ///         Scope = "Local",
        ///         AccountId = "12345",
        ///         Description = "Made by Pulumi",
        ///         ProfileConfig = new CloudNgfwAws.Inputs.RulestackProfileConfigArgs
        ///         {
        ///             AntiSpyware = "BestPractice",
        ///         },
        ///     });
        /// 
        ///     var example = CloudNgfwAws.GetCertificate.Invoke(new()
        ///     {
        ///         Rulestack = r.Name,
        ///         Name = "foobar",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetCertificateResult> InvokeAsync(GetCertificateArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetCertificateResult>("cloudngfwaws:index/getCertificate:getCertificate", args ?? new GetCertificateArgs(), options.WithDefaults());

        /// <summary>
        /// Data source for retrieving certificate information.
        /// 
        /// 
        /// ## Admin Permission Type
        /// 
        /// * `Rulestack` (for `scope="Local"`)
        /// * `Global Rulestack` (for `scope="Global"`)
        /// 
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using CloudNgfwAws = Pulumi.CloudNgfwAws;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var r = new CloudNgfwAws.Rulestack("r", new()
        ///     {
        ///         Name = "my-rulestack",
        ///         Scope = "Local",
        ///         AccountId = "12345",
        ///         Description = "Made by Pulumi",
        ///         ProfileConfig = new CloudNgfwAws.Inputs.RulestackProfileConfigArgs
        ///         {
        ///             AntiSpyware = "BestPractice",
        ///         },
        ///     });
        /// 
        ///     var example = CloudNgfwAws.GetCertificate.Invoke(new()
        ///     {
        ///         Rulestack = r.Name,
        ///         Name = "foobar",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetCertificateResult> Invoke(GetCertificateInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetCertificateResult>("cloudngfwaws:index/getCertificate:getCertificate", args ?? new GetCertificateInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// Data source for retrieving certificate information.
        /// 
        /// 
        /// ## Admin Permission Type
        /// 
        /// * `Rulestack` (for `scope="Local"`)
        /// * `Global Rulestack` (for `scope="Global"`)
        /// 
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using CloudNgfwAws = Pulumi.CloudNgfwAws;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var r = new CloudNgfwAws.Rulestack("r", new()
        ///     {
        ///         Name = "my-rulestack",
        ///         Scope = "Local",
        ///         AccountId = "12345",
        ///         Description = "Made by Pulumi",
        ///         ProfileConfig = new CloudNgfwAws.Inputs.RulestackProfileConfigArgs
        ///         {
        ///             AntiSpyware = "BestPractice",
        ///         },
        ///     });
        /// 
        ///     var example = CloudNgfwAws.GetCertificate.Invoke(new()
        ///     {
        ///         Rulestack = r.Name,
        ///         Name = "foobar",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetCertificateResult> Invoke(GetCertificateInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetCertificateResult>("cloudngfwaws:index/getCertificate:getCertificate", args ?? new GetCertificateInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetCertificateArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Retrieve either the candidate or running config. Valid values are `Candidate` or `Running`. Defaults to `Candidate`.
        /// </summary>
        [Input("configType")]
        public string? ConfigType { get; set; }

        /// <summary>
        /// The name.
        /// </summary>
        [Input("name", required: true)]
        public string Name { get; set; } = null!;

        /// <summary>
        /// The rulestack.
        /// </summary>
        [Input("rulestack", required: true)]
        public string Rulestack { get; set; } = null!;

        /// <summary>
        /// The rulestack's scope. A local rulestack will require that you've retrieved a LRA JWT. A global rulestack will require that you've retrieved a GRA JWT. Valid values are `Local` or `Global`. Defaults to `Local`.
        /// </summary>
        [Input("scope")]
        public string? Scope { get; set; }

        public GetCertificateArgs()
        {
        }
        public static new GetCertificateArgs Empty => new GetCertificateArgs();
    }

    public sealed class GetCertificateInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Retrieve either the candidate or running config. Valid values are `Candidate` or `Running`. Defaults to `Candidate`.
        /// </summary>
        [Input("configType")]
        public Input<string>? ConfigType { get; set; }

        /// <summary>
        /// The name.
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        /// <summary>
        /// The rulestack.
        /// </summary>
        [Input("rulestack", required: true)]
        public Input<string> Rulestack { get; set; } = null!;

        /// <summary>
        /// The rulestack's scope. A local rulestack will require that you've retrieved a LRA JWT. A global rulestack will require that you've retrieved a GRA JWT. Valid values are `Local` or `Global`. Defaults to `Local`.
        /// </summary>
        [Input("scope")]
        public Input<string>? Scope { get; set; }

        public GetCertificateInvokeArgs()
        {
        }
        public static new GetCertificateInvokeArgs Empty => new GetCertificateInvokeArgs();
    }


    [OutputType]
    public sealed class GetCertificateResult
    {
        /// <summary>
        /// The audit comment.
        /// </summary>
        public readonly string AuditComment;
        /// <summary>
        /// Retrieve either the candidate or running config. Valid values are `Candidate` or `Running`. Defaults to `Candidate`.
        /// </summary>
        public readonly string? ConfigType;
        /// <summary>
        /// The description.
        /// </summary>
        public readonly string Description;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The name.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// The rulestack.
        /// </summary>
        public readonly string Rulestack;
        /// <summary>
        /// The rulestack's scope. A local rulestack will require that you've retrieved a LRA JWT. A global rulestack will require that you've retrieved a GRA JWT. Valid values are `Local` or `Global`. Defaults to `Local`.
        /// </summary>
        public readonly string? Scope;
        /// <summary>
        /// Set to true if certificate is self-signed.
        /// </summary>
        public readonly bool SelfSigned;
        /// <summary>
        /// The certificate signer ARN.
        /// </summary>
        public readonly string SignerArn;
        /// <summary>
        /// The update token.
        /// </summary>
        public readonly string UpdateToken;

        [OutputConstructor]
        private GetCertificateResult(
            string auditComment,

            string? configType,

            string description,

            string id,

            string name,

            string rulestack,

            string? scope,

            bool selfSigned,

            string signerArn,

            string updateToken)
        {
            AuditComment = auditComment;
            ConfigType = configType;
            Description = description;
            Id = id;
            Name = name;
            Rulestack = rulestack;
            Scope = scope;
            SelfSigned = selfSigned;
            SignerArn = signerArn;
            UpdateToken = updateToken;
        }
    }
}
