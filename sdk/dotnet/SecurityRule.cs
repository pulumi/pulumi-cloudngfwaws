// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.CloudNgfwAws
{
    /// <summary>
    /// Resource for security rule manipulation.
    /// 
    /// ## Admin Permission Type
    /// 
    /// * `Rulestack` (for `scope="Local"`)
    /// * `Global Rulestack` (for `scope="Global"`)
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using CloudNgfwAws = Pulumi.CloudNgfwAws;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var r = new CloudNgfwAws.Rulestack("r", new()
    ///     {
    ///         Name = "terraform-rulestack",
    ///         Scope = "Local",
    ///         AccountId = "123456789",
    ///         Description = "Made by Pulumi",
    ///         ProfileConfig = new CloudNgfwAws.Inputs.RulestackProfileConfigArgs
    ///         {
    ///             AntiSpyware = "BestPractice",
    ///         },
    ///     });
    /// 
    ///     var example = new CloudNgfwAws.SecurityRule("example", new()
    ///     {
    ///         Rulestack = r.Name,
    ///         RuleList = "LocalRule",
    ///         Priority = 3,
    ///         Name = "tf-security-rule",
    ///         Description = "Also configured by Terraform",
    ///         Source = new CloudNgfwAws.Inputs.SecurityRuleSourceArgs
    ///         {
    ///             Cidrs = new[]
    ///             {
    ///                 "any",
    ///             },
    ///         },
    ///         Destination = new CloudNgfwAws.Inputs.SecurityRuleDestinationArgs
    ///         {
    ///             Cidrs = new[]
    ///             {
    ///                 "192.168.0.0/16",
    ///             },
    ///         },
    ///         NegateDestination = true,
    ///         Applications = new[]
    ///         {
    ///             "any",
    ///         },
    ///         Category = null,
    ///         Action = "Allow",
    ///         Logging = true,
    ///         AuditComment = "initial config",
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// import name is &lt;scope&gt;:&lt;rulestack&gt;:&lt;rule_list&gt;:&lt;priority&gt;
    /// 
    /// ```sh
    /// $ pulumi import cloudngfwaws:index/securityRule:SecurityRule example Local:terraform-rulestack:LocalRule:3
    /// ```
    /// </summary>
    [CloudNgfwAwsResourceType("cloudngfwaws:index/securityRule:SecurityRule")]
    public partial class SecurityRule : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The action to take. Valid values are `Allow`, `DenySilent`, `DenyResetServer`, or `DenyResetBoth`.
        /// </summary>
        [Output("action")]
        public Output<string> Action { get; private set; } = null!;

        /// <summary>
        /// The list of applications.
        /// </summary>
        [Output("applications")]
        public Output<ImmutableArray<string>> Applications { get; private set; } = null!;

        /// <summary>
        /// The audit comment.
        /// </summary>
        [Output("auditComment")]
        public Output<string?> AuditComment { get; private set; } = null!;

        /// <summary>
        /// The category spec.
        /// </summary>
        [Output("category")]
        public Output<Outputs.SecurityRuleCategory> Category { get; private set; } = null!;

        /// <summary>
        /// Decryption rule type. Valid values are ``or`SSLOutboundInspection`.
        /// </summary>
        [Output("decryptionRuleType")]
        public Output<string?> DecryptionRuleType { get; private set; } = null!;

        /// <summary>
        /// The description.
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// The destination spec.
        /// </summary>
        [Output("destination")]
        public Output<Outputs.SecurityRuleDestination> Destination { get; private set; } = null!;

        /// <summary>
        /// Set to false to disable this rule. Defaults to `true`.
        /// </summary>
        [Output("enabled")]
        public Output<bool?> Enabled { get; private set; } = null!;

        /// <summary>
        /// Enable logging at end. Defaults to `true`.
        /// </summary>
        [Output("logging")]
        public Output<bool?> Logging { get; private set; } = null!;

        /// <summary>
        /// The name.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Negate the destination definition.
        /// </summary>
        [Output("negateDestination")]
        public Output<bool?> NegateDestination { get; private set; } = null!;

        /// <summary>
        /// Negate the source definition.
        /// </summary>
        [Output("negateSource")]
        public Output<bool?> NegateSource { get; private set; } = null!;

        /// <summary>
        /// The rule priority.
        /// </summary>
        [Output("priority")]
        public Output<int> Priority { get; private set; } = null!;

        /// <summary>
        /// Protocol port list.
        /// </summary>
        [Output("protPortLists")]
        public Output<ImmutableArray<string>> ProtPortLists { get; private set; } = null!;

        /// <summary>
        /// The protocol.
        /// </summary>
        [Output("protocol")]
        public Output<string?> Protocol { get; private set; } = null!;

        /// <summary>
        /// The rulebase. Valid values are `PreRule`, `PostRule`, or `LocalRule`. Defaults to `PreRule`.
        /// </summary>
        [Output("ruleList")]
        public Output<string?> RuleList { get; private set; } = null!;

        /// <summary>
        /// The rulestack.
        /// </summary>
        [Output("rulestack")]
        public Output<string> Rulestack { get; private set; } = null!;

        /// <summary>
        /// The rulestack's scope. A local rulestack will require that you've retrieved a LRA JWT. A global rulestack will require that you've retrieved a GRA JWT. Valid values are `Local` or `Global`. Defaults to `Local`.
        /// </summary>
        [Output("scope")]
        public Output<string?> Scope { get; private set; } = null!;

        /// <summary>
        /// The source spec.
        /// </summary>
        [Output("source")]
        public Output<Outputs.SecurityRuleSource> Source { get; private set; } = null!;

        /// <summary>
        /// The tags.
        /// </summary>
        [Output("tags")]
        public Output<ImmutableDictionary<string, string>?> Tags { get; private set; } = null!;

        /// <summary>
        /// The update token.
        /// </summary>
        [Output("updateToken")]
        public Output<string> UpdateToken { get; private set; } = null!;


        /// <summary>
        /// Create a SecurityRule resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public SecurityRule(string name, SecurityRuleArgs args, CustomResourceOptions? options = null)
            : base("cloudngfwaws:index/securityRule:SecurityRule", name, args ?? new SecurityRuleArgs(), MakeResourceOptions(options, ""))
        {
        }

        private SecurityRule(string name, Input<string> id, SecurityRuleState? state = null, CustomResourceOptions? options = null)
            : base("cloudngfwaws:index/securityRule:SecurityRule", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/pulumi/pulumi-cloudngfwaws",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing SecurityRule resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static SecurityRule Get(string name, Input<string> id, SecurityRuleState? state = null, CustomResourceOptions? options = null)
        {
            return new SecurityRule(name, id, state, options);
        }
    }

    public sealed class SecurityRuleArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The action to take. Valid values are `Allow`, `DenySilent`, `DenyResetServer`, or `DenyResetBoth`.
        /// </summary>
        [Input("action", required: true)]
        public Input<string> Action { get; set; } = null!;

        [Input("applications", required: true)]
        private InputList<string>? _applications;

        /// <summary>
        /// The list of applications.
        /// </summary>
        public InputList<string> Applications
        {
            get => _applications ?? (_applications = new InputList<string>());
            set => _applications = value;
        }

        /// <summary>
        /// The audit comment.
        /// </summary>
        [Input("auditComment")]
        public Input<string>? AuditComment { get; set; }

        /// <summary>
        /// The category spec.
        /// </summary>
        [Input("category", required: true)]
        public Input<Inputs.SecurityRuleCategoryArgs> Category { get; set; } = null!;

        /// <summary>
        /// Decryption rule type. Valid values are ``or`SSLOutboundInspection`.
        /// </summary>
        [Input("decryptionRuleType")]
        public Input<string>? DecryptionRuleType { get; set; }

        /// <summary>
        /// The description.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// The destination spec.
        /// </summary>
        [Input("destination", required: true)]
        public Input<Inputs.SecurityRuleDestinationArgs> Destination { get; set; } = null!;

        /// <summary>
        /// Set to false to disable this rule. Defaults to `true`.
        /// </summary>
        [Input("enabled")]
        public Input<bool>? Enabled { get; set; }

        /// <summary>
        /// Enable logging at end. Defaults to `true`.
        /// </summary>
        [Input("logging")]
        public Input<bool>? Logging { get; set; }

        /// <summary>
        /// The name.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Negate the destination definition.
        /// </summary>
        [Input("negateDestination")]
        public Input<bool>? NegateDestination { get; set; }

        /// <summary>
        /// Negate the source definition.
        /// </summary>
        [Input("negateSource")]
        public Input<bool>? NegateSource { get; set; }

        /// <summary>
        /// The rule priority.
        /// </summary>
        [Input("priority", required: true)]
        public Input<int> Priority { get; set; } = null!;

        [Input("protPortLists")]
        private InputList<string>? _protPortLists;

        /// <summary>
        /// Protocol port list.
        /// </summary>
        public InputList<string> ProtPortLists
        {
            get => _protPortLists ?? (_protPortLists = new InputList<string>());
            set => _protPortLists = value;
        }

        /// <summary>
        /// The protocol.
        /// </summary>
        [Input("protocol")]
        public Input<string>? Protocol { get; set; }

        /// <summary>
        /// The rulebase. Valid values are `PreRule`, `PostRule`, or `LocalRule`. Defaults to `PreRule`.
        /// </summary>
        [Input("ruleList")]
        public Input<string>? RuleList { get; set; }

        /// <summary>
        /// The rulestack.
        /// </summary>
        [Input("rulestack", required: true)]
        public Input<string> Rulestack { get; set; } = null!;

        /// <summary>
        /// The rulestack's scope. A local rulestack will require that you've retrieved a LRA JWT. A global rulestack will require that you've retrieved a GRA JWT. Valid values are `Local` or `Global`. Defaults to `Local`.
        /// </summary>
        [Input("scope")]
        public Input<string>? Scope { get; set; }

        /// <summary>
        /// The source spec.
        /// </summary>
        [Input("source", required: true)]
        public Input<Inputs.SecurityRuleSourceArgs> Source { get; set; } = null!;

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// The tags.
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        public SecurityRuleArgs()
        {
        }
        public static new SecurityRuleArgs Empty => new SecurityRuleArgs();
    }

    public sealed class SecurityRuleState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The action to take. Valid values are `Allow`, `DenySilent`, `DenyResetServer`, or `DenyResetBoth`.
        /// </summary>
        [Input("action")]
        public Input<string>? Action { get; set; }

        [Input("applications")]
        private InputList<string>? _applications;

        /// <summary>
        /// The list of applications.
        /// </summary>
        public InputList<string> Applications
        {
            get => _applications ?? (_applications = new InputList<string>());
            set => _applications = value;
        }

        /// <summary>
        /// The audit comment.
        /// </summary>
        [Input("auditComment")]
        public Input<string>? AuditComment { get; set; }

        /// <summary>
        /// The category spec.
        /// </summary>
        [Input("category")]
        public Input<Inputs.SecurityRuleCategoryGetArgs>? Category { get; set; }

        /// <summary>
        /// Decryption rule type. Valid values are ``or`SSLOutboundInspection`.
        /// </summary>
        [Input("decryptionRuleType")]
        public Input<string>? DecryptionRuleType { get; set; }

        /// <summary>
        /// The description.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// The destination spec.
        /// </summary>
        [Input("destination")]
        public Input<Inputs.SecurityRuleDestinationGetArgs>? Destination { get; set; }

        /// <summary>
        /// Set to false to disable this rule. Defaults to `true`.
        /// </summary>
        [Input("enabled")]
        public Input<bool>? Enabled { get; set; }

        /// <summary>
        /// Enable logging at end. Defaults to `true`.
        /// </summary>
        [Input("logging")]
        public Input<bool>? Logging { get; set; }

        /// <summary>
        /// The name.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Negate the destination definition.
        /// </summary>
        [Input("negateDestination")]
        public Input<bool>? NegateDestination { get; set; }

        /// <summary>
        /// Negate the source definition.
        /// </summary>
        [Input("negateSource")]
        public Input<bool>? NegateSource { get; set; }

        /// <summary>
        /// The rule priority.
        /// </summary>
        [Input("priority")]
        public Input<int>? Priority { get; set; }

        [Input("protPortLists")]
        private InputList<string>? _protPortLists;

        /// <summary>
        /// Protocol port list.
        /// </summary>
        public InputList<string> ProtPortLists
        {
            get => _protPortLists ?? (_protPortLists = new InputList<string>());
            set => _protPortLists = value;
        }

        /// <summary>
        /// The protocol.
        /// </summary>
        [Input("protocol")]
        public Input<string>? Protocol { get; set; }

        /// <summary>
        /// The rulebase. Valid values are `PreRule`, `PostRule`, or `LocalRule`. Defaults to `PreRule`.
        /// </summary>
        [Input("ruleList")]
        public Input<string>? RuleList { get; set; }

        /// <summary>
        /// The rulestack.
        /// </summary>
        [Input("rulestack")]
        public Input<string>? Rulestack { get; set; }

        /// <summary>
        /// The rulestack's scope. A local rulestack will require that you've retrieved a LRA JWT. A global rulestack will require that you've retrieved a GRA JWT. Valid values are `Local` or `Global`. Defaults to `Local`.
        /// </summary>
        [Input("scope")]
        public Input<string>? Scope { get; set; }

        /// <summary>
        /// The source spec.
        /// </summary>
        [Input("source")]
        public Input<Inputs.SecurityRuleSourceGetArgs>? Source { get; set; }

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// The tags.
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        /// <summary>
        /// The update token.
        /// </summary>
        [Input("updateToken")]
        public Input<string>? UpdateToken { get; set; }

        public SecurityRuleState()
        {
        }
        public static new SecurityRuleState Empty => new SecurityRuleState();
    }
}
