// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.CloudNgfwAws
{
    public static class GetAccounts
    {
        /// <summary>
        /// Data source get a list of Accounts.
        /// 
        /// 
        /// ## Admin Permission Type
        /// 
        /// * `Rulestack` (for `scope="Local"`)
        /// * `Global Rulestack` (for `scope="Global"`)
        /// </summary>
        public static Task<GetAccountsResult> InvokeAsync(GetAccountsArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetAccountsResult>("cloudngfwaws:index/getAccounts:getAccounts", args ?? new GetAccountsArgs(), options.WithDefaults());

        /// <summary>
        /// Data source get a list of Accounts.
        /// 
        /// 
        /// ## Admin Permission Type
        /// 
        /// * `Rulestack` (for `scope="Local"`)
        /// * `Global Rulestack` (for `scope="Global"`)
        /// </summary>
        public static Output<GetAccountsResult> Invoke(GetAccountsInvokeArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetAccountsResult>("cloudngfwaws:index/getAccounts:getAccounts", args ?? new GetAccountsInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// Data source get a list of Accounts.
        /// 
        /// 
        /// ## Admin Permission Type
        /// 
        /// * `Rulestack` (for `scope="Local"`)
        /// * `Global Rulestack` (for `scope="Global"`)
        /// </summary>
        public static Output<GetAccountsResult> Invoke(GetAccountsInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetAccountsResult>("cloudngfwaws:index/getAccounts:getAccounts", args ?? new GetAccountsInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetAccountsArgs : global::Pulumi.InvokeArgs
    {
        [Input("accountDetails")]
        private List<Inputs.GetAccountsAccountDetailArgs>? _accountDetails;

        /// <summary>
        /// List of account details.
        /// </summary>
        public List<Inputs.GetAccountsAccountDetailArgs> AccountDetails
        {
            get => _accountDetails ?? (_accountDetails = new List<Inputs.GetAccountsAccountDetailArgs>());
            set => _accountDetails = value;
        }

        [Input("accountIds")]
        private List<string>? _accountIds;

        /// <summary>
        /// List of account ids.
        /// </summary>
        public List<string> AccountIds
        {
            get => _accountIds ?? (_accountIds = new List<string>());
            set => _accountIds = value;
        }

        /// <summary>
        /// Flag to include account details while listing accounts. Defaults to `false`.
        /// </summary>
        [Input("describe")]
        public bool? Describe { get; set; }

        public GetAccountsArgs()
        {
        }
        public static new GetAccountsArgs Empty => new GetAccountsArgs();
    }

    public sealed class GetAccountsInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("accountDetails")]
        private InputList<Inputs.GetAccountsAccountDetailInputArgs>? _accountDetails;

        /// <summary>
        /// List of account details.
        /// </summary>
        public InputList<Inputs.GetAccountsAccountDetailInputArgs> AccountDetails
        {
            get => _accountDetails ?? (_accountDetails = new InputList<Inputs.GetAccountsAccountDetailInputArgs>());
            set => _accountDetails = value;
        }

        [Input("accountIds")]
        private InputList<string>? _accountIds;

        /// <summary>
        /// List of account ids.
        /// </summary>
        public InputList<string> AccountIds
        {
            get => _accountIds ?? (_accountIds = new InputList<string>());
            set => _accountIds = value;
        }

        /// <summary>
        /// Flag to include account details while listing accounts. Defaults to `false`.
        /// </summary>
        [Input("describe")]
        public Input<bool>? Describe { get; set; }

        public GetAccountsInvokeArgs()
        {
        }
        public static new GetAccountsInvokeArgs Empty => new GetAccountsInvokeArgs();
    }


    [OutputType]
    public sealed class GetAccountsResult
    {
        /// <summary>
        /// List of account details.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetAccountsAccountDetailResult> AccountDetails;
        /// <summary>
        /// List of account ids.
        /// </summary>
        public readonly ImmutableArray<string> AccountIds;
        /// <summary>
        /// Flag to include account details while listing accounts. Defaults to `false`.
        /// </summary>
        public readonly bool? Describe;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;

        [OutputConstructor]
        private GetAccountsResult(
            ImmutableArray<Outputs.GetAccountsAccountDetailResult> accountDetails,

            ImmutableArray<string> accountIds,

            bool? describe,

            string id)
        {
            AccountDetails = accountDetails;
            AccountIds = accountIds;
            Describe = describe;
            Id = id;
        }
    }
}
