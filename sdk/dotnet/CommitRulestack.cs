// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.CloudNgfwAws
{
    /// <summary>
    /// Resource for committing the rulestack config.
    /// 
    /// !&gt; **NOTE:** This resource should be placed in a separate plan as the plan that configures the rulestack and its contents.  If you do not, you will have perpetual configuration drift and will need to run your plan twice so the commit is performed.  Placing instances of this resource with instances of NGFW resources (such as `cloudngfwaws.Ngfw`) is fine.
    /// 
    /// ## Admin Permission Type
    /// 
    /// * `Rulestack` (for `scope="Local"`)
    /// * `Global Rulestack` (for `scope="Global"`)
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using CloudNgfwAws = Pulumi.CloudNgfwAws;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var example = new CloudNgfwAws.CommitRulestack("example", new()
    ///     {
    ///         Rulestack = "my-rulestack",
    ///     });
    /// 
    /// });
    /// ```
    /// </summary>
    [CloudNgfwAwsResourceType("cloudngfwaws:index/commitRulestack:CommitRulestack")]
    public partial class CommitRulestack : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Commit error messages.
        /// </summary>
        [Output("commitErrors")]
        public Output<ImmutableArray<string>> CommitErrors { get; private set; } = null!;

        /// <summary>
        /// The commit status.
        /// </summary>
        [Output("commitStatus")]
        public Output<string> CommitStatus { get; private set; } = null!;

        /// <summary>
        /// The rulestack.
        /// </summary>
        [Output("rulestack")]
        public Output<string> Rulestack { get; private set; } = null!;

        /// <summary>
        /// The rulestack's scope. A local rulestack will require that you've retrieved a LRA JWT. A global rulestack will require that you've retrieved a GRA JWT. Valid values are `Local` or `Global`. Defaults to `Local`.
        /// </summary>
        [Output("scope")]
        public Output<string?> Scope { get; private set; } = null!;

        /// <summary>
        /// The rulestack state. This can only be the default value. Defaults to `Running`.
        /// </summary>
        [Output("state")]
        public Output<string?> State { get; private set; } = null!;

        /// <summary>
        /// Validation error messages.
        /// </summary>
        [Output("validationErrors")]
        public Output<ImmutableArray<string>> ValidationErrors { get; private set; } = null!;

        /// <summary>
        /// The validation status.
        /// </summary>
        [Output("validationStatus")]
        public Output<string> ValidationStatus { get; private set; } = null!;


        /// <summary>
        /// Create a CommitRulestack resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public CommitRulestack(string name, CommitRulestackArgs args, CustomResourceOptions? options = null)
            : base("cloudngfwaws:index/commitRulestack:CommitRulestack", name, args ?? new CommitRulestackArgs(), MakeResourceOptions(options, ""))
        {
        }

        private CommitRulestack(string name, Input<string> id, CommitRulestackState? state = null, CustomResourceOptions? options = null)
            : base("cloudngfwaws:index/commitRulestack:CommitRulestack", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/pulumi/pulumi-cloudngfwaws",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing CommitRulestack resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static CommitRulestack Get(string name, Input<string> id, CommitRulestackState? state = null, CustomResourceOptions? options = null)
        {
            return new CommitRulestack(name, id, state, options);
        }
    }

    public sealed class CommitRulestackArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The rulestack.
        /// </summary>
        [Input("rulestack", required: true)]
        public Input<string> Rulestack { get; set; } = null!;

        /// <summary>
        /// The rulestack's scope. A local rulestack will require that you've retrieved a LRA JWT. A global rulestack will require that you've retrieved a GRA JWT. Valid values are `Local` or `Global`. Defaults to `Local`.
        /// </summary>
        [Input("scope")]
        public Input<string>? Scope { get; set; }

        /// <summary>
        /// The rulestack state. This can only be the default value. Defaults to `Running`.
        /// </summary>
        [Input("state")]
        public Input<string>? State { get; set; }

        public CommitRulestackArgs()
        {
        }
        public static new CommitRulestackArgs Empty => new CommitRulestackArgs();
    }

    public sealed class CommitRulestackState : global::Pulumi.ResourceArgs
    {
        [Input("commitErrors")]
        private InputList<string>? _commitErrors;

        /// <summary>
        /// Commit error messages.
        /// </summary>
        public InputList<string> CommitErrors
        {
            get => _commitErrors ?? (_commitErrors = new InputList<string>());
            set => _commitErrors = value;
        }

        /// <summary>
        /// The commit status.
        /// </summary>
        [Input("commitStatus")]
        public Input<string>? CommitStatus { get; set; }

        /// <summary>
        /// The rulestack.
        /// </summary>
        [Input("rulestack")]
        public Input<string>? Rulestack { get; set; }

        /// <summary>
        /// The rulestack's scope. A local rulestack will require that you've retrieved a LRA JWT. A global rulestack will require that you've retrieved a GRA JWT. Valid values are `Local` or `Global`. Defaults to `Local`.
        /// </summary>
        [Input("scope")]
        public Input<string>? Scope { get; set; }

        /// <summary>
        /// The rulestack state. This can only be the default value. Defaults to `Running`.
        /// </summary>
        [Input("state")]
        public Input<string>? State { get; set; }

        [Input("validationErrors")]
        private InputList<string>? _validationErrors;

        /// <summary>
        /// Validation error messages.
        /// </summary>
        public InputList<string> ValidationErrors
        {
            get => _validationErrors ?? (_validationErrors = new InputList<string>());
            set => _validationErrors = value;
        }

        /// <summary>
        /// The validation status.
        /// </summary>
        [Input("validationStatus")]
        public Input<string>? ValidationStatus { get; set; }

        public CommitRulestackState()
        {
        }
        public static new CommitRulestackState Empty => new CommitRulestackState();
    }
}
