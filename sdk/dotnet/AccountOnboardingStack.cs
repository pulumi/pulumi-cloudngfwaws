// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.CloudNgfwAws
{
    /// <summary>
    /// Resource for Account Onboarding.
    /// 
    /// ## Admin Permission Type
    /// 
    /// * `Rulestack` (for `scope="Local"`)
    /// * `Global Rulestack` (for `scope="Global"`)
    /// </summary>
    [CloudNgfwAwsResourceType("cloudngfwaws:index/accountOnboardingStack:AccountOnboardingStack")]
    public partial class AccountOnboardingStack : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The account IDs
        /// </summary>
        [Output("accountId")]
        public Output<string> AccountId { get; private set; } = null!;

        /// <summary>
        /// Audit Log Group Name
        /// </summary>
        [Output("auditlogGroup")]
        public Output<string?> AuditlogGroup { get; private set; } = null!;

        /// <summary>
        /// Role name to run the account onboarding CFT in each account to be onboarded.
        /// </summary>
        [Output("cftRoleName")]
        public Output<string> CftRoleName { get; private set; } = null!;

        /// <summary>
        /// Cloudwatch Log Group
        /// </summary>
        [Output("cloudwatchLogGroup")]
        public Output<string?> CloudwatchLogGroup { get; private set; } = null!;

        /// <summary>
        /// Cloudwatch Namespace
        /// </summary>
        [Output("cloudwatchNamespace")]
        public Output<string?> CloudwatchNamespace { get; private set; } = null!;

        /// <summary>
        /// The CloudNGFW can decrypt inbound and outbound traffic by providing a
        /// 					  certificate stored in secret Manager.
        /// 		 			  The role allows the service to access a certificate configured in the rulestack.
        /// 		 			  Only certificated tagged with PaloAltoCloudNGFW can be accessed
        /// </summary>
        [Output("decryptionCert")]
        public Output<string?> DecryptionCert { get; private set; } = null!;

        /// <summary>
        /// Controls whether cloud NGFW will create firewall endpoints automatitically in customer subnets
        /// </summary>
        [Output("endpointMode")]
        public Output<string?> EndpointMode { get; private set; } = null!;

        /// <summary>
        /// External Id of the onboarded account
        /// </summary>
        [Output("externalId")]
        public Output<string> ExternalId { get; private set; } = null!;

        /// <summary>
        /// Kinesis Firehose for logging
        /// </summary>
        [Output("kinesisFirehose")]
        public Output<string?> KinesisFirehose { get; private set; } = null!;

        /// <summary>
        /// Role name to run the account onboarding CFT in each account to be onboarded.
        /// </summary>
        [Output("onboardingCft")]
        public Output<string> OnboardingCft { get; private set; } = null!;

        /// <summary>
        /// S3 Bucket Name for Logging. Logging roles provide access to create log contents in this bucket.
        /// </summary>
        [Output("s3Bucket")]
        public Output<string?> S3Bucket { get; private set; } = null!;

        /// <summary>
        /// SNS topic ARN to publish the role ARNs
        /// </summary>
        [Output("snsTopicArn")]
        public Output<string> SnsTopicArn { get; private set; } = null!;

        /// <summary>
        /// ID of the account onboarding CFT stack
        /// </summary>
        [Output("stackId")]
        public Output<string> StackId { get; private set; } = null!;

        /// <summary>
        /// Status of the account onboarding CFT stack.
        /// </summary>
        [Output("stackStatus")]
        public Output<string> StackStatus { get; private set; } = null!;

        /// <summary>
        /// PANW Cloud NGFW trusted account Id
        /// </summary>
        [Output("trustedAccount")]
        public Output<string> TrustedAccount { get; private set; } = null!;


        /// <summary>
        /// Create a AccountOnboardingStack resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public AccountOnboardingStack(string name, AccountOnboardingStackArgs args, CustomResourceOptions? options = null)
            : base("cloudngfwaws:index/accountOnboardingStack:AccountOnboardingStack", name, args ?? new AccountOnboardingStackArgs(), MakeResourceOptions(options, ""))
        {
        }

        private AccountOnboardingStack(string name, Input<string> id, AccountOnboardingStackState? state = null, CustomResourceOptions? options = null)
            : base("cloudngfwaws:index/accountOnboardingStack:AccountOnboardingStack", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/pulumi/pulumi-cloudngfwaws",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing AccountOnboardingStack resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static AccountOnboardingStack Get(string name, Input<string> id, AccountOnboardingStackState? state = null, CustomResourceOptions? options = null)
        {
            return new AccountOnboardingStack(name, id, state, options);
        }
    }

    public sealed class AccountOnboardingStackArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The account IDs
        /// </summary>
        [Input("accountId", required: true)]
        public Input<string> AccountId { get; set; } = null!;

        /// <summary>
        /// Audit Log Group Name
        /// </summary>
        [Input("auditlogGroup")]
        public Input<string>? AuditlogGroup { get; set; }

        /// <summary>
        /// Role name to run the account onboarding CFT in each account to be onboarded.
        /// </summary>
        [Input("cftRoleName", required: true)]
        public Input<string> CftRoleName { get; set; } = null!;

        /// <summary>
        /// Cloudwatch Log Group
        /// </summary>
        [Input("cloudwatchLogGroup")]
        public Input<string>? CloudwatchLogGroup { get; set; }

        /// <summary>
        /// Cloudwatch Namespace
        /// </summary>
        [Input("cloudwatchNamespace")]
        public Input<string>? CloudwatchNamespace { get; set; }

        /// <summary>
        /// The CloudNGFW can decrypt inbound and outbound traffic by providing a
        /// 					  certificate stored in secret Manager.
        /// 		 			  The role allows the service to access a certificate configured in the rulestack.
        /// 		 			  Only certificated tagged with PaloAltoCloudNGFW can be accessed
        /// </summary>
        [Input("decryptionCert")]
        public Input<string>? DecryptionCert { get; set; }

        /// <summary>
        /// Controls whether cloud NGFW will create firewall endpoints automatitically in customer subnets
        /// </summary>
        [Input("endpointMode")]
        public Input<string>? EndpointMode { get; set; }

        /// <summary>
        /// External Id of the onboarded account
        /// </summary>
        [Input("externalId", required: true)]
        public Input<string> ExternalId { get; set; } = null!;

        /// <summary>
        /// Kinesis Firehose for logging
        /// </summary>
        [Input("kinesisFirehose")]
        public Input<string>? KinesisFirehose { get; set; }

        /// <summary>
        /// Role name to run the account onboarding CFT in each account to be onboarded.
        /// </summary>
        [Input("onboardingCft", required: true)]
        public Input<string> OnboardingCft { get; set; } = null!;

        /// <summary>
        /// S3 Bucket Name for Logging. Logging roles provide access to create log contents in this bucket.
        /// </summary>
        [Input("s3Bucket")]
        public Input<string>? S3Bucket { get; set; }

        /// <summary>
        /// SNS topic ARN to publish the role ARNs
        /// </summary>
        [Input("snsTopicArn", required: true)]
        public Input<string> SnsTopicArn { get; set; } = null!;

        /// <summary>
        /// ID of the account onboarding CFT stack
        /// </summary>
        [Input("stackId")]
        public Input<string>? StackId { get; set; }

        /// <summary>
        /// Status of the account onboarding CFT stack.
        /// </summary>
        [Input("stackStatus")]
        public Input<string>? StackStatus { get; set; }

        /// <summary>
        /// PANW Cloud NGFW trusted account Id
        /// </summary>
        [Input("trustedAccount", required: true)]
        public Input<string> TrustedAccount { get; set; } = null!;

        public AccountOnboardingStackArgs()
        {
        }
        public static new AccountOnboardingStackArgs Empty => new AccountOnboardingStackArgs();
    }

    public sealed class AccountOnboardingStackState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The account IDs
        /// </summary>
        [Input("accountId")]
        public Input<string>? AccountId { get; set; }

        /// <summary>
        /// Audit Log Group Name
        /// </summary>
        [Input("auditlogGroup")]
        public Input<string>? AuditlogGroup { get; set; }

        /// <summary>
        /// Role name to run the account onboarding CFT in each account to be onboarded.
        /// </summary>
        [Input("cftRoleName")]
        public Input<string>? CftRoleName { get; set; }

        /// <summary>
        /// Cloudwatch Log Group
        /// </summary>
        [Input("cloudwatchLogGroup")]
        public Input<string>? CloudwatchLogGroup { get; set; }

        /// <summary>
        /// Cloudwatch Namespace
        /// </summary>
        [Input("cloudwatchNamespace")]
        public Input<string>? CloudwatchNamespace { get; set; }

        /// <summary>
        /// The CloudNGFW can decrypt inbound and outbound traffic by providing a
        /// 					  certificate stored in secret Manager.
        /// 		 			  The role allows the service to access a certificate configured in the rulestack.
        /// 		 			  Only certificated tagged with PaloAltoCloudNGFW can be accessed
        /// </summary>
        [Input("decryptionCert")]
        public Input<string>? DecryptionCert { get; set; }

        /// <summary>
        /// Controls whether cloud NGFW will create firewall endpoints automatitically in customer subnets
        /// </summary>
        [Input("endpointMode")]
        public Input<string>? EndpointMode { get; set; }

        /// <summary>
        /// External Id of the onboarded account
        /// </summary>
        [Input("externalId")]
        public Input<string>? ExternalId { get; set; }

        /// <summary>
        /// Kinesis Firehose for logging
        /// </summary>
        [Input("kinesisFirehose")]
        public Input<string>? KinesisFirehose { get; set; }

        /// <summary>
        /// Role name to run the account onboarding CFT in each account to be onboarded.
        /// </summary>
        [Input("onboardingCft")]
        public Input<string>? OnboardingCft { get; set; }

        /// <summary>
        /// S3 Bucket Name for Logging. Logging roles provide access to create log contents in this bucket.
        /// </summary>
        [Input("s3Bucket")]
        public Input<string>? S3Bucket { get; set; }

        /// <summary>
        /// SNS topic ARN to publish the role ARNs
        /// </summary>
        [Input("snsTopicArn")]
        public Input<string>? SnsTopicArn { get; set; }

        /// <summary>
        /// ID of the account onboarding CFT stack
        /// </summary>
        [Input("stackId")]
        public Input<string>? StackId { get; set; }

        /// <summary>
        /// Status of the account onboarding CFT stack.
        /// </summary>
        [Input("stackStatus")]
        public Input<string>? StackStatus { get; set; }

        /// <summary>
        /// PANW Cloud NGFW trusted account Id
        /// </summary>
        [Input("trustedAccount")]
        public Input<string>? TrustedAccount { get; set; }

        public AccountOnboardingStackState()
        {
        }
        public static new AccountOnboardingStackState Empty => new AccountOnboardingStackState();
    }
}
