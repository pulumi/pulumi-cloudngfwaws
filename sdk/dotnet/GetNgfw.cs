// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.CloudNgfwAws
{
    public static class GetNgfw
    {
        /// <summary>
        /// Data source for retrieving NGFW information.
        /// 
        /// 
        /// ## Admin Permission Type
        /// 
        /// * `Firewall`
        /// 
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using CloudNgfwAws = Pulumi.CloudNgfwAws;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = CloudNgfwAws.GetNgfw.Invoke(new()
        ///     {
        ///         Name = "example-instance",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetNgfwResult> InvokeAsync(GetNgfwArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetNgfwResult>("cloudngfwaws:index/getNgfw:getNgfw", args ?? new GetNgfwArgs(), options.WithDefaults());

        /// <summary>
        /// Data source for retrieving NGFW information.
        /// 
        /// 
        /// ## Admin Permission Type
        /// 
        /// * `Firewall`
        /// 
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using CloudNgfwAws = Pulumi.CloudNgfwAws;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = CloudNgfwAws.GetNgfw.Invoke(new()
        ///     {
        ///         Name = "example-instance",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetNgfwResult> Invoke(GetNgfwInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetNgfwResult>("cloudngfwaws:index/getNgfw:getNgfw", args ?? new GetNgfwInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// Data source for retrieving NGFW information.
        /// 
        /// 
        /// ## Admin Permission Type
        /// 
        /// * `Firewall`
        /// 
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using CloudNgfwAws = Pulumi.CloudNgfwAws;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = CloudNgfwAws.GetNgfw.Invoke(new()
        ///     {
        ///         Name = "example-instance",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetNgfwResult> Invoke(GetNgfwInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetNgfwResult>("cloudngfwaws:index/getNgfw:getNgfw", args ?? new GetNgfwInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetNgfwArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The account ID. This field is mandatory if using multiple accounts.
        /// </summary>
        [Input("accountId")]
        public string? AccountId { get; set; }

        /// <summary>
        /// The NGFW name.
        /// </summary>
        [Input("name", required: true)]
        public string Name { get; set; } = null!;

        public GetNgfwArgs()
        {
        }
        public static new GetNgfwArgs Empty => new GetNgfwArgs();
    }

    public sealed class GetNgfwInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The account ID. This field is mandatory if using multiple accounts.
        /// </summary>
        [Input("accountId")]
        public Input<string>? AccountId { get; set; }

        /// <summary>
        /// The NGFW name.
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        public GetNgfwInvokeArgs()
        {
        }
        public static new GetNgfwInvokeArgs Empty => new GetNgfwInvokeArgs();
    }


    [OutputType]
    public sealed class GetNgfwResult
    {
        /// <summary>
        /// The account ID. This field is mandatory if using multiple accounts.
        /// </summary>
        public readonly string? AccountId;
        /// <summary>
        /// App-ID version number.
        /// </summary>
        public readonly string AppIdVersion;
        /// <summary>
        /// Automatic App-ID upgrade version number.
        /// </summary>
        public readonly bool AutomaticUpgradeAppIdVersion;
        /// <summary>
        /// The description.
        /// </summary>
        public readonly string Description;
        /// <summary>
        /// Set endpoint mode from the following options. Valid values are `ServiceManaged` or `CustomerManaged`.
        /// </summary>
        public readonly string EndpointMode;
        /// <summary>
        /// The endpoint service name.
        /// </summary>
        public readonly string EndpointServiceName;
        /// <summary>
        /// The Id of the NGFW.
        /// </summary>
        public readonly string FirewallId;
        /// <summary>
        /// The global rulestack for this NGFW.
        /// </summary>
        public readonly string GlobalRulestack;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The link ID.
        /// </summary>
        public readonly string LinkId;
        /// <summary>
        /// The link status.
        /// </summary>
        public readonly string LinkStatus;
        /// <summary>
        /// Share NGFW with Multiple VPCs. This feature can be enabled only if the endpoint_mode is CustomerManaged.
        /// </summary>
        public readonly bool MultiVpc;
        /// <summary>
        /// The NGFW name.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// The rulestack for this NGFW.
        /// </summary>
        public readonly string Rulestack;
        public readonly ImmutableArray<Outputs.GetNgfwStatusResult> Statuses;
        /// <summary>
        /// Subnet mappings.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetNgfwSubnetMappingResult> SubnetMappings;
        /// <summary>
        /// The tags.
        /// </summary>
        public readonly ImmutableDictionary<string, string> Tags;
        /// <summary>
        /// The update token.
        /// </summary>
        public readonly string UpdateToken;
        /// <summary>
        /// The vpc id.
        /// </summary>
        public readonly string VpcId;

        [OutputConstructor]
        private GetNgfwResult(
            string? accountId,

            string appIdVersion,

            bool automaticUpgradeAppIdVersion,

            string description,

            string endpointMode,

            string endpointServiceName,

            string firewallId,

            string globalRulestack,

            string id,

            string linkId,

            string linkStatus,

            bool multiVpc,

            string name,

            string rulestack,

            ImmutableArray<Outputs.GetNgfwStatusResult> statuses,

            ImmutableArray<Outputs.GetNgfwSubnetMappingResult> subnetMappings,

            ImmutableDictionary<string, string> tags,

            string updateToken,

            string vpcId)
        {
            AccountId = accountId;
            AppIdVersion = appIdVersion;
            AutomaticUpgradeAppIdVersion = automaticUpgradeAppIdVersion;
            Description = description;
            EndpointMode = endpointMode;
            EndpointServiceName = endpointServiceName;
            FirewallId = firewallId;
            GlobalRulestack = globalRulestack;
            Id = id;
            LinkId = linkId;
            LinkStatus = linkStatus;
            MultiVpc = multiVpc;
            Name = name;
            Rulestack = rulestack;
            Statuses = statuses;
            SubnetMappings = subnetMappings;
            Tags = tags;
            UpdateToken = updateToken;
            VpcId = vpcId;
        }
    }
}
