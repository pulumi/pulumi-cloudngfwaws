// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.CloudNgfwAws
{
    public static class GetNgfw
    {
        /// <summary>
        /// Data source for retrieving NGFW information.
        /// 
        /// 
        /// ## Admin Permission Type
        /// 
        /// * `Firewall`
        /// 
        /// 
        /// ## Example Usage
        /// </summary>
        public static Task<GetNgfwResult> InvokeAsync(GetNgfwArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetNgfwResult>("cloudngfwaws:index/getNgfw:getNgfw", args ?? new GetNgfwArgs(), options.WithDefaults());

        /// <summary>
        /// Data source for retrieving NGFW information.
        /// 
        /// 
        /// ## Admin Permission Type
        /// 
        /// * `Firewall`
        /// 
        /// 
        /// ## Example Usage
        /// </summary>
        public static Output<GetNgfwResult> Invoke(GetNgfwInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetNgfwResult>("cloudngfwaws:index/getNgfw:getNgfw", args ?? new GetNgfwInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// Data source for retrieving NGFW information.
        /// 
        /// 
        /// ## Admin Permission Type
        /// 
        /// * `Firewall`
        /// 
        /// 
        /// ## Example Usage
        /// </summary>
        public static Output<GetNgfwResult> Invoke(GetNgfwInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetNgfwResult>("cloudngfwaws:index/getNgfw:getNgfw", args ?? new GetNgfwInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetNgfwArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The Firewall ID.
        /// </summary>
        [Input("firewallId", required: true)]
        public string FirewallId { get; set; } = null!;

        public GetNgfwArgs()
        {
        }
        public static new GetNgfwArgs Empty => new GetNgfwArgs();
    }

    public sealed class GetNgfwInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The Firewall ID.
        /// </summary>
        [Input("firewallId", required: true)]
        public Input<string> FirewallId { get; set; } = null!;

        public GetNgfwInvokeArgs()
        {
        }
        public static new GetNgfwInvokeArgs Empty => new GetNgfwInvokeArgs();
    }


    [OutputType]
    public sealed class GetNgfwResult
    {
        /// <summary>
        /// The description.
        /// </summary>
        public readonly string AccountId;
        /// <summary>
        /// The list of allowed accounts for this NGFW.
        /// </summary>
        public readonly ImmutableArray<string> AllowlistAccounts;
        /// <summary>
        /// App-ID version number.
        /// </summary>
        public readonly string AppIdVersion;
        /// <summary>
        /// Automatic App-ID upgrade version number.
        /// </summary>
        public readonly bool AutomaticUpgradeAppIdVersion;
        /// <summary>
        /// The list of availability zones for this NGFW.
        /// </summary>
        public readonly ImmutableArray<string> AzLists;
        /// <summary>
        /// Enables or disables change protection for the NGFW.
        /// </summary>
        public readonly ImmutableArray<string> ChangeProtections;
        /// <summary>
        /// The update token.
        /// </summary>
        public readonly string DeploymentUpdateToken;
        /// <summary>
        /// The NGFW description.
        /// </summary>
        public readonly string Description;
        public readonly ImmutableArray<Outputs.GetNgfwEgressNatResult> EgressNats;
        /// <summary>
        /// Set endpoint mode from the following options. Valid values are `ServiceManaged` or `CustomerManaged`.
        /// </summary>
        public readonly string EndpointMode;
        /// <summary>
        /// The endpoint service name.
        /// </summary>
        public readonly string EndpointServiceName;
        public readonly ImmutableArray<Outputs.GetNgfwEndpointResult> Endpoints;
        /// <summary>
        /// The Firewall ID.
        /// </summary>
        public readonly string FirewallId;
        /// <summary>
        /// The global rulestack for this NGFW.
        /// </summary>
        public readonly string GlobalRulestack;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The link ID.
        /// </summary>
        public readonly string LinkId;
        /// <summary>
        /// The link status.
        /// </summary>
        public readonly string LinkStatus;
        /// <summary>
        /// Share NGFW with Multiple VPCs. This feature can be enabled only if the EndpointMode is CustomerManaged.
        /// </summary>
        public readonly bool MultiVpc;
        /// <summary>
        /// The NGFW name.
        /// </summary>
        public readonly string Name;
        public readonly ImmutableArray<Outputs.GetNgfwPrivateAccessResult> PrivateAccesses;
        /// <summary>
        /// The rulestack for this NGFW.
        /// </summary>
        public readonly string Rulestack;
        public readonly ImmutableArray<Outputs.GetNgfwStatusResult> Statuses;
        /// <summary>
        /// Subnet mappings.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetNgfwSubnetMappingResult> SubnetMappings;
        /// <summary>
        /// The tags.
        /// </summary>
        public readonly ImmutableDictionary<string, string> Tags;
        /// <summary>
        /// The update token.
        /// </summary>
        public readonly string UpdateToken;
        public readonly ImmutableArray<Outputs.GetNgfwUserIdResult> UserIds;
        /// <summary>
        /// The VPC ID for the NGFW.
        /// </summary>
        public readonly string VpcId;

        [OutputConstructor]
        private GetNgfwResult(
            string accountId,

            ImmutableArray<string> allowlistAccounts,

            string appIdVersion,

            bool automaticUpgradeAppIdVersion,

            ImmutableArray<string> azLists,

            ImmutableArray<string> changeProtections,

            string deploymentUpdateToken,

            string description,

            ImmutableArray<Outputs.GetNgfwEgressNatResult> egressNats,

            string endpointMode,

            string endpointServiceName,

            ImmutableArray<Outputs.GetNgfwEndpointResult> endpoints,

            string firewallId,

            string globalRulestack,

            string id,

            string linkId,

            string linkStatus,

            bool multiVpc,

            string name,

            ImmutableArray<Outputs.GetNgfwPrivateAccessResult> privateAccesses,

            string rulestack,

            ImmutableArray<Outputs.GetNgfwStatusResult> statuses,

            ImmutableArray<Outputs.GetNgfwSubnetMappingResult> subnetMappings,

            ImmutableDictionary<string, string> tags,

            string updateToken,

            ImmutableArray<Outputs.GetNgfwUserIdResult> userIds,

            string vpcId)
        {
            AccountId = accountId;
            AllowlistAccounts = allowlistAccounts;
            AppIdVersion = appIdVersion;
            AutomaticUpgradeAppIdVersion = automaticUpgradeAppIdVersion;
            AzLists = azLists;
            ChangeProtections = changeProtections;
            DeploymentUpdateToken = deploymentUpdateToken;
            Description = description;
            EgressNats = egressNats;
            EndpointMode = endpointMode;
            EndpointServiceName = endpointServiceName;
            Endpoints = endpoints;
            FirewallId = firewallId;
            GlobalRulestack = globalRulestack;
            Id = id;
            LinkId = linkId;
            LinkStatus = linkStatus;
            MultiVpc = multiVpc;
            Name = name;
            PrivateAccesses = privateAccesses;
            Rulestack = rulestack;
            Statuses = statuses;
            SubnetMappings = subnetMappings;
            Tags = tags;
            UpdateToken = updateToken;
            UserIds = userIds;
            VpcId = vpcId;
        }
    }
}
