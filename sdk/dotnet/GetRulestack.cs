// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.CloudNgfwAws
{
    public static class GetRulestack
    {
        /// <summary>
        /// Data source for retrieving rulestack information.
        /// 
        /// 
        /// ## Admin Permission Type
        /// 
        /// * `Rulestack` (for `scope="Local"`)
        /// * `Global Rulestack` (for `scope="Global"`)
        /// 
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using CloudNgfwAws = Pulumi.CloudNgfwAws;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = CloudNgfwAws.GetRulestack.Invoke(new()
        ///     {
        ///         Name = "my-rulestack-name",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetRulestackResult> InvokeAsync(GetRulestackArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetRulestackResult>("cloudngfwaws:index/getRulestack:getRulestack", args ?? new GetRulestackArgs(), options.WithDefaults());

        /// <summary>
        /// Data source for retrieving rulestack information.
        /// 
        /// 
        /// ## Admin Permission Type
        /// 
        /// * `Rulestack` (for `scope="Local"`)
        /// * `Global Rulestack` (for `scope="Global"`)
        /// 
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using CloudNgfwAws = Pulumi.CloudNgfwAws;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = CloudNgfwAws.GetRulestack.Invoke(new()
        ///     {
        ///         Name = "my-rulestack-name",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetRulestackResult> Invoke(GetRulestackInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetRulestackResult>("cloudngfwaws:index/getRulestack:getRulestack", args ?? new GetRulestackInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// Data source for retrieving rulestack information.
        /// 
        /// 
        /// ## Admin Permission Type
        /// 
        /// * `Rulestack` (for `scope="Local"`)
        /// * `Global Rulestack` (for `scope="Global"`)
        /// 
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using CloudNgfwAws = Pulumi.CloudNgfwAws;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = CloudNgfwAws.GetRulestack.Invoke(new()
        ///     {
        ///         Name = "my-rulestack-name",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetRulestackResult> Invoke(GetRulestackInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetRulestackResult>("cloudngfwaws:index/getRulestack:getRulestack", args ?? new GetRulestackInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetRulestackArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Retrieve either the candidate or running config. Valid values are `candidate` or `running`. Defaults to `candidate`.
        /// </summary>
        [Input("configType")]
        public string? ConfigType { get; set; }

        /// <summary>
        /// The name.
        /// </summary>
        [Input("name", required: true)]
        public string Name { get; set; } = null!;

        /// <summary>
        /// The rulestack's scope. A local rulestack will require that you've retrieved a LRA JWT. A global rulestack will require that you've retrieved a GRA JWT. Valid values are `Local` or `Global`. Defaults to `Local`.
        /// </summary>
        [Input("scope")]
        public string? Scope { get; set; }

        public GetRulestackArgs()
        {
        }
        public static new GetRulestackArgs Empty => new GetRulestackArgs();
    }

    public sealed class GetRulestackInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Retrieve either the candidate or running config. Valid values are `candidate` or `running`. Defaults to `candidate`.
        /// </summary>
        [Input("configType")]
        public Input<string>? ConfigType { get; set; }

        /// <summary>
        /// The name.
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        /// <summary>
        /// The rulestack's scope. A local rulestack will require that you've retrieved a LRA JWT. A global rulestack will require that you've retrieved a GRA JWT. Valid values are `Local` or `Global`. Defaults to `Local`.
        /// </summary>
        [Input("scope")]
        public Input<string>? Scope { get; set; }

        public GetRulestackInvokeArgs()
        {
        }
        public static new GetRulestackInvokeArgs Empty => new GetRulestackInvokeArgs();
    }


    [OutputType]
    public sealed class GetRulestackResult
    {
        /// <summary>
        /// Account group.
        /// </summary>
        public readonly string AccountGroup;
        /// <summary>
        /// The account ID.
        /// </summary>
        public readonly string AccountId;
        /// <summary>
        /// Retrieve either the candidate or running config. Valid values are `candidate` or `running`. Defaults to `candidate`.
        /// </summary>
        public readonly string? ConfigType;
        /// <summary>
        /// The description.
        /// </summary>
        public readonly string Description;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// Lookup x forwarded for.
        /// </summary>
        public readonly string LookupXForwardedFor;
        /// <summary>
        /// Minimum App-ID version number.
        /// </summary>
        public readonly string MinimumAppIdVersion;
        /// <summary>
        /// The name.
        /// </summary>
        public readonly string Name;
        public readonly ImmutableArray<Outputs.GetRulestackProfileConfigResult> ProfileConfigs;
        /// <summary>
        /// The rulestack's scope. A local rulestack will require that you've retrieved a LRA JWT. A global rulestack will require that you've retrieved a GRA JWT. Valid values are `Local` or `Global`. Defaults to `Local`.
        /// </summary>
        public readonly string? Scope;
        /// <summary>
        /// The rulestack state.
        /// </summary>
        public readonly string State;
        /// <summary>
        /// The tags.
        /// </summary>
        public readonly ImmutableDictionary<string, string> Tags;

        [OutputConstructor]
        private GetRulestackResult(
            string accountGroup,

            string accountId,

            string? configType,

            string description,

            string id,

            string lookupXForwardedFor,

            string minimumAppIdVersion,

            string name,

            ImmutableArray<Outputs.GetRulestackProfileConfigResult> profileConfigs,

            string? scope,

            string state,

            ImmutableDictionary<string, string> tags)
        {
            AccountGroup = accountGroup;
            AccountId = accountId;
            ConfigType = configType;
            Description = description;
            Id = id;
            LookupXForwardedFor = lookupXForwardedFor;
            MinimumAppIdVersion = minimumAppIdVersion;
            Name = name;
            ProfileConfigs = profileConfigs;
            Scope = scope;
            State = state;
            Tags = tags;
        }
    }
}
