// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cloudngfwaws

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-cloudngfwaws/sdk/go/cloudngfwaws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Data source for retrieving NGFW information.
//
// ## Admin Permission Type
//
// * `Firewall`
//
// ## Example Usage
func LookupNgfw(ctx *pulumi.Context, args *LookupNgfwArgs, opts ...pulumi.InvokeOption) (*LookupNgfwResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupNgfwResult
	err := ctx.Invoke("cloudngfwaws:index/getNgfw:getNgfw", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getNgfw.
type LookupNgfwArgs struct {
	// The Firewall ID.
	FirewallId string `pulumi:"firewallId"`
}

// A collection of values returned by getNgfw.
type LookupNgfwResult struct {
	// The description.
	AccountId string `pulumi:"accountId"`
	// The list of allowed accounts for this NGFW.
	AllowlistAccounts []string `pulumi:"allowlistAccounts"`
	// App-ID version number.
	AppIdVersion string `pulumi:"appIdVersion"`
	// Automatic App-ID upgrade version number.
	AutomaticUpgradeAppIdVersion bool `pulumi:"automaticUpgradeAppIdVersion"`
	// The list of availability zones for this NGFW.
	AzLists []string `pulumi:"azLists"`
	// Enables or disables change protection for the NGFW.
	ChangeProtections []string `pulumi:"changeProtections"`
	// The update token.
	DeploymentUpdateToken string `pulumi:"deploymentUpdateToken"`
	// The NGFW description.
	Description string             `pulumi:"description"`
	EgressNats  []GetNgfwEgressNat `pulumi:"egressNats"`
	// Set endpoint mode from the following options. Valid values are `ServiceManaged` or `CustomerManaged`.
	EndpointMode string `pulumi:"endpointMode"`
	// The endpoint service name.
	EndpointServiceName string            `pulumi:"endpointServiceName"`
	Endpoints           []GetNgfwEndpoint `pulumi:"endpoints"`
	// The Firewall ID.
	FirewallId string `pulumi:"firewallId"`
	// The global rulestack for this NGFW.
	GlobalRulestack string `pulumi:"globalRulestack"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// The link ID.
	LinkId string `pulumi:"linkId"`
	// The link status.
	LinkStatus string `pulumi:"linkStatus"`
	// Share NGFW with Multiple VPCs. This feature can be enabled only if the endpointMode is CustomerManaged.
	MultiVpc bool `pulumi:"multiVpc"`
	// The NGFW name.
	Name            string                 `pulumi:"name"`
	PrivateAccesses []GetNgfwPrivateAccess `pulumi:"privateAccesses"`
	// The rulestack for this NGFW.
	Rulestack string          `pulumi:"rulestack"`
	Statuses  []GetNgfwStatus `pulumi:"statuses"`
	// Subnet mappings.
	SubnetMappings []GetNgfwSubnetMapping `pulumi:"subnetMappings"`
	// The tags.
	Tags map[string]string `pulumi:"tags"`
	// The update token.
	UpdateToken string          `pulumi:"updateToken"`
	UserIds     []GetNgfwUserId `pulumi:"userIds"`
	// The VPC ID for the NGFW.
	VpcId string `pulumi:"vpcId"`
}

func LookupNgfwOutput(ctx *pulumi.Context, args LookupNgfwOutputArgs, opts ...pulumi.InvokeOption) LookupNgfwResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupNgfwResultOutput, error) {
			args := v.(LookupNgfwArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("cloudngfwaws:index/getNgfw:getNgfw", args, LookupNgfwResultOutput{}, options).(LookupNgfwResultOutput), nil
		}).(LookupNgfwResultOutput)
}

// A collection of arguments for invoking getNgfw.
type LookupNgfwOutputArgs struct {
	// The Firewall ID.
	FirewallId pulumi.StringInput `pulumi:"firewallId"`
}

func (LookupNgfwOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupNgfwArgs)(nil)).Elem()
}

// A collection of values returned by getNgfw.
type LookupNgfwResultOutput struct{ *pulumi.OutputState }

func (LookupNgfwResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupNgfwResult)(nil)).Elem()
}

func (o LookupNgfwResultOutput) ToLookupNgfwResultOutput() LookupNgfwResultOutput {
	return o
}

func (o LookupNgfwResultOutput) ToLookupNgfwResultOutputWithContext(ctx context.Context) LookupNgfwResultOutput {
	return o
}

// The description.
func (o LookupNgfwResultOutput) AccountId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupNgfwResult) string { return v.AccountId }).(pulumi.StringOutput)
}

// The list of allowed accounts for this NGFW.
func (o LookupNgfwResultOutput) AllowlistAccounts() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupNgfwResult) []string { return v.AllowlistAccounts }).(pulumi.StringArrayOutput)
}

// App-ID version number.
func (o LookupNgfwResultOutput) AppIdVersion() pulumi.StringOutput {
	return o.ApplyT(func(v LookupNgfwResult) string { return v.AppIdVersion }).(pulumi.StringOutput)
}

// Automatic App-ID upgrade version number.
func (o LookupNgfwResultOutput) AutomaticUpgradeAppIdVersion() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupNgfwResult) bool { return v.AutomaticUpgradeAppIdVersion }).(pulumi.BoolOutput)
}

// The list of availability zones for this NGFW.
func (o LookupNgfwResultOutput) AzLists() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupNgfwResult) []string { return v.AzLists }).(pulumi.StringArrayOutput)
}

// Enables or disables change protection for the NGFW.
func (o LookupNgfwResultOutput) ChangeProtections() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupNgfwResult) []string { return v.ChangeProtections }).(pulumi.StringArrayOutput)
}

// The update token.
func (o LookupNgfwResultOutput) DeploymentUpdateToken() pulumi.StringOutput {
	return o.ApplyT(func(v LookupNgfwResult) string { return v.DeploymentUpdateToken }).(pulumi.StringOutput)
}

// The NGFW description.
func (o LookupNgfwResultOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v LookupNgfwResult) string { return v.Description }).(pulumi.StringOutput)
}

func (o LookupNgfwResultOutput) EgressNats() GetNgfwEgressNatArrayOutput {
	return o.ApplyT(func(v LookupNgfwResult) []GetNgfwEgressNat { return v.EgressNats }).(GetNgfwEgressNatArrayOutput)
}

// Set endpoint mode from the following options. Valid values are `ServiceManaged` or `CustomerManaged`.
func (o LookupNgfwResultOutput) EndpointMode() pulumi.StringOutput {
	return o.ApplyT(func(v LookupNgfwResult) string { return v.EndpointMode }).(pulumi.StringOutput)
}

// The endpoint service name.
func (o LookupNgfwResultOutput) EndpointServiceName() pulumi.StringOutput {
	return o.ApplyT(func(v LookupNgfwResult) string { return v.EndpointServiceName }).(pulumi.StringOutput)
}

func (o LookupNgfwResultOutput) Endpoints() GetNgfwEndpointArrayOutput {
	return o.ApplyT(func(v LookupNgfwResult) []GetNgfwEndpoint { return v.Endpoints }).(GetNgfwEndpointArrayOutput)
}

// The Firewall ID.
func (o LookupNgfwResultOutput) FirewallId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupNgfwResult) string { return v.FirewallId }).(pulumi.StringOutput)
}

// The global rulestack for this NGFW.
func (o LookupNgfwResultOutput) GlobalRulestack() pulumi.StringOutput {
	return o.ApplyT(func(v LookupNgfwResult) string { return v.GlobalRulestack }).(pulumi.StringOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o LookupNgfwResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupNgfwResult) string { return v.Id }).(pulumi.StringOutput)
}

// The link ID.
func (o LookupNgfwResultOutput) LinkId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupNgfwResult) string { return v.LinkId }).(pulumi.StringOutput)
}

// The link status.
func (o LookupNgfwResultOutput) LinkStatus() pulumi.StringOutput {
	return o.ApplyT(func(v LookupNgfwResult) string { return v.LinkStatus }).(pulumi.StringOutput)
}

// Share NGFW with Multiple VPCs. This feature can be enabled only if the endpointMode is CustomerManaged.
func (o LookupNgfwResultOutput) MultiVpc() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupNgfwResult) bool { return v.MultiVpc }).(pulumi.BoolOutput)
}

// The NGFW name.
func (o LookupNgfwResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupNgfwResult) string { return v.Name }).(pulumi.StringOutput)
}

func (o LookupNgfwResultOutput) PrivateAccesses() GetNgfwPrivateAccessArrayOutput {
	return o.ApplyT(func(v LookupNgfwResult) []GetNgfwPrivateAccess { return v.PrivateAccesses }).(GetNgfwPrivateAccessArrayOutput)
}

// The rulestack for this NGFW.
func (o LookupNgfwResultOutput) Rulestack() pulumi.StringOutput {
	return o.ApplyT(func(v LookupNgfwResult) string { return v.Rulestack }).(pulumi.StringOutput)
}

func (o LookupNgfwResultOutput) Statuses() GetNgfwStatusArrayOutput {
	return o.ApplyT(func(v LookupNgfwResult) []GetNgfwStatus { return v.Statuses }).(GetNgfwStatusArrayOutput)
}

// Subnet mappings.
func (o LookupNgfwResultOutput) SubnetMappings() GetNgfwSubnetMappingArrayOutput {
	return o.ApplyT(func(v LookupNgfwResult) []GetNgfwSubnetMapping { return v.SubnetMappings }).(GetNgfwSubnetMappingArrayOutput)
}

// The tags.
func (o LookupNgfwResultOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v LookupNgfwResult) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

// The update token.
func (o LookupNgfwResultOutput) UpdateToken() pulumi.StringOutput {
	return o.ApplyT(func(v LookupNgfwResult) string { return v.UpdateToken }).(pulumi.StringOutput)
}

func (o LookupNgfwResultOutput) UserIds() GetNgfwUserIdArrayOutput {
	return o.ApplyT(func(v LookupNgfwResult) []GetNgfwUserId { return v.UserIds }).(GetNgfwUserIdArrayOutput)
}

// The VPC ID for the NGFW.
func (o LookupNgfwResultOutput) VpcId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupNgfwResult) string { return v.VpcId }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupNgfwResultOutput{})
}
