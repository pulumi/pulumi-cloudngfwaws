// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cloudngfwaws

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-cloudngfwaws/sdk/go/cloudngfwaws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Data source for retrieving security rule information.
//
// ## Admin Permission Type
//
// * `Rulestack` (for `scope="Local"`)
// * `Global Rulestack` (for `scope="Global"`)
//
// ## Example Usage
func LookupSecurityRule(ctx *pulumi.Context, args *LookupSecurityRuleArgs, opts ...pulumi.InvokeOption) (*LookupSecurityRuleResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupSecurityRuleResult
	err := ctx.Invoke("cloudngfwaws:index/getSecurityRule:getSecurityRule", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getSecurityRule.
type LookupSecurityRuleArgs struct {
	// Retrieve either the candidate or running config. Valid values are `candidate` or `running`. Defaults to `candidate`.
	ConfigType *string `pulumi:"configType"`
	// The rule priority.
	Priority int `pulumi:"priority"`
	// The rulebase. Valid values are `PreRule`, `PostRule`, or `LocalRule`. Defaults to `PreRule`.
	RuleList *string `pulumi:"ruleList"`
	// The rulestack.
	Rulestack string `pulumi:"rulestack"`
	// The rulestack's scope. A local rulestack will require that you've retrieved a LRA JWT. A global rulestack will require that you've retrieved a GRA JWT. Valid values are `Local` or `Global`. Defaults to `Local`.
	Scope *string `pulumi:"scope"`
}

// A collection of values returned by getSecurityRule.
type LookupSecurityRuleResult struct {
	// The action to take. Valid values are `Allow`, `DenySilent`, `DenyResetServer`, or `DenyResetBoth`.
	Action string `pulumi:"action"`
	// The list of applications.
	Applications []string `pulumi:"applications"`
	// The audit comment.
	AuditComment string `pulumi:"auditComment"`
	// The category spec.
	Categories []GetSecurityRuleCategory `pulumi:"categories"`
	// Retrieve either the candidate or running config. Valid values are `candidate` or `running`. Defaults to `candidate`.
	ConfigType *string `pulumi:"configType"`
	// Decryption rule type. Valid values are ``or`SSLOutboundInspection`.
	DecryptionRuleType string `pulumi:"decryptionRuleType"`
	// The description.
	Description string `pulumi:"description"`
	// The destination spec.
	Destinations []GetSecurityRuleDestination `pulumi:"destinations"`
	// Set to false to disable this rule.
	Enabled bool `pulumi:"enabled"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// Enable logging at end.
	Logging bool `pulumi:"logging"`
	// The name.
	Name string `pulumi:"name"`
	// Negate the destination definition.
	NegateDestination bool `pulumi:"negateDestination"`
	// Negate the source definition.
	NegateSource bool `pulumi:"negateSource"`
	// The rule priority.
	Priority int `pulumi:"priority"`
	// Protocol port list.
	ProtPortLists []string `pulumi:"protPortLists"`
	// The protocol.
	Protocol string `pulumi:"protocol"`
	// The rulebase. Valid values are `PreRule`, `PostRule`, or `LocalRule`. Defaults to `PreRule`.
	RuleList *string `pulumi:"ruleList"`
	// The rulestack.
	Rulestack string `pulumi:"rulestack"`
	// The rulestack's scope. A local rulestack will require that you've retrieved a LRA JWT. A global rulestack will require that you've retrieved a GRA JWT. Valid values are `Local` or `Global`. Defaults to `Local`.
	Scope *string `pulumi:"scope"`
	// The source spec.
	Sources []GetSecurityRuleSource `pulumi:"sources"`
	// The tags.
	Tags map[string]string `pulumi:"tags"`
	// The update token.
	UpdateToken string `pulumi:"updateToken"`
}

func LookupSecurityRuleOutput(ctx *pulumi.Context, args LookupSecurityRuleOutputArgs, opts ...pulumi.InvokeOption) LookupSecurityRuleResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupSecurityRuleResultOutput, error) {
			args := v.(LookupSecurityRuleArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("cloudngfwaws:index/getSecurityRule:getSecurityRule", args, LookupSecurityRuleResultOutput{}, options).(LookupSecurityRuleResultOutput), nil
		}).(LookupSecurityRuleResultOutput)
}

// A collection of arguments for invoking getSecurityRule.
type LookupSecurityRuleOutputArgs struct {
	// Retrieve either the candidate or running config. Valid values are `candidate` or `running`. Defaults to `candidate`.
	ConfigType pulumi.StringPtrInput `pulumi:"configType"`
	// The rule priority.
	Priority pulumi.IntInput `pulumi:"priority"`
	// The rulebase. Valid values are `PreRule`, `PostRule`, or `LocalRule`. Defaults to `PreRule`.
	RuleList pulumi.StringPtrInput `pulumi:"ruleList"`
	// The rulestack.
	Rulestack pulumi.StringInput `pulumi:"rulestack"`
	// The rulestack's scope. A local rulestack will require that you've retrieved a LRA JWT. A global rulestack will require that you've retrieved a GRA JWT. Valid values are `Local` or `Global`. Defaults to `Local`.
	Scope pulumi.StringPtrInput `pulumi:"scope"`
}

func (LookupSecurityRuleOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupSecurityRuleArgs)(nil)).Elem()
}

// A collection of values returned by getSecurityRule.
type LookupSecurityRuleResultOutput struct{ *pulumi.OutputState }

func (LookupSecurityRuleResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupSecurityRuleResult)(nil)).Elem()
}

func (o LookupSecurityRuleResultOutput) ToLookupSecurityRuleResultOutput() LookupSecurityRuleResultOutput {
	return o
}

func (o LookupSecurityRuleResultOutput) ToLookupSecurityRuleResultOutputWithContext(ctx context.Context) LookupSecurityRuleResultOutput {
	return o
}

// The action to take. Valid values are `Allow`, `DenySilent`, `DenyResetServer`, or `DenyResetBoth`.
func (o LookupSecurityRuleResultOutput) Action() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSecurityRuleResult) string { return v.Action }).(pulumi.StringOutput)
}

// The list of applications.
func (o LookupSecurityRuleResultOutput) Applications() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupSecurityRuleResult) []string { return v.Applications }).(pulumi.StringArrayOutput)
}

// The audit comment.
func (o LookupSecurityRuleResultOutput) AuditComment() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSecurityRuleResult) string { return v.AuditComment }).(pulumi.StringOutput)
}

// The category spec.
func (o LookupSecurityRuleResultOutput) Categories() GetSecurityRuleCategoryArrayOutput {
	return o.ApplyT(func(v LookupSecurityRuleResult) []GetSecurityRuleCategory { return v.Categories }).(GetSecurityRuleCategoryArrayOutput)
}

// Retrieve either the candidate or running config. Valid values are `candidate` or `running`. Defaults to `candidate`.
func (o LookupSecurityRuleResultOutput) ConfigType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupSecurityRuleResult) *string { return v.ConfigType }).(pulumi.StringPtrOutput)
}

// Decryption rule type. Valid values are â€œor`SSLOutboundInspection`.
func (o LookupSecurityRuleResultOutput) DecryptionRuleType() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSecurityRuleResult) string { return v.DecryptionRuleType }).(pulumi.StringOutput)
}

// The description.
func (o LookupSecurityRuleResultOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSecurityRuleResult) string { return v.Description }).(pulumi.StringOutput)
}

// The destination spec.
func (o LookupSecurityRuleResultOutput) Destinations() GetSecurityRuleDestinationArrayOutput {
	return o.ApplyT(func(v LookupSecurityRuleResult) []GetSecurityRuleDestination { return v.Destinations }).(GetSecurityRuleDestinationArrayOutput)
}

// Set to false to disable this rule.
func (o LookupSecurityRuleResultOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupSecurityRuleResult) bool { return v.Enabled }).(pulumi.BoolOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o LookupSecurityRuleResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSecurityRuleResult) string { return v.Id }).(pulumi.StringOutput)
}

// Enable logging at end.
func (o LookupSecurityRuleResultOutput) Logging() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupSecurityRuleResult) bool { return v.Logging }).(pulumi.BoolOutput)
}

// The name.
func (o LookupSecurityRuleResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSecurityRuleResult) string { return v.Name }).(pulumi.StringOutput)
}

// Negate the destination definition.
func (o LookupSecurityRuleResultOutput) NegateDestination() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupSecurityRuleResult) bool { return v.NegateDestination }).(pulumi.BoolOutput)
}

// Negate the source definition.
func (o LookupSecurityRuleResultOutput) NegateSource() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupSecurityRuleResult) bool { return v.NegateSource }).(pulumi.BoolOutput)
}

// The rule priority.
func (o LookupSecurityRuleResultOutput) Priority() pulumi.IntOutput {
	return o.ApplyT(func(v LookupSecurityRuleResult) int { return v.Priority }).(pulumi.IntOutput)
}

// Protocol port list.
func (o LookupSecurityRuleResultOutput) ProtPortLists() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupSecurityRuleResult) []string { return v.ProtPortLists }).(pulumi.StringArrayOutput)
}

// The protocol.
func (o LookupSecurityRuleResultOutput) Protocol() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSecurityRuleResult) string { return v.Protocol }).(pulumi.StringOutput)
}

// The rulebase. Valid values are `PreRule`, `PostRule`, or `LocalRule`. Defaults to `PreRule`.
func (o LookupSecurityRuleResultOutput) RuleList() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupSecurityRuleResult) *string { return v.RuleList }).(pulumi.StringPtrOutput)
}

// The rulestack.
func (o LookupSecurityRuleResultOutput) Rulestack() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSecurityRuleResult) string { return v.Rulestack }).(pulumi.StringOutput)
}

// The rulestack's scope. A local rulestack will require that you've retrieved a LRA JWT. A global rulestack will require that you've retrieved a GRA JWT. Valid values are `Local` or `Global`. Defaults to `Local`.
func (o LookupSecurityRuleResultOutput) Scope() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupSecurityRuleResult) *string { return v.Scope }).(pulumi.StringPtrOutput)
}

// The source spec.
func (o LookupSecurityRuleResultOutput) Sources() GetSecurityRuleSourceArrayOutput {
	return o.ApplyT(func(v LookupSecurityRuleResult) []GetSecurityRuleSource { return v.Sources }).(GetSecurityRuleSourceArrayOutput)
}

// The tags.
func (o LookupSecurityRuleResultOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v LookupSecurityRuleResult) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

// The update token.
func (o LookupSecurityRuleResultOutput) UpdateToken() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSecurityRuleResult) string { return v.UpdateToken }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupSecurityRuleResultOutput{})
}
