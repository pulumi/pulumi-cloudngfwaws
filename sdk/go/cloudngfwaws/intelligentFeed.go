// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cloudngfwaws

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-cloudngfwaws/sdk/go/cloudngfwaws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Resource for intelligent feed manipulation.
//
// ## Admin Permission Type
//
// * `Rulestack` (for `scope="Local"`)
// * `Global Rulestack` (for `scope="Global"`)
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-cloudngfwaws/sdk/go/cloudngfwaws"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			r, err := cloudngfwaws.NewRulestack(ctx, "r", &cloudngfwaws.RulestackArgs{
//				Name:        pulumi.String("terraform-rulestack"),
//				Scope:       pulumi.String("Local"),
//				AccountId:   pulumi.String("123456789"),
//				Description: pulumi.String("Made by Pulumi"),
//				ProfileConfig: &cloudngfwaws.RulestackProfileConfigArgs{
//					AntiSpyware: pulumi.String("BestPractice"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			// Retrieve the feed information every day at midnight.
//			_, err = cloudngfwaws.NewIntelligentFeed(ctx, "example", &cloudngfwaws.IntelligentFeedArgs{
//				Rulestack:   r.Name,
//				Name:        pulumi.String("tf-feed"),
//				Description: pulumi.String("Also configured by Terraform"),
//				Url:         pulumi.String("https://foobar.net"),
//				Type:        pulumi.String("URL_LIST"),
//				Frequency:   pulumi.String("DAILY"),
//				Time:        pulumi.Int(0),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// import name is <scope>:<rulestack>:<intelligent_feed_name>
//
// ```sh
// $ pulumi import cloudngfwaws:index/intelligentFeed:IntelligentFeed example Local:terraform-rulestack:tf-feed
// ```
type IntelligentFeed struct {
	pulumi.CustomResourceState

	// The audit comment.
	AuditComment pulumi.StringPtrOutput `pulumi:"auditComment"`
	// The certificate profile.
	Certificate pulumi.StringPtrOutput `pulumi:"certificate"`
	// The description.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// Update frequency. Valid values are `HOURLY` or `DAILY`. Defaults to `HOURLY`.
	Frequency pulumi.StringPtrOutput `pulumi:"frequency"`
	// The name.
	Name pulumi.StringOutput `pulumi:"name"`
	// The rulestack.
	Rulestack pulumi.StringOutput `pulumi:"rulestack"`
	// The rulestack's scope. A local rulestack will require that you've retrieved a LRA JWT. A global rulestack will require that you've retrieved a GRA JWT. Valid values are `Local` or `Global`. Defaults to `Local`.
	Scope pulumi.StringPtrOutput `pulumi:"scope"`
	// The time to poll for updates if frequency is daily. The number must be between [0, 23] incluside.
	Time pulumi.IntPtrOutput `pulumi:"time"`
	// The intelligent feed type. Valid values are `IP_LIST` or `URL_LIST`. Defaults to `IP_LIST`.
	Type pulumi.StringPtrOutput `pulumi:"type"`
	// The update token.
	UpdateToken pulumi.StringOutput `pulumi:"updateToken"`
	// The intelligent feed source.
	Url pulumi.StringOutput `pulumi:"url"`
}

// NewIntelligentFeed registers a new resource with the given unique name, arguments, and options.
func NewIntelligentFeed(ctx *pulumi.Context,
	name string, args *IntelligentFeedArgs, opts ...pulumi.ResourceOption) (*IntelligentFeed, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Rulestack == nil {
		return nil, errors.New("invalid value for required argument 'Rulestack'")
	}
	if args.Url == nil {
		return nil, errors.New("invalid value for required argument 'Url'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource IntelligentFeed
	err := ctx.RegisterResource("cloudngfwaws:index/intelligentFeed:IntelligentFeed", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetIntelligentFeed gets an existing IntelligentFeed resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetIntelligentFeed(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *IntelligentFeedState, opts ...pulumi.ResourceOption) (*IntelligentFeed, error) {
	var resource IntelligentFeed
	err := ctx.ReadResource("cloudngfwaws:index/intelligentFeed:IntelligentFeed", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering IntelligentFeed resources.
type intelligentFeedState struct {
	// The audit comment.
	AuditComment *string `pulumi:"auditComment"`
	// The certificate profile.
	Certificate *string `pulumi:"certificate"`
	// The description.
	Description *string `pulumi:"description"`
	// Update frequency. Valid values are `HOURLY` or `DAILY`. Defaults to `HOURLY`.
	Frequency *string `pulumi:"frequency"`
	// The name.
	Name *string `pulumi:"name"`
	// The rulestack.
	Rulestack *string `pulumi:"rulestack"`
	// The rulestack's scope. A local rulestack will require that you've retrieved a LRA JWT. A global rulestack will require that you've retrieved a GRA JWT. Valid values are `Local` or `Global`. Defaults to `Local`.
	Scope *string `pulumi:"scope"`
	// The time to poll for updates if frequency is daily. The number must be between [0, 23] incluside.
	Time *int `pulumi:"time"`
	// The intelligent feed type. Valid values are `IP_LIST` or `URL_LIST`. Defaults to `IP_LIST`.
	Type *string `pulumi:"type"`
	// The update token.
	UpdateToken *string `pulumi:"updateToken"`
	// The intelligent feed source.
	Url *string `pulumi:"url"`
}

type IntelligentFeedState struct {
	// The audit comment.
	AuditComment pulumi.StringPtrInput
	// The certificate profile.
	Certificate pulumi.StringPtrInput
	// The description.
	Description pulumi.StringPtrInput
	// Update frequency. Valid values are `HOURLY` or `DAILY`. Defaults to `HOURLY`.
	Frequency pulumi.StringPtrInput
	// The name.
	Name pulumi.StringPtrInput
	// The rulestack.
	Rulestack pulumi.StringPtrInput
	// The rulestack's scope. A local rulestack will require that you've retrieved a LRA JWT. A global rulestack will require that you've retrieved a GRA JWT. Valid values are `Local` or `Global`. Defaults to `Local`.
	Scope pulumi.StringPtrInput
	// The time to poll for updates if frequency is daily. The number must be between [0, 23] incluside.
	Time pulumi.IntPtrInput
	// The intelligent feed type. Valid values are `IP_LIST` or `URL_LIST`. Defaults to `IP_LIST`.
	Type pulumi.StringPtrInput
	// The update token.
	UpdateToken pulumi.StringPtrInput
	// The intelligent feed source.
	Url pulumi.StringPtrInput
}

func (IntelligentFeedState) ElementType() reflect.Type {
	return reflect.TypeOf((*intelligentFeedState)(nil)).Elem()
}

type intelligentFeedArgs struct {
	// The audit comment.
	AuditComment *string `pulumi:"auditComment"`
	// The certificate profile.
	Certificate *string `pulumi:"certificate"`
	// The description.
	Description *string `pulumi:"description"`
	// Update frequency. Valid values are `HOURLY` or `DAILY`. Defaults to `HOURLY`.
	Frequency *string `pulumi:"frequency"`
	// The name.
	Name *string `pulumi:"name"`
	// The rulestack.
	Rulestack string `pulumi:"rulestack"`
	// The rulestack's scope. A local rulestack will require that you've retrieved a LRA JWT. A global rulestack will require that you've retrieved a GRA JWT. Valid values are `Local` or `Global`. Defaults to `Local`.
	Scope *string `pulumi:"scope"`
	// The time to poll for updates if frequency is daily. The number must be between [0, 23] incluside.
	Time *int `pulumi:"time"`
	// The intelligent feed type. Valid values are `IP_LIST` or `URL_LIST`. Defaults to `IP_LIST`.
	Type *string `pulumi:"type"`
	// The intelligent feed source.
	Url string `pulumi:"url"`
}

// The set of arguments for constructing a IntelligentFeed resource.
type IntelligentFeedArgs struct {
	// The audit comment.
	AuditComment pulumi.StringPtrInput
	// The certificate profile.
	Certificate pulumi.StringPtrInput
	// The description.
	Description pulumi.StringPtrInput
	// Update frequency. Valid values are `HOURLY` or `DAILY`. Defaults to `HOURLY`.
	Frequency pulumi.StringPtrInput
	// The name.
	Name pulumi.StringPtrInput
	// The rulestack.
	Rulestack pulumi.StringInput
	// The rulestack's scope. A local rulestack will require that you've retrieved a LRA JWT. A global rulestack will require that you've retrieved a GRA JWT. Valid values are `Local` or `Global`. Defaults to `Local`.
	Scope pulumi.StringPtrInput
	// The time to poll for updates if frequency is daily. The number must be between [0, 23] incluside.
	Time pulumi.IntPtrInput
	// The intelligent feed type. Valid values are `IP_LIST` or `URL_LIST`. Defaults to `IP_LIST`.
	Type pulumi.StringPtrInput
	// The intelligent feed source.
	Url pulumi.StringInput
}

func (IntelligentFeedArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*intelligentFeedArgs)(nil)).Elem()
}

type IntelligentFeedInput interface {
	pulumi.Input

	ToIntelligentFeedOutput() IntelligentFeedOutput
	ToIntelligentFeedOutputWithContext(ctx context.Context) IntelligentFeedOutput
}

func (*IntelligentFeed) ElementType() reflect.Type {
	return reflect.TypeOf((**IntelligentFeed)(nil)).Elem()
}

func (i *IntelligentFeed) ToIntelligentFeedOutput() IntelligentFeedOutput {
	return i.ToIntelligentFeedOutputWithContext(context.Background())
}

func (i *IntelligentFeed) ToIntelligentFeedOutputWithContext(ctx context.Context) IntelligentFeedOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IntelligentFeedOutput)
}

// IntelligentFeedArrayInput is an input type that accepts IntelligentFeedArray and IntelligentFeedArrayOutput values.
// You can construct a concrete instance of `IntelligentFeedArrayInput` via:
//
//	IntelligentFeedArray{ IntelligentFeedArgs{...} }
type IntelligentFeedArrayInput interface {
	pulumi.Input

	ToIntelligentFeedArrayOutput() IntelligentFeedArrayOutput
	ToIntelligentFeedArrayOutputWithContext(context.Context) IntelligentFeedArrayOutput
}

type IntelligentFeedArray []IntelligentFeedInput

func (IntelligentFeedArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*IntelligentFeed)(nil)).Elem()
}

func (i IntelligentFeedArray) ToIntelligentFeedArrayOutput() IntelligentFeedArrayOutput {
	return i.ToIntelligentFeedArrayOutputWithContext(context.Background())
}

func (i IntelligentFeedArray) ToIntelligentFeedArrayOutputWithContext(ctx context.Context) IntelligentFeedArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IntelligentFeedArrayOutput)
}

// IntelligentFeedMapInput is an input type that accepts IntelligentFeedMap and IntelligentFeedMapOutput values.
// You can construct a concrete instance of `IntelligentFeedMapInput` via:
//
//	IntelligentFeedMap{ "key": IntelligentFeedArgs{...} }
type IntelligentFeedMapInput interface {
	pulumi.Input

	ToIntelligentFeedMapOutput() IntelligentFeedMapOutput
	ToIntelligentFeedMapOutputWithContext(context.Context) IntelligentFeedMapOutput
}

type IntelligentFeedMap map[string]IntelligentFeedInput

func (IntelligentFeedMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*IntelligentFeed)(nil)).Elem()
}

func (i IntelligentFeedMap) ToIntelligentFeedMapOutput() IntelligentFeedMapOutput {
	return i.ToIntelligentFeedMapOutputWithContext(context.Background())
}

func (i IntelligentFeedMap) ToIntelligentFeedMapOutputWithContext(ctx context.Context) IntelligentFeedMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IntelligentFeedMapOutput)
}

type IntelligentFeedOutput struct{ *pulumi.OutputState }

func (IntelligentFeedOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**IntelligentFeed)(nil)).Elem()
}

func (o IntelligentFeedOutput) ToIntelligentFeedOutput() IntelligentFeedOutput {
	return o
}

func (o IntelligentFeedOutput) ToIntelligentFeedOutputWithContext(ctx context.Context) IntelligentFeedOutput {
	return o
}

// The audit comment.
func (o IntelligentFeedOutput) AuditComment() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IntelligentFeed) pulumi.StringPtrOutput { return v.AuditComment }).(pulumi.StringPtrOutput)
}

// The certificate profile.
func (o IntelligentFeedOutput) Certificate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IntelligentFeed) pulumi.StringPtrOutput { return v.Certificate }).(pulumi.StringPtrOutput)
}

// The description.
func (o IntelligentFeedOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IntelligentFeed) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// Update frequency. Valid values are `HOURLY` or `DAILY`. Defaults to `HOURLY`.
func (o IntelligentFeedOutput) Frequency() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IntelligentFeed) pulumi.StringPtrOutput { return v.Frequency }).(pulumi.StringPtrOutput)
}

// The name.
func (o IntelligentFeedOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *IntelligentFeed) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The rulestack.
func (o IntelligentFeedOutput) Rulestack() pulumi.StringOutput {
	return o.ApplyT(func(v *IntelligentFeed) pulumi.StringOutput { return v.Rulestack }).(pulumi.StringOutput)
}

// The rulestack's scope. A local rulestack will require that you've retrieved a LRA JWT. A global rulestack will require that you've retrieved a GRA JWT. Valid values are `Local` or `Global`. Defaults to `Local`.
func (o IntelligentFeedOutput) Scope() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IntelligentFeed) pulumi.StringPtrOutput { return v.Scope }).(pulumi.StringPtrOutput)
}

// The time to poll for updates if frequency is daily. The number must be between [0, 23] incluside.
func (o IntelligentFeedOutput) Time() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *IntelligentFeed) pulumi.IntPtrOutput { return v.Time }).(pulumi.IntPtrOutput)
}

// The intelligent feed type. Valid values are `IP_LIST` or `URL_LIST`. Defaults to `IP_LIST`.
func (o IntelligentFeedOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IntelligentFeed) pulumi.StringPtrOutput { return v.Type }).(pulumi.StringPtrOutput)
}

// The update token.
func (o IntelligentFeedOutput) UpdateToken() pulumi.StringOutput {
	return o.ApplyT(func(v *IntelligentFeed) pulumi.StringOutput { return v.UpdateToken }).(pulumi.StringOutput)
}

// The intelligent feed source.
func (o IntelligentFeedOutput) Url() pulumi.StringOutput {
	return o.ApplyT(func(v *IntelligentFeed) pulumi.StringOutput { return v.Url }).(pulumi.StringOutput)
}

type IntelligentFeedArrayOutput struct{ *pulumi.OutputState }

func (IntelligentFeedArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*IntelligentFeed)(nil)).Elem()
}

func (o IntelligentFeedArrayOutput) ToIntelligentFeedArrayOutput() IntelligentFeedArrayOutput {
	return o
}

func (o IntelligentFeedArrayOutput) ToIntelligentFeedArrayOutputWithContext(ctx context.Context) IntelligentFeedArrayOutput {
	return o
}

func (o IntelligentFeedArrayOutput) Index(i pulumi.IntInput) IntelligentFeedOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *IntelligentFeed {
		return vs[0].([]*IntelligentFeed)[vs[1].(int)]
	}).(IntelligentFeedOutput)
}

type IntelligentFeedMapOutput struct{ *pulumi.OutputState }

func (IntelligentFeedMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*IntelligentFeed)(nil)).Elem()
}

func (o IntelligentFeedMapOutput) ToIntelligentFeedMapOutput() IntelligentFeedMapOutput {
	return o
}

func (o IntelligentFeedMapOutput) ToIntelligentFeedMapOutputWithContext(ctx context.Context) IntelligentFeedMapOutput {
	return o
}

func (o IntelligentFeedMapOutput) MapIndex(k pulumi.StringInput) IntelligentFeedOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *IntelligentFeed {
		return vs[0].(map[string]*IntelligentFeed)[vs[1].(string)]
	}).(IntelligentFeedOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*IntelligentFeedInput)(nil)).Elem(), &IntelligentFeed{})
	pulumi.RegisterInputType(reflect.TypeOf((*IntelligentFeedArrayInput)(nil)).Elem(), IntelligentFeedArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*IntelligentFeedMapInput)(nil)).Elem(), IntelligentFeedMap{})
	pulumi.RegisterOutputType(IntelligentFeedOutput{})
	pulumi.RegisterOutputType(IntelligentFeedArrayOutput{})
	pulumi.RegisterOutputType(IntelligentFeedMapOutput{})
}
