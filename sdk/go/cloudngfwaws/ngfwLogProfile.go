// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cloudngfwaws

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-cloudngfwaws/sdk/go/cloudngfwaws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Resource for NGFW log profile manipulation.
//
// ## Admin Permission Type
//
// * `Firewall`
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-aws/sdk/go/aws"
//	"github.com/pulumi/pulumi-cloudngfwaws/sdk/go/cloudngfwaws"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			exampleVpc, err := aws.NewVpc(ctx, "example", &aws.VpcArgs{
//				CidrBlock: "172.16.0.0/16",
//				Tags: map[string]interface{}{
//					"name": "tf-example",
//				},
//			})
//			if err != nil {
//				return err
//			}
//			subnet1, err := aws.NewSubnet(ctx, "subnet1", &aws.SubnetArgs{
//				VpcId:            myVpc.Id,
//				CidrBlock:        "172.16.10.0/24",
//				AvailabilityZone: "us-west-2a",
//				Tags: map[string]interface{}{
//					"name": "tf-example",
//				},
//			})
//			if err != nil {
//				return err
//			}
//			x, err := cloudngfwaws.NewNgfw(ctx, "x", &cloudngfwaws.NgfwArgs{
//				Name:        pulumi.String("example-instance"),
//				Description: pulumi.String("Example description"),
//				Endpoints: cloudngfwaws.NgfwEndpointArray{
//					&cloudngfwaws.NgfwEndpointArgs{
//						SubnetId:  subnet1.Id,
//						Mode:      pulumi.String("ServiceManaged"),
//						VpcId:     exampleVpc.Id,
//						AccountId: pulumi.String("12345678"),
//					},
//				},
//				Rulestack: pulumi.String("example-rulestack"),
//				Tags: pulumi.StringMap{
//					"Foo": pulumi.String("bar"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			_, err = cloudngfwaws.NewNgfwLogProfile(ctx, "example", &cloudngfwaws.NgfwLogProfileArgs{
//				FirewallId:        x.FirewallId,
//				AccountId:         x.AccountId,
//				AdvancedThreatLog: pulumi.Bool(true),
//				CloudwatchMetricFields: pulumi.StringArray{
//					pulumi.String("Dataplane_CPU_Utilization"),
//					pulumi.String("Session_Throughput_Kbps"),
//					pulumi.String("BytesIn"),
//					pulumi.String("BytesOut"),
//				},
//				CloudWatchMetricNamespace: pulumi.String("PaloAltoCloudNGFW"),
//				LogConfig: &cloudngfwaws.NgfwLogProfileLogConfigArgs{
//					LogDestination:     pulumi.String("my-s3-bucket"),
//					LogDestinationType: pulumi.String("S3"),
//					LogTypes: pulumi.StringArray{
//						pulumi.String("TRAFFIC"),
//					},
//					AccountId: pulumi.String("251583708250"),
//					RoleType:  pulumi.String("IamBased"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			_, err = aws.NewSubnet(ctx, "subnet2", &aws.SubnetArgs{
//				VpcId:            myVpc.Id,
//				CidrBlock:        "172.16.20.0/24",
//				AvailabilityZone: "us-west-2b",
//				Tags: map[string]interface{}{
//					"name": "tf-example",
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// import name is <account_id>:<ngfw>
//
// ```sh
// $ pulumi import cloudngfwaws:index/ngfwLogProfile:NgfwLogProfile example 12345678:example-instance
// ```
type NgfwLogProfile struct {
	pulumi.CustomResourceState

	// The unique ID of the account.
	AccountId pulumi.StringPtrOutput `pulumi:"accountId"`
	// Enable advanced threat logging.
	AdvancedThreatLog pulumi.BoolPtrOutput `pulumi:"advancedThreatLog"`
	// The CloudWatch metric namespace.
	CloudWatchMetricNamespace pulumi.StringPtrOutput `pulumi:"cloudWatchMetricNamespace"`
	// Cloudwatch metric fields.
	CloudwatchMetricFields pulumi.StringArrayOutput `pulumi:"cloudwatchMetricFields"`
	// The Firewall Id for the NGFW.
	FirewallId pulumi.StringOutput `pulumi:"firewallId"`
	// Log configuration details.
	LogConfig NgfwLogProfileLogConfigPtrOutput `pulumi:"logConfig"`
	// List of log destinations.
	LogDestinations NgfwLogProfileLogDestinationArrayOutput `pulumi:"logDestinations"`
	// The name of the NGFW.
	Ngfw pulumi.StringPtrOutput `pulumi:"ngfw"`
	// The region of the NGFW.
	Region pulumi.StringOutput `pulumi:"region"`
	// The update token.
	UpdateToken pulumi.StringOutput `pulumi:"updateToken"`
}

// NewNgfwLogProfile registers a new resource with the given unique name, arguments, and options.
func NewNgfwLogProfile(ctx *pulumi.Context,
	name string, args *NgfwLogProfileArgs, opts ...pulumi.ResourceOption) (*NgfwLogProfile, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.FirewallId == nil {
		return nil, errors.New("invalid value for required argument 'FirewallId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource NgfwLogProfile
	err := ctx.RegisterResource("cloudngfwaws:index/ngfwLogProfile:NgfwLogProfile", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetNgfwLogProfile gets an existing NgfwLogProfile resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetNgfwLogProfile(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *NgfwLogProfileState, opts ...pulumi.ResourceOption) (*NgfwLogProfile, error) {
	var resource NgfwLogProfile
	err := ctx.ReadResource("cloudngfwaws:index/ngfwLogProfile:NgfwLogProfile", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering NgfwLogProfile resources.
type ngfwLogProfileState struct {
	// The unique ID of the account.
	AccountId *string `pulumi:"accountId"`
	// Enable advanced threat logging.
	AdvancedThreatLog *bool `pulumi:"advancedThreatLog"`
	// The CloudWatch metric namespace.
	CloudWatchMetricNamespace *string `pulumi:"cloudWatchMetricNamespace"`
	// Cloudwatch metric fields.
	CloudwatchMetricFields []string `pulumi:"cloudwatchMetricFields"`
	// The Firewall Id for the NGFW.
	FirewallId *string `pulumi:"firewallId"`
	// Log configuration details.
	LogConfig *NgfwLogProfileLogConfig `pulumi:"logConfig"`
	// List of log destinations.
	LogDestinations []NgfwLogProfileLogDestination `pulumi:"logDestinations"`
	// The name of the NGFW.
	Ngfw *string `pulumi:"ngfw"`
	// The region of the NGFW.
	Region *string `pulumi:"region"`
	// The update token.
	UpdateToken *string `pulumi:"updateToken"`
}

type NgfwLogProfileState struct {
	// The unique ID of the account.
	AccountId pulumi.StringPtrInput
	// Enable advanced threat logging.
	AdvancedThreatLog pulumi.BoolPtrInput
	// The CloudWatch metric namespace.
	CloudWatchMetricNamespace pulumi.StringPtrInput
	// Cloudwatch metric fields.
	CloudwatchMetricFields pulumi.StringArrayInput
	// The Firewall Id for the NGFW.
	FirewallId pulumi.StringPtrInput
	// Log configuration details.
	LogConfig NgfwLogProfileLogConfigPtrInput
	// List of log destinations.
	LogDestinations NgfwLogProfileLogDestinationArrayInput
	// The name of the NGFW.
	Ngfw pulumi.StringPtrInput
	// The region of the NGFW.
	Region pulumi.StringPtrInput
	// The update token.
	UpdateToken pulumi.StringPtrInput
}

func (NgfwLogProfileState) ElementType() reflect.Type {
	return reflect.TypeOf((*ngfwLogProfileState)(nil)).Elem()
}

type ngfwLogProfileArgs struct {
	// The unique ID of the account.
	AccountId *string `pulumi:"accountId"`
	// Enable advanced threat logging.
	AdvancedThreatLog *bool `pulumi:"advancedThreatLog"`
	// The CloudWatch metric namespace.
	CloudWatchMetricNamespace *string `pulumi:"cloudWatchMetricNamespace"`
	// Cloudwatch metric fields.
	CloudwatchMetricFields []string `pulumi:"cloudwatchMetricFields"`
	// The Firewall Id for the NGFW.
	FirewallId string `pulumi:"firewallId"`
	// Log configuration details.
	LogConfig *NgfwLogProfileLogConfig `pulumi:"logConfig"`
	// List of log destinations.
	LogDestinations []NgfwLogProfileLogDestination `pulumi:"logDestinations"`
	// The name of the NGFW.
	Ngfw *string `pulumi:"ngfw"`
	// The region of the NGFW.
	Region *string `pulumi:"region"`
}

// The set of arguments for constructing a NgfwLogProfile resource.
type NgfwLogProfileArgs struct {
	// The unique ID of the account.
	AccountId pulumi.StringPtrInput
	// Enable advanced threat logging.
	AdvancedThreatLog pulumi.BoolPtrInput
	// The CloudWatch metric namespace.
	CloudWatchMetricNamespace pulumi.StringPtrInput
	// Cloudwatch metric fields.
	CloudwatchMetricFields pulumi.StringArrayInput
	// The Firewall Id for the NGFW.
	FirewallId pulumi.StringInput
	// Log configuration details.
	LogConfig NgfwLogProfileLogConfigPtrInput
	// List of log destinations.
	LogDestinations NgfwLogProfileLogDestinationArrayInput
	// The name of the NGFW.
	Ngfw pulumi.StringPtrInput
	// The region of the NGFW.
	Region pulumi.StringPtrInput
}

func (NgfwLogProfileArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ngfwLogProfileArgs)(nil)).Elem()
}

type NgfwLogProfileInput interface {
	pulumi.Input

	ToNgfwLogProfileOutput() NgfwLogProfileOutput
	ToNgfwLogProfileOutputWithContext(ctx context.Context) NgfwLogProfileOutput
}

func (*NgfwLogProfile) ElementType() reflect.Type {
	return reflect.TypeOf((**NgfwLogProfile)(nil)).Elem()
}

func (i *NgfwLogProfile) ToNgfwLogProfileOutput() NgfwLogProfileOutput {
	return i.ToNgfwLogProfileOutputWithContext(context.Background())
}

func (i *NgfwLogProfile) ToNgfwLogProfileOutputWithContext(ctx context.Context) NgfwLogProfileOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NgfwLogProfileOutput)
}

// NgfwLogProfileArrayInput is an input type that accepts NgfwLogProfileArray and NgfwLogProfileArrayOutput values.
// You can construct a concrete instance of `NgfwLogProfileArrayInput` via:
//
//	NgfwLogProfileArray{ NgfwLogProfileArgs{...} }
type NgfwLogProfileArrayInput interface {
	pulumi.Input

	ToNgfwLogProfileArrayOutput() NgfwLogProfileArrayOutput
	ToNgfwLogProfileArrayOutputWithContext(context.Context) NgfwLogProfileArrayOutput
}

type NgfwLogProfileArray []NgfwLogProfileInput

func (NgfwLogProfileArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*NgfwLogProfile)(nil)).Elem()
}

func (i NgfwLogProfileArray) ToNgfwLogProfileArrayOutput() NgfwLogProfileArrayOutput {
	return i.ToNgfwLogProfileArrayOutputWithContext(context.Background())
}

func (i NgfwLogProfileArray) ToNgfwLogProfileArrayOutputWithContext(ctx context.Context) NgfwLogProfileArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NgfwLogProfileArrayOutput)
}

// NgfwLogProfileMapInput is an input type that accepts NgfwLogProfileMap and NgfwLogProfileMapOutput values.
// You can construct a concrete instance of `NgfwLogProfileMapInput` via:
//
//	NgfwLogProfileMap{ "key": NgfwLogProfileArgs{...} }
type NgfwLogProfileMapInput interface {
	pulumi.Input

	ToNgfwLogProfileMapOutput() NgfwLogProfileMapOutput
	ToNgfwLogProfileMapOutputWithContext(context.Context) NgfwLogProfileMapOutput
}

type NgfwLogProfileMap map[string]NgfwLogProfileInput

func (NgfwLogProfileMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*NgfwLogProfile)(nil)).Elem()
}

func (i NgfwLogProfileMap) ToNgfwLogProfileMapOutput() NgfwLogProfileMapOutput {
	return i.ToNgfwLogProfileMapOutputWithContext(context.Background())
}

func (i NgfwLogProfileMap) ToNgfwLogProfileMapOutputWithContext(ctx context.Context) NgfwLogProfileMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NgfwLogProfileMapOutput)
}

type NgfwLogProfileOutput struct{ *pulumi.OutputState }

func (NgfwLogProfileOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NgfwLogProfile)(nil)).Elem()
}

func (o NgfwLogProfileOutput) ToNgfwLogProfileOutput() NgfwLogProfileOutput {
	return o
}

func (o NgfwLogProfileOutput) ToNgfwLogProfileOutputWithContext(ctx context.Context) NgfwLogProfileOutput {
	return o
}

// The unique ID of the account.
func (o NgfwLogProfileOutput) AccountId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NgfwLogProfile) pulumi.StringPtrOutput { return v.AccountId }).(pulumi.StringPtrOutput)
}

// Enable advanced threat logging.
func (o NgfwLogProfileOutput) AdvancedThreatLog() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *NgfwLogProfile) pulumi.BoolPtrOutput { return v.AdvancedThreatLog }).(pulumi.BoolPtrOutput)
}

// The CloudWatch metric namespace.
func (o NgfwLogProfileOutput) CloudWatchMetricNamespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NgfwLogProfile) pulumi.StringPtrOutput { return v.CloudWatchMetricNamespace }).(pulumi.StringPtrOutput)
}

// Cloudwatch metric fields.
func (o NgfwLogProfileOutput) CloudwatchMetricFields() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *NgfwLogProfile) pulumi.StringArrayOutput { return v.CloudwatchMetricFields }).(pulumi.StringArrayOutput)
}

// The Firewall Id for the NGFW.
func (o NgfwLogProfileOutput) FirewallId() pulumi.StringOutput {
	return o.ApplyT(func(v *NgfwLogProfile) pulumi.StringOutput { return v.FirewallId }).(pulumi.StringOutput)
}

// Log configuration details.
func (o NgfwLogProfileOutput) LogConfig() NgfwLogProfileLogConfigPtrOutput {
	return o.ApplyT(func(v *NgfwLogProfile) NgfwLogProfileLogConfigPtrOutput { return v.LogConfig }).(NgfwLogProfileLogConfigPtrOutput)
}

// List of log destinations.
func (o NgfwLogProfileOutput) LogDestinations() NgfwLogProfileLogDestinationArrayOutput {
	return o.ApplyT(func(v *NgfwLogProfile) NgfwLogProfileLogDestinationArrayOutput { return v.LogDestinations }).(NgfwLogProfileLogDestinationArrayOutput)
}

// The name of the NGFW.
func (o NgfwLogProfileOutput) Ngfw() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NgfwLogProfile) pulumi.StringPtrOutput { return v.Ngfw }).(pulumi.StringPtrOutput)
}

// The region of the NGFW.
func (o NgfwLogProfileOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *NgfwLogProfile) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

// The update token.
func (o NgfwLogProfileOutput) UpdateToken() pulumi.StringOutput {
	return o.ApplyT(func(v *NgfwLogProfile) pulumi.StringOutput { return v.UpdateToken }).(pulumi.StringOutput)
}

type NgfwLogProfileArrayOutput struct{ *pulumi.OutputState }

func (NgfwLogProfileArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*NgfwLogProfile)(nil)).Elem()
}

func (o NgfwLogProfileArrayOutput) ToNgfwLogProfileArrayOutput() NgfwLogProfileArrayOutput {
	return o
}

func (o NgfwLogProfileArrayOutput) ToNgfwLogProfileArrayOutputWithContext(ctx context.Context) NgfwLogProfileArrayOutput {
	return o
}

func (o NgfwLogProfileArrayOutput) Index(i pulumi.IntInput) NgfwLogProfileOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *NgfwLogProfile {
		return vs[0].([]*NgfwLogProfile)[vs[1].(int)]
	}).(NgfwLogProfileOutput)
}

type NgfwLogProfileMapOutput struct{ *pulumi.OutputState }

func (NgfwLogProfileMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*NgfwLogProfile)(nil)).Elem()
}

func (o NgfwLogProfileMapOutput) ToNgfwLogProfileMapOutput() NgfwLogProfileMapOutput {
	return o
}

func (o NgfwLogProfileMapOutput) ToNgfwLogProfileMapOutputWithContext(ctx context.Context) NgfwLogProfileMapOutput {
	return o
}

func (o NgfwLogProfileMapOutput) MapIndex(k pulumi.StringInput) NgfwLogProfileOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *NgfwLogProfile {
		return vs[0].(map[string]*NgfwLogProfile)[vs[1].(string)]
	}).(NgfwLogProfileOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*NgfwLogProfileInput)(nil)).Elem(), &NgfwLogProfile{})
	pulumi.RegisterInputType(reflect.TypeOf((*NgfwLogProfileArrayInput)(nil)).Elem(), NgfwLogProfileArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*NgfwLogProfileMapInput)(nil)).Elem(), NgfwLogProfileMap{})
	pulumi.RegisterOutputType(NgfwLogProfileOutput{})
	pulumi.RegisterOutputType(NgfwLogProfileArrayOutput{})
	pulumi.RegisterOutputType(NgfwLogProfileMapOutput{})
}
