// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cloudngfwaws

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-cloudngfwaws/sdk/go/cloudngfwaws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Resource for committing the rulestack config.
//
// !> **NOTE:** This resource should be placed in a separate plan as the plan that configures the rulestack and its contents.  If you do not, you will have perpetual configuration drift and will need to run your plan twice so the commit is performed.  Placing instances of this resource with instances of NGFW resources (such as `Ngfw`) is fine.
//
// ## Admin Permission Type
//
// * `Rulestack` (for `scope="Local"`)
// * `Global Rulestack` (for `scope="Global"`)
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-cloudngfwaws/sdk/go/cloudngfwaws"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := cloudngfwaws.NewCommitRulestack(ctx, "example", &cloudngfwaws.CommitRulestackArgs{
//				Rulestack: pulumi.String("my-rulestack"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type CommitRulestack struct {
	pulumi.CustomResourceState

	// Commit error messages.
	CommitErrors pulumi.StringArrayOutput `pulumi:"commitErrors"`
	// The commit status.
	CommitStatus pulumi.StringOutput `pulumi:"commitStatus"`
	// The rulestack.
	Rulestack pulumi.StringOutput `pulumi:"rulestack"`
	// The rulestack's scope. A local rulestack will require that you've retrieved a LRA JWT. A global rulestack will require that you've retrieved a GRA JWT. Valid values are `Local` or `Global`. Defaults to `Local`.
	Scope pulumi.StringPtrOutput `pulumi:"scope"`
	// The rulestack state. This can only be the default value. Defaults to `Running`.
	State pulumi.StringPtrOutput `pulumi:"state"`
	// Validation error messages.
	ValidationErrors pulumi.StringArrayOutput `pulumi:"validationErrors"`
	// The validation status.
	ValidationStatus pulumi.StringOutput `pulumi:"validationStatus"`
}

// NewCommitRulestack registers a new resource with the given unique name, arguments, and options.
func NewCommitRulestack(ctx *pulumi.Context,
	name string, args *CommitRulestackArgs, opts ...pulumi.ResourceOption) (*CommitRulestack, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Rulestack == nil {
		return nil, errors.New("invalid value for required argument 'Rulestack'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource CommitRulestack
	err := ctx.RegisterResource("cloudngfwaws:index/commitRulestack:CommitRulestack", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetCommitRulestack gets an existing CommitRulestack resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetCommitRulestack(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *CommitRulestackState, opts ...pulumi.ResourceOption) (*CommitRulestack, error) {
	var resource CommitRulestack
	err := ctx.ReadResource("cloudngfwaws:index/commitRulestack:CommitRulestack", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering CommitRulestack resources.
type commitRulestackState struct {
	// Commit error messages.
	CommitErrors []string `pulumi:"commitErrors"`
	// The commit status.
	CommitStatus *string `pulumi:"commitStatus"`
	// The rulestack.
	Rulestack *string `pulumi:"rulestack"`
	// The rulestack's scope. A local rulestack will require that you've retrieved a LRA JWT. A global rulestack will require that you've retrieved a GRA JWT. Valid values are `Local` or `Global`. Defaults to `Local`.
	Scope *string `pulumi:"scope"`
	// The rulestack state. This can only be the default value. Defaults to `Running`.
	State *string `pulumi:"state"`
	// Validation error messages.
	ValidationErrors []string `pulumi:"validationErrors"`
	// The validation status.
	ValidationStatus *string `pulumi:"validationStatus"`
}

type CommitRulestackState struct {
	// Commit error messages.
	CommitErrors pulumi.StringArrayInput
	// The commit status.
	CommitStatus pulumi.StringPtrInput
	// The rulestack.
	Rulestack pulumi.StringPtrInput
	// The rulestack's scope. A local rulestack will require that you've retrieved a LRA JWT. A global rulestack will require that you've retrieved a GRA JWT. Valid values are `Local` or `Global`. Defaults to `Local`.
	Scope pulumi.StringPtrInput
	// The rulestack state. This can only be the default value. Defaults to `Running`.
	State pulumi.StringPtrInput
	// Validation error messages.
	ValidationErrors pulumi.StringArrayInput
	// The validation status.
	ValidationStatus pulumi.StringPtrInput
}

func (CommitRulestackState) ElementType() reflect.Type {
	return reflect.TypeOf((*commitRulestackState)(nil)).Elem()
}

type commitRulestackArgs struct {
	// The rulestack.
	Rulestack string `pulumi:"rulestack"`
	// The rulestack's scope. A local rulestack will require that you've retrieved a LRA JWT. A global rulestack will require that you've retrieved a GRA JWT. Valid values are `Local` or `Global`. Defaults to `Local`.
	Scope *string `pulumi:"scope"`
	// The rulestack state. This can only be the default value. Defaults to `Running`.
	State *string `pulumi:"state"`
}

// The set of arguments for constructing a CommitRulestack resource.
type CommitRulestackArgs struct {
	// The rulestack.
	Rulestack pulumi.StringInput
	// The rulestack's scope. A local rulestack will require that you've retrieved a LRA JWT. A global rulestack will require that you've retrieved a GRA JWT. Valid values are `Local` or `Global`. Defaults to `Local`.
	Scope pulumi.StringPtrInput
	// The rulestack state. This can only be the default value. Defaults to `Running`.
	State pulumi.StringPtrInput
}

func (CommitRulestackArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*commitRulestackArgs)(nil)).Elem()
}

type CommitRulestackInput interface {
	pulumi.Input

	ToCommitRulestackOutput() CommitRulestackOutput
	ToCommitRulestackOutputWithContext(ctx context.Context) CommitRulestackOutput
}

func (*CommitRulestack) ElementType() reflect.Type {
	return reflect.TypeOf((**CommitRulestack)(nil)).Elem()
}

func (i *CommitRulestack) ToCommitRulestackOutput() CommitRulestackOutput {
	return i.ToCommitRulestackOutputWithContext(context.Background())
}

func (i *CommitRulestack) ToCommitRulestackOutputWithContext(ctx context.Context) CommitRulestackOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CommitRulestackOutput)
}

// CommitRulestackArrayInput is an input type that accepts CommitRulestackArray and CommitRulestackArrayOutput values.
// You can construct a concrete instance of `CommitRulestackArrayInput` via:
//
//	CommitRulestackArray{ CommitRulestackArgs{...} }
type CommitRulestackArrayInput interface {
	pulumi.Input

	ToCommitRulestackArrayOutput() CommitRulestackArrayOutput
	ToCommitRulestackArrayOutputWithContext(context.Context) CommitRulestackArrayOutput
}

type CommitRulestackArray []CommitRulestackInput

func (CommitRulestackArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*CommitRulestack)(nil)).Elem()
}

func (i CommitRulestackArray) ToCommitRulestackArrayOutput() CommitRulestackArrayOutput {
	return i.ToCommitRulestackArrayOutputWithContext(context.Background())
}

func (i CommitRulestackArray) ToCommitRulestackArrayOutputWithContext(ctx context.Context) CommitRulestackArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CommitRulestackArrayOutput)
}

// CommitRulestackMapInput is an input type that accepts CommitRulestackMap and CommitRulestackMapOutput values.
// You can construct a concrete instance of `CommitRulestackMapInput` via:
//
//	CommitRulestackMap{ "key": CommitRulestackArgs{...} }
type CommitRulestackMapInput interface {
	pulumi.Input

	ToCommitRulestackMapOutput() CommitRulestackMapOutput
	ToCommitRulestackMapOutputWithContext(context.Context) CommitRulestackMapOutput
}

type CommitRulestackMap map[string]CommitRulestackInput

func (CommitRulestackMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*CommitRulestack)(nil)).Elem()
}

func (i CommitRulestackMap) ToCommitRulestackMapOutput() CommitRulestackMapOutput {
	return i.ToCommitRulestackMapOutputWithContext(context.Background())
}

func (i CommitRulestackMap) ToCommitRulestackMapOutputWithContext(ctx context.Context) CommitRulestackMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CommitRulestackMapOutput)
}

type CommitRulestackOutput struct{ *pulumi.OutputState }

func (CommitRulestackOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CommitRulestack)(nil)).Elem()
}

func (o CommitRulestackOutput) ToCommitRulestackOutput() CommitRulestackOutput {
	return o
}

func (o CommitRulestackOutput) ToCommitRulestackOutputWithContext(ctx context.Context) CommitRulestackOutput {
	return o
}

// Commit error messages.
func (o CommitRulestackOutput) CommitErrors() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *CommitRulestack) pulumi.StringArrayOutput { return v.CommitErrors }).(pulumi.StringArrayOutput)
}

// The commit status.
func (o CommitRulestackOutput) CommitStatus() pulumi.StringOutput {
	return o.ApplyT(func(v *CommitRulestack) pulumi.StringOutput { return v.CommitStatus }).(pulumi.StringOutput)
}

// The rulestack.
func (o CommitRulestackOutput) Rulestack() pulumi.StringOutput {
	return o.ApplyT(func(v *CommitRulestack) pulumi.StringOutput { return v.Rulestack }).(pulumi.StringOutput)
}

// The rulestack's scope. A local rulestack will require that you've retrieved a LRA JWT. A global rulestack will require that you've retrieved a GRA JWT. Valid values are `Local` or `Global`. Defaults to `Local`.
func (o CommitRulestackOutput) Scope() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CommitRulestack) pulumi.StringPtrOutput { return v.Scope }).(pulumi.StringPtrOutput)
}

// The rulestack state. This can only be the default value. Defaults to `Running`.
func (o CommitRulestackOutput) State() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CommitRulestack) pulumi.StringPtrOutput { return v.State }).(pulumi.StringPtrOutput)
}

// Validation error messages.
func (o CommitRulestackOutput) ValidationErrors() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *CommitRulestack) pulumi.StringArrayOutput { return v.ValidationErrors }).(pulumi.StringArrayOutput)
}

// The validation status.
func (o CommitRulestackOutput) ValidationStatus() pulumi.StringOutput {
	return o.ApplyT(func(v *CommitRulestack) pulumi.StringOutput { return v.ValidationStatus }).(pulumi.StringOutput)
}

type CommitRulestackArrayOutput struct{ *pulumi.OutputState }

func (CommitRulestackArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*CommitRulestack)(nil)).Elem()
}

func (o CommitRulestackArrayOutput) ToCommitRulestackArrayOutput() CommitRulestackArrayOutput {
	return o
}

func (o CommitRulestackArrayOutput) ToCommitRulestackArrayOutputWithContext(ctx context.Context) CommitRulestackArrayOutput {
	return o
}

func (o CommitRulestackArrayOutput) Index(i pulumi.IntInput) CommitRulestackOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *CommitRulestack {
		return vs[0].([]*CommitRulestack)[vs[1].(int)]
	}).(CommitRulestackOutput)
}

type CommitRulestackMapOutput struct{ *pulumi.OutputState }

func (CommitRulestackMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*CommitRulestack)(nil)).Elem()
}

func (o CommitRulestackMapOutput) ToCommitRulestackMapOutput() CommitRulestackMapOutput {
	return o
}

func (o CommitRulestackMapOutput) ToCommitRulestackMapOutputWithContext(ctx context.Context) CommitRulestackMapOutput {
	return o
}

func (o CommitRulestackMapOutput) MapIndex(k pulumi.StringInput) CommitRulestackOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *CommitRulestack {
		return vs[0].(map[string]*CommitRulestack)[vs[1].(string)]
	}).(CommitRulestackOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*CommitRulestackInput)(nil)).Elem(), &CommitRulestack{})
	pulumi.RegisterInputType(reflect.TypeOf((*CommitRulestackArrayInput)(nil)).Elem(), CommitRulestackArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*CommitRulestackMapInput)(nil)).Elem(), CommitRulestackMap{})
	pulumi.RegisterOutputType(CommitRulestackOutput{})
	pulumi.RegisterOutputType(CommitRulestackArrayOutput{})
	pulumi.RegisterOutputType(CommitRulestackMapOutput{})
}
