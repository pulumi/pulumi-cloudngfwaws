// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cloudngfwaws

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-cloudngfwaws/sdk/go/cloudngfwaws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Data source for retrieving intelligent feed information.
//
// ## Admin Permission Type
//
// * `Rulestack` (for `scope="Local"`)
// * `Global Rulestack` (for `scope="Global"`)
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-cloudngfwaws/sdk/go/cloudngfwaws"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			r, err := cloudngfwaws.NewRulestack(ctx, "r", &cloudngfwaws.RulestackArgs{
//				Name:        pulumi.String("my-rulestack"),
//				Scope:       pulumi.String("Local"),
//				AccountId:   pulumi.String("12345"),
//				Description: pulumi.String("Made by Pulumi"),
//				ProfileConfig: &cloudngfwaws.RulestackProfileConfigArgs{
//					AntiSpyware: pulumi.String("BestPractice"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			_ = cloudngfwaws.LookupIntelligentFeedOutput(ctx, cloudngfwaws.GetIntelligentFeedOutputArgs{
//				Rulestack: r.Name,
//				Name:      pulumi.String("foobar"),
//			}, nil)
//			return nil
//		})
//	}
//
// ```
func LookupIntelligentFeed(ctx *pulumi.Context, args *LookupIntelligentFeedArgs, opts ...pulumi.InvokeOption) (*LookupIntelligentFeedResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupIntelligentFeedResult
	err := ctx.Invoke("cloudngfwaws:index/getIntelligentFeed:getIntelligentFeed", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getIntelligentFeed.
type LookupIntelligentFeedArgs struct {
	// Retrieve either the candidate or running config. Valid values are `candidate` or `running`. Defaults to `candidate`.
	ConfigType *string `pulumi:"configType"`
	// The name.
	Name string `pulumi:"name"`
	// The rulestack.
	Rulestack string `pulumi:"rulestack"`
	// The rulestack's scope. A local rulestack will require that you've retrieved a LRA JWT. A global rulestack will require that you've retrieved a GRA JWT. Valid values are `Local` or `Global`. Defaults to `Local`.
	Scope *string `pulumi:"scope"`
}

// A collection of values returned by getIntelligentFeed.
type LookupIntelligentFeedResult struct {
	// The audit comment.
	AuditComment string `pulumi:"auditComment"`
	// The certificate profile.
	Certificate string `pulumi:"certificate"`
	// Retrieve either the candidate or running config. Valid values are `candidate` or `running`. Defaults to `candidate`.
	ConfigType *string `pulumi:"configType"`
	// The description.
	Description string `pulumi:"description"`
	// Update frequency. Valid values are `HOURLY` or `DAILY`.
	Frequency string `pulumi:"frequency"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// The name.
	Name string `pulumi:"name"`
	// The rulestack.
	Rulestack string `pulumi:"rulestack"`
	// The rulestack's scope. A local rulestack will require that you've retrieved a LRA JWT. A global rulestack will require that you've retrieved a GRA JWT. Valid values are `Local` or `Global`. Defaults to `Local`.
	Scope *string `pulumi:"scope"`
	// The time to poll for updates if frequency is daily. The number must be between [0, 23] incluside.
	Time int `pulumi:"time"`
	// The intelligent feed type. Valid values are `IP_LIST` or `URL_LIST`.
	Type string `pulumi:"type"`
	// The update token.
	UpdateToken string `pulumi:"updateToken"`
	// The intelligent feed source.
	Url string `pulumi:"url"`
}

func LookupIntelligentFeedOutput(ctx *pulumi.Context, args LookupIntelligentFeedOutputArgs, opts ...pulumi.InvokeOption) LookupIntelligentFeedResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupIntelligentFeedResultOutput, error) {
			args := v.(LookupIntelligentFeedArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("cloudngfwaws:index/getIntelligentFeed:getIntelligentFeed", args, LookupIntelligentFeedResultOutput{}, options).(LookupIntelligentFeedResultOutput), nil
		}).(LookupIntelligentFeedResultOutput)
}

// A collection of arguments for invoking getIntelligentFeed.
type LookupIntelligentFeedOutputArgs struct {
	// Retrieve either the candidate or running config. Valid values are `candidate` or `running`. Defaults to `candidate`.
	ConfigType pulumi.StringPtrInput `pulumi:"configType"`
	// The name.
	Name pulumi.StringInput `pulumi:"name"`
	// The rulestack.
	Rulestack pulumi.StringInput `pulumi:"rulestack"`
	// The rulestack's scope. A local rulestack will require that you've retrieved a LRA JWT. A global rulestack will require that you've retrieved a GRA JWT. Valid values are `Local` or `Global`. Defaults to `Local`.
	Scope pulumi.StringPtrInput `pulumi:"scope"`
}

func (LookupIntelligentFeedOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupIntelligentFeedArgs)(nil)).Elem()
}

// A collection of values returned by getIntelligentFeed.
type LookupIntelligentFeedResultOutput struct{ *pulumi.OutputState }

func (LookupIntelligentFeedResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupIntelligentFeedResult)(nil)).Elem()
}

func (o LookupIntelligentFeedResultOutput) ToLookupIntelligentFeedResultOutput() LookupIntelligentFeedResultOutput {
	return o
}

func (o LookupIntelligentFeedResultOutput) ToLookupIntelligentFeedResultOutputWithContext(ctx context.Context) LookupIntelligentFeedResultOutput {
	return o
}

// The audit comment.
func (o LookupIntelligentFeedResultOutput) AuditComment() pulumi.StringOutput {
	return o.ApplyT(func(v LookupIntelligentFeedResult) string { return v.AuditComment }).(pulumi.StringOutput)
}

// The certificate profile.
func (o LookupIntelligentFeedResultOutput) Certificate() pulumi.StringOutput {
	return o.ApplyT(func(v LookupIntelligentFeedResult) string { return v.Certificate }).(pulumi.StringOutput)
}

// Retrieve either the candidate or running config. Valid values are `candidate` or `running`. Defaults to `candidate`.
func (o LookupIntelligentFeedResultOutput) ConfigType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupIntelligentFeedResult) *string { return v.ConfigType }).(pulumi.StringPtrOutput)
}

// The description.
func (o LookupIntelligentFeedResultOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v LookupIntelligentFeedResult) string { return v.Description }).(pulumi.StringOutput)
}

// Update frequency. Valid values are `HOURLY` or `DAILY`.
func (o LookupIntelligentFeedResultOutput) Frequency() pulumi.StringOutput {
	return o.ApplyT(func(v LookupIntelligentFeedResult) string { return v.Frequency }).(pulumi.StringOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o LookupIntelligentFeedResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupIntelligentFeedResult) string { return v.Id }).(pulumi.StringOutput)
}

// The name.
func (o LookupIntelligentFeedResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupIntelligentFeedResult) string { return v.Name }).(pulumi.StringOutput)
}

// The rulestack.
func (o LookupIntelligentFeedResultOutput) Rulestack() pulumi.StringOutput {
	return o.ApplyT(func(v LookupIntelligentFeedResult) string { return v.Rulestack }).(pulumi.StringOutput)
}

// The rulestack's scope. A local rulestack will require that you've retrieved a LRA JWT. A global rulestack will require that you've retrieved a GRA JWT. Valid values are `Local` or `Global`. Defaults to `Local`.
func (o LookupIntelligentFeedResultOutput) Scope() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupIntelligentFeedResult) *string { return v.Scope }).(pulumi.StringPtrOutput)
}

// The time to poll for updates if frequency is daily. The number must be between [0, 23] incluside.
func (o LookupIntelligentFeedResultOutput) Time() pulumi.IntOutput {
	return o.ApplyT(func(v LookupIntelligentFeedResult) int { return v.Time }).(pulumi.IntOutput)
}

// The intelligent feed type. Valid values are `IP_LIST` or `URL_LIST`.
func (o LookupIntelligentFeedResultOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v LookupIntelligentFeedResult) string { return v.Type }).(pulumi.StringOutput)
}

// The update token.
func (o LookupIntelligentFeedResultOutput) UpdateToken() pulumi.StringOutput {
	return o.ApplyT(func(v LookupIntelligentFeedResult) string { return v.UpdateToken }).(pulumi.StringOutput)
}

// The intelligent feed source.
func (o LookupIntelligentFeedResultOutput) Url() pulumi.StringOutput {
	return o.ApplyT(func(v LookupIntelligentFeedResult) string { return v.Url }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupIntelligentFeedResultOutput{})
}
